// Generated by jextract

package io.github.kgpu.wgpuj;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;

import jdk.incubator.foreign.*;

import static jdk.incubator.foreign.CLinker.*;
public final class wgpu_h  {

    /* package-private */ wgpu_h() {}
    public static  int _VCRT_COMPILER_PREPROCESSOR() {
        return wgpu_h_constants_0._VCRT_COMPILER_PREPROCESSOR();
    }
    public static  int _SAL_VERSION() {
        return wgpu_h_constants_0._SAL_VERSION();
    }
    public static  int __SAL_H_VERSION() {
        return wgpu_h_constants_0.__SAL_H_VERSION();
    }
    public static  int _USE_DECLSPECS_FOR_SAL() {
        return wgpu_h_constants_0._USE_DECLSPECS_FOR_SAL();
    }
    public static  int _USE_ATTRIBUTES_FOR_SAL() {
        return wgpu_h_constants_0._USE_ATTRIBUTES_FOR_SAL();
    }
    public static  int _CRT_PACKING() {
        return wgpu_h_constants_0._CRT_PACKING();
    }
    public static  int _HAS_EXCEPTIONS() {
        return wgpu_h_constants_0._HAS_EXCEPTIONS();
    }
    public static  int _HAS_CXX17() {
        return wgpu_h_constants_0._HAS_CXX17();
    }
    public static  int _HAS_CXX20() {
        return wgpu_h_constants_0._HAS_CXX20();
    }
    public static  int _HAS_NODISCARD() {
        return wgpu_h_constants_0._HAS_NODISCARD();
    }
    public static  int WCHAR_MIN() {
        return wgpu_h_constants_0.WCHAR_MIN();
    }
    public static  int WCHAR_MAX() {
        return wgpu_h_constants_0.WCHAR_MAX();
    }
    public static  int WINT_MIN() {
        return wgpu_h_constants_0.WINT_MIN();
    }
    public static  int WINT_MAX() {
        return wgpu_h_constants_0.WINT_MAX();
    }
    public static  int true_() {
        return wgpu_h_constants_0.true_();
    }
    public static  int false_() {
        return wgpu_h_constants_0.false_();
    }
    public static  int __bool_true_false_are_defined() {
        return wgpu_h_constants_0.__bool_true_false_are_defined();
    }
    public static  MethodHandle __va_start$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_0.__va_start$MH(),"unresolved symbol: __va_start");
    }
    public static void __va_start ( Addressable x0, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_0.__va_start$MH(), "unresolved symbol: __va_start");
        try {
            mh$.invokeExact(x0.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  ValueLayout ptrdiff_t = C_LONG_LONG;
    public static  ValueLayout intptr_t = C_LONG_LONG;
    public static  MethodHandle __security_init_cookie$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_0.__security_init_cookie$MH(),"unresolved symbol: __security_init_cookie");
    }
    public static void __security_init_cookie () {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_0.__security_init_cookie$MH(), "unresolved symbol: __security_init_cookie");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle __security_check_cookie$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_0.__security_check_cookie$MH(),"unresolved symbol: __security_check_cookie");
    }
    public static void __security_check_cookie ( long _StackCookie) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_0.__security_check_cookie$MH(), "unresolved symbol: __security_check_cookie");
        try {
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle __report_gsfailure$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_0.__report_gsfailure$MH(),"unresolved symbol: __report_gsfailure");
    }
    public static void __report_gsfailure ( long _StackCookie) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_0.__report_gsfailure$MH(), "unresolved symbol: __report_gsfailure");
        try {
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MemoryLayout __security_cookie$LAYOUT() {
        return wgpu_h_constants_0.__security_cookie$LAYOUT();
    }
    public static  VarHandle __security_cookie$VH() {
        return wgpu_h_constants_0.__security_cookie$VH();
    }
    public static  MemorySegment __security_cookie$SEGMENT() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_0.__security_cookie$SEGMENT(),"unresolved symbol: __security_cookie");
    }
    public static  long __security_cookie$get() {
        return (long) wgpu_h_constants_0.__security_cookie$VH().get(RuntimeHelper.requireNonNull(wgpu_h_constants_0.__security_cookie$SEGMENT(), "unresolved symbol: __security_cookie"));
    }
    public static void __security_cookie$set( long x) {
        wgpu_h_constants_0.__security_cookie$VH().set(RuntimeHelper.requireNonNull(wgpu_h_constants_0.__security_cookie$SEGMENT(), "unresolved symbol: __security_cookie"), x);
    }
    public static  ValueLayout int16_t = C_SHORT;
    public static  ValueLayout int32_t = C_INT;
    public static  ValueLayout int64_t = C_LONG_LONG;
    public static  ValueLayout int_least16_t = C_SHORT;
    public static  ValueLayout int_least32_t = C_INT;
    public static  ValueLayout int_least64_t = C_LONG_LONG;
    public static  ValueLayout int_fast16_t = C_INT;
    public static  ValueLayout int_fast32_t = C_INT;
    public static  ValueLayout int_fast64_t = C_LONG_LONG;
    public static  ValueLayout intmax_t = C_LONG_LONG;
    public static  ValueLayout ptrdiff_t$0 = C_LONG_LONG;
    public static  ValueLayout max_align_t = C_DOUBLE;
    public static  int WGPUAdapterType_DiscreteGPU() {
        return wgpu_h_constants_0.WGPUAdapterType_DiscreteGPU();
    }
    public static  int WGPUAdapterType_IntegratedGPU() {
        return wgpu_h_constants_0.WGPUAdapterType_IntegratedGPU();
    }
    public static  int WGPUAdapterType_CPU() {
        return wgpu_h_constants_0.WGPUAdapterType_CPU();
    }
    public static  int WGPUAdapterType_Unknown() {
        return wgpu_h_constants_0.WGPUAdapterType_Unknown();
    }
    public static  int WGPUAdapterType_Force32() {
        return wgpu_h_constants_0.WGPUAdapterType_Force32();
    }
    public static  int WGPUAddressMode_Repeat() {
        return wgpu_h_constants_0.WGPUAddressMode_Repeat();
    }
    public static  int WGPUAddressMode_MirrorRepeat() {
        return wgpu_h_constants_0.WGPUAddressMode_MirrorRepeat();
    }
    public static  int WGPUAddressMode_ClampToEdge() {
        return wgpu_h_constants_0.WGPUAddressMode_ClampToEdge();
    }
    public static  int WGPUAddressMode_Force32() {
        return wgpu_h_constants_0.WGPUAddressMode_Force32();
    }
    public static  int WGPUBackendType_Null() {
        return wgpu_h_constants_0.WGPUBackendType_Null();
    }
    public static  int WGPUBackendType_D3D11() {
        return wgpu_h_constants_0.WGPUBackendType_D3D11();
    }
    public static  int WGPUBackendType_D3D12() {
        return wgpu_h_constants_0.WGPUBackendType_D3D12();
    }
    public static  int WGPUBackendType_Metal() {
        return wgpu_h_constants_0.WGPUBackendType_Metal();
    }
    public static  int WGPUBackendType_Vulkan() {
        return wgpu_h_constants_0.WGPUBackendType_Vulkan();
    }
    public static  int WGPUBackendType_OpenGL() {
        return wgpu_h_constants_0.WGPUBackendType_OpenGL();
    }
    public static  int WGPUBackendType_OpenGLES() {
        return wgpu_h_constants_0.WGPUBackendType_OpenGLES();
    }
    public static  int WGPUBackendType_Force32() {
        return wgpu_h_constants_0.WGPUBackendType_Force32();
    }
    public static  int WGPUBlendFactor_Zero() {
        return wgpu_h_constants_0.WGPUBlendFactor_Zero();
    }
    public static  int WGPUBlendFactor_One() {
        return wgpu_h_constants_0.WGPUBlendFactor_One();
    }
    public static  int WGPUBlendFactor_SrcColor() {
        return wgpu_h_constants_0.WGPUBlendFactor_SrcColor();
    }
    public static  int WGPUBlendFactor_OneMinusSrcColor() {
        return wgpu_h_constants_0.WGPUBlendFactor_OneMinusSrcColor();
    }
    public static  int WGPUBlendFactor_SrcAlpha() {
        return wgpu_h_constants_0.WGPUBlendFactor_SrcAlpha();
    }
    public static  int WGPUBlendFactor_OneMinusSrcAlpha() {
        return wgpu_h_constants_0.WGPUBlendFactor_OneMinusSrcAlpha();
    }
    public static  int WGPUBlendFactor_DstColor() {
        return wgpu_h_constants_0.WGPUBlendFactor_DstColor();
    }
    public static  int WGPUBlendFactor_OneMinusDstColor() {
        return wgpu_h_constants_0.WGPUBlendFactor_OneMinusDstColor();
    }
    public static  int WGPUBlendFactor_DstAlpha() {
        return wgpu_h_constants_0.WGPUBlendFactor_DstAlpha();
    }
    public static  int WGPUBlendFactor_OneMinusDstAlpha() {
        return wgpu_h_constants_0.WGPUBlendFactor_OneMinusDstAlpha();
    }
    public static  int WGPUBlendFactor_SrcAlphaSaturated() {
        return wgpu_h_constants_0.WGPUBlendFactor_SrcAlphaSaturated();
    }
    public static  int WGPUBlendFactor_BlendColor() {
        return wgpu_h_constants_0.WGPUBlendFactor_BlendColor();
    }
    public static  int WGPUBlendFactor_OneMinusBlendColor() {
        return wgpu_h_constants_0.WGPUBlendFactor_OneMinusBlendColor();
    }
    public static  int WGPUBlendFactor_Force32() {
        return wgpu_h_constants_0.WGPUBlendFactor_Force32();
    }
    public static  int WGPUBlendOperation_Add() {
        return wgpu_h_constants_0.WGPUBlendOperation_Add();
    }
    public static  int WGPUBlendOperation_Subtract() {
        return wgpu_h_constants_0.WGPUBlendOperation_Subtract();
    }
    public static  int WGPUBlendOperation_ReverseSubtract() {
        return wgpu_h_constants_0.WGPUBlendOperation_ReverseSubtract();
    }
    public static  int WGPUBlendOperation_Min() {
        return wgpu_h_constants_0.WGPUBlendOperation_Min();
    }
    public static  int WGPUBlendOperation_Max() {
        return wgpu_h_constants_0.WGPUBlendOperation_Max();
    }
    public static  int WGPUBlendOperation_Force32() {
        return wgpu_h_constants_0.WGPUBlendOperation_Force32();
    }
    public static  int WGPUBufferBindingType_Undefined() {
        return wgpu_h_constants_0.WGPUBufferBindingType_Undefined();
    }
    public static  int WGPUBufferBindingType_Uniform() {
        return wgpu_h_constants_0.WGPUBufferBindingType_Uniform();
    }
    public static  int WGPUBufferBindingType_Storage() {
        return wgpu_h_constants_0.WGPUBufferBindingType_Storage();
    }
    public static  int WGPUBufferBindingType_ReadOnlyStorage() {
        return wgpu_h_constants_0.WGPUBufferBindingType_ReadOnlyStorage();
    }
    public static  int WGPUBufferBindingType_Force32() {
        return wgpu_h_constants_0.WGPUBufferBindingType_Force32();
    }
    public static  int WGPUBufferMapAsyncStatus_Success() {
        return wgpu_h_constants_0.WGPUBufferMapAsyncStatus_Success();
    }
    public static  int WGPUBufferMapAsyncStatus_Error() {
        return wgpu_h_constants_0.WGPUBufferMapAsyncStatus_Error();
    }
    public static  int WGPUBufferMapAsyncStatus_Unknown() {
        return wgpu_h_constants_0.WGPUBufferMapAsyncStatus_Unknown();
    }
    public static  int WGPUBufferMapAsyncStatus_DeviceLost() {
        return wgpu_h_constants_0.WGPUBufferMapAsyncStatus_DeviceLost();
    }
    public static  int WGPUBufferMapAsyncStatus_DestroyedBeforeCallback() {
        return wgpu_h_constants_0.WGPUBufferMapAsyncStatus_DestroyedBeforeCallback();
    }
    public static  int WGPUBufferMapAsyncStatus_UnmappedBeforeCallback() {
        return wgpu_h_constants_0.WGPUBufferMapAsyncStatus_UnmappedBeforeCallback();
    }
    public static  int WGPUBufferMapAsyncStatus_Force32() {
        return wgpu_h_constants_0.WGPUBufferMapAsyncStatus_Force32();
    }
    public static  int WGPUCompareFunction_Undefined() {
        return wgpu_h_constants_0.WGPUCompareFunction_Undefined();
    }
    public static  int WGPUCompareFunction_Never() {
        return wgpu_h_constants_0.WGPUCompareFunction_Never();
    }
    public static  int WGPUCompareFunction_Less() {
        return wgpu_h_constants_0.WGPUCompareFunction_Less();
    }
    public static  int WGPUCompareFunction_LessEqual() {
        return wgpu_h_constants_0.WGPUCompareFunction_LessEqual();
    }
    public static  int WGPUCompareFunction_Greater() {
        return wgpu_h_constants_0.WGPUCompareFunction_Greater();
    }
    public static  int WGPUCompareFunction_GreaterEqual() {
        return wgpu_h_constants_0.WGPUCompareFunction_GreaterEqual();
    }
    public static  int WGPUCompareFunction_Equal() {
        return wgpu_h_constants_0.WGPUCompareFunction_Equal();
    }
    public static  int WGPUCompareFunction_NotEqual() {
        return wgpu_h_constants_0.WGPUCompareFunction_NotEqual();
    }
    public static  int WGPUCompareFunction_Always() {
        return wgpu_h_constants_0.WGPUCompareFunction_Always();
    }
    public static  int WGPUCompareFunction_Force32() {
        return wgpu_h_constants_0.WGPUCompareFunction_Force32();
    }
    public static  int WGPUCreatePipelineAsyncStatus_Success() {
        return wgpu_h_constants_0.WGPUCreatePipelineAsyncStatus_Success();
    }
    public static  int WGPUCreatePipelineAsyncStatus_Error() {
        return wgpu_h_constants_0.WGPUCreatePipelineAsyncStatus_Error();
    }
    public static  int WGPUCreatePipelineAsyncStatus_DeviceLost() {
        return wgpu_h_constants_0.WGPUCreatePipelineAsyncStatus_DeviceLost();
    }
    public static  int WGPUCreatePipelineAsyncStatus_DeviceDestroyed() {
        return wgpu_h_constants_0.WGPUCreatePipelineAsyncStatus_DeviceDestroyed();
    }
    public static  int WGPUCreatePipelineAsyncStatus_Unknown() {
        return wgpu_h_constants_0.WGPUCreatePipelineAsyncStatus_Unknown();
    }
    public static  int WGPUCreatePipelineAsyncStatus_Force32() {
        return wgpu_h_constants_0.WGPUCreatePipelineAsyncStatus_Force32();
    }
    public static  int WGPUCullMode_None() {
        return wgpu_h_constants_0.WGPUCullMode_None();
    }
    public static  int WGPUCullMode_Front() {
        return wgpu_h_constants_0.WGPUCullMode_Front();
    }
    public static  int WGPUCullMode_Back() {
        return wgpu_h_constants_0.WGPUCullMode_Back();
    }
    public static  int WGPUCullMode_Force32() {
        return wgpu_h_constants_0.WGPUCullMode_Force32();
    }
    public static  int WGPUErrorFilter_None() {
        return wgpu_h_constants_0.WGPUErrorFilter_None();
    }
    public static  int WGPUErrorFilter_Validation() {
        return wgpu_h_constants_0.WGPUErrorFilter_Validation();
    }
    public static  int WGPUErrorFilter_OutOfMemory() {
        return wgpu_h_constants_0.WGPUErrorFilter_OutOfMemory();
    }
    public static  int WGPUErrorFilter_Force32() {
        return wgpu_h_constants_0.WGPUErrorFilter_Force32();
    }
    public static  int WGPUErrorType_NoError() {
        return wgpu_h_constants_0.WGPUErrorType_NoError();
    }
    public static  int WGPUErrorType_Validation() {
        return wgpu_h_constants_0.WGPUErrorType_Validation();
    }
    public static  int WGPUErrorType_OutOfMemory() {
        return wgpu_h_constants_0.WGPUErrorType_OutOfMemory();
    }
    public static  int WGPUErrorType_Unknown() {
        return wgpu_h_constants_0.WGPUErrorType_Unknown();
    }
    public static  int WGPUErrorType_DeviceLost() {
        return wgpu_h_constants_0.WGPUErrorType_DeviceLost();
    }
    public static  int WGPUErrorType_Force32() {
        return wgpu_h_constants_0.WGPUErrorType_Force32();
    }
    public static  int WGPUFilterMode_Nearest() {
        return wgpu_h_constants_0.WGPUFilterMode_Nearest();
    }
    public static  int WGPUFilterMode_Linear() {
        return wgpu_h_constants_0.WGPUFilterMode_Linear();
    }
    public static  int WGPUFilterMode_Force32() {
        return wgpu_h_constants_0.WGPUFilterMode_Force32();
    }
    public static  int WGPUFrontFace_CCW() {
        return wgpu_h_constants_0.WGPUFrontFace_CCW();
    }
    public static  int WGPUFrontFace_CW() {
        return wgpu_h_constants_0.WGPUFrontFace_CW();
    }
    public static  int WGPUFrontFace_Force32() {
        return wgpu_h_constants_0.WGPUFrontFace_Force32();
    }
    public static  int WGPUIndexFormat_Undefined() {
        return wgpu_h_constants_0.WGPUIndexFormat_Undefined();
    }
    public static  int WGPUIndexFormat_Uint16() {
        return wgpu_h_constants_0.WGPUIndexFormat_Uint16();
    }
    public static  int WGPUIndexFormat_Uint32() {
        return wgpu_h_constants_0.WGPUIndexFormat_Uint32();
    }
    public static  int WGPUIndexFormat_Force32() {
        return wgpu_h_constants_0.WGPUIndexFormat_Force32();
    }
    public static  int WGPUInputStepMode_Vertex() {
        return wgpu_h_constants_0.WGPUInputStepMode_Vertex();
    }
    public static  int WGPUInputStepMode_Instance() {
        return wgpu_h_constants_0.WGPUInputStepMode_Instance();
    }
    public static  int WGPUInputStepMode_Force32() {
        return wgpu_h_constants_0.WGPUInputStepMode_Force32();
    }
    public static  int WGPULoadOp_Clear() {
        return wgpu_h_constants_0.WGPULoadOp_Clear();
    }
    public static  int WGPULoadOp_Load() {
        return wgpu_h_constants_0.WGPULoadOp_Load();
    }
    public static  int WGPULoadOp_Force32() {
        return wgpu_h_constants_0.WGPULoadOp_Force32();
    }
    public static  int WGPUPipelineStatisticName_VertexShaderInvocations() {
        return wgpu_h_constants_0.WGPUPipelineStatisticName_VertexShaderInvocations();
    }
    public static  int WGPUPipelineStatisticName_ClipperInvocations() {
        return wgpu_h_constants_0.WGPUPipelineStatisticName_ClipperInvocations();
    }
    public static  int WGPUPipelineStatisticName_ClipperPrimitivesOut() {
        return wgpu_h_constants_0.WGPUPipelineStatisticName_ClipperPrimitivesOut();
    }
    public static  int WGPUPipelineStatisticName_FragmentShaderInvocations() {
        return wgpu_h_constants_0.WGPUPipelineStatisticName_FragmentShaderInvocations();
    }
    public static  int WGPUPipelineStatisticName_ComputeShaderInvocations() {
        return wgpu_h_constants_0.WGPUPipelineStatisticName_ComputeShaderInvocations();
    }
    public static  int WGPUPipelineStatisticName_Force32() {
        return wgpu_h_constants_0.WGPUPipelineStatisticName_Force32();
    }
    public static  int WGPUPresentMode_Immediate() {
        return wgpu_h_constants_0.WGPUPresentMode_Immediate();
    }
    public static  int WGPUPresentMode_Mailbox() {
        return wgpu_h_constants_0.WGPUPresentMode_Mailbox();
    }
    public static  int WGPUPresentMode_Fifo() {
        return wgpu_h_constants_0.WGPUPresentMode_Fifo();
    }
    public static  int WGPUPresentMode_Force32() {
        return wgpu_h_constants_0.WGPUPresentMode_Force32();
    }
    public static  int WGPUPrimitiveTopology_PointList() {
        return wgpu_h_constants_0.WGPUPrimitiveTopology_PointList();
    }
    public static  int WGPUPrimitiveTopology_LineList() {
        return wgpu_h_constants_0.WGPUPrimitiveTopology_LineList();
    }
    public static  int WGPUPrimitiveTopology_LineStrip() {
        return wgpu_h_constants_0.WGPUPrimitiveTopology_LineStrip();
    }
    public static  int WGPUPrimitiveTopology_TriangleList() {
        return wgpu_h_constants_0.WGPUPrimitiveTopology_TriangleList();
    }
    public static  int WGPUPrimitiveTopology_TriangleStrip() {
        return wgpu_h_constants_0.WGPUPrimitiveTopology_TriangleStrip();
    }
    public static  int WGPUPrimitiveTopology_Force32() {
        return wgpu_h_constants_0.WGPUPrimitiveTopology_Force32();
    }
    public static  int WGPUQueryType_Occlusion() {
        return wgpu_h_constants_0.WGPUQueryType_Occlusion();
    }
    public static  int WGPUQueryType_PipelineStatistics() {
        return wgpu_h_constants_0.WGPUQueryType_PipelineStatistics();
    }
    public static  int WGPUQueryType_Timestamp() {
        return wgpu_h_constants_0.WGPUQueryType_Timestamp();
    }
    public static  int WGPUQueryType_Force32() {
        return wgpu_h_constants_0.WGPUQueryType_Force32();
    }
    public static  int WGPUQueueWorkDoneStatus_Success() {
        return wgpu_h_constants_0.WGPUQueueWorkDoneStatus_Success();
    }
    public static  int WGPUQueueWorkDoneStatus_Error() {
        return wgpu_h_constants_0.WGPUQueueWorkDoneStatus_Error();
    }
    public static  int WGPUQueueWorkDoneStatus_Unknown() {
        return wgpu_h_constants_0.WGPUQueueWorkDoneStatus_Unknown();
    }
    public static  int WGPUQueueWorkDoneStatus_DeviceLost() {
        return wgpu_h_constants_0.WGPUQueueWorkDoneStatus_DeviceLost();
    }
    public static  int WGPUQueueWorkDoneStatus_Force32() {
        return wgpu_h_constants_0.WGPUQueueWorkDoneStatus_Force32();
    }
    public static  int WGPUSType_Invalid() {
        return wgpu_h_constants_0.WGPUSType_Invalid();
    }
    public static  int WGPUSType_SurfaceDescriptorFromMetalLayer() {
        return wgpu_h_constants_0.WGPUSType_SurfaceDescriptorFromMetalLayer();
    }
    public static  int WGPUSType_SurfaceDescriptorFromWindowsHWND() {
        return wgpu_h_constants_0.WGPUSType_SurfaceDescriptorFromWindowsHWND();
    }
    public static  int WGPUSType_SurfaceDescriptorFromXlib() {
        return wgpu_h_constants_0.WGPUSType_SurfaceDescriptorFromXlib();
    }
    public static  int WGPUSType_SurfaceDescriptorFromCanvasHTMLSelector() {
        return wgpu_h_constants_0.WGPUSType_SurfaceDescriptorFromCanvasHTMLSelector();
    }
    public static  int WGPUSType_ShaderModuleSPIRVDescriptor() {
        return wgpu_h_constants_0.WGPUSType_ShaderModuleSPIRVDescriptor();
    }
    public static  int WGPUSType_ShaderModuleWGSLDescriptor() {
        return wgpu_h_constants_0.WGPUSType_ShaderModuleWGSLDescriptor();
    }
    public static  int WGPUSType_Force32() {
        return wgpu_h_constants_0.WGPUSType_Force32();
    }
    public static  int WGPUSamplerBindingType_Undefined() {
        return wgpu_h_constants_0.WGPUSamplerBindingType_Undefined();
    }
    public static  int WGPUSamplerBindingType_Filtering() {
        return wgpu_h_constants_0.WGPUSamplerBindingType_Filtering();
    }
    public static  int WGPUSamplerBindingType_NonFiltering() {
        return wgpu_h_constants_0.WGPUSamplerBindingType_NonFiltering();
    }
    public static  int WGPUSamplerBindingType_Comparison() {
        return wgpu_h_constants_0.WGPUSamplerBindingType_Comparison();
    }
    public static  int WGPUSamplerBindingType_Force32() {
        return wgpu_h_constants_0.WGPUSamplerBindingType_Force32();
    }
    public static  int WGPUStencilOperation_Keep() {
        return wgpu_h_constants_0.WGPUStencilOperation_Keep();
    }
    public static  int WGPUStencilOperation_Zero() {
        return wgpu_h_constants_0.WGPUStencilOperation_Zero();
    }
    public static  int WGPUStencilOperation_Replace() {
        return wgpu_h_constants_0.WGPUStencilOperation_Replace();
    }
    public static  int WGPUStencilOperation_Invert() {
        return wgpu_h_constants_0.WGPUStencilOperation_Invert();
    }
    public static  int WGPUStencilOperation_IncrementClamp() {
        return wgpu_h_constants_0.WGPUStencilOperation_IncrementClamp();
    }
    public static  int WGPUStencilOperation_DecrementClamp() {
        return wgpu_h_constants_0.WGPUStencilOperation_DecrementClamp();
    }
    public static  int WGPUStencilOperation_IncrementWrap() {
        return wgpu_h_constants_0.WGPUStencilOperation_IncrementWrap();
    }
    public static  int WGPUStencilOperation_DecrementWrap() {
        return wgpu_h_constants_0.WGPUStencilOperation_DecrementWrap();
    }
    public static  int WGPUStencilOperation_Force32() {
        return wgpu_h_constants_0.WGPUStencilOperation_Force32();
    }
    public static  int WGPUStorageTextureAccess_Undefined() {
        return wgpu_h_constants_0.WGPUStorageTextureAccess_Undefined();
    }
    public static  int WGPUStorageTextureAccess_ReadOnly() {
        return wgpu_h_constants_0.WGPUStorageTextureAccess_ReadOnly();
    }
    public static  int WGPUStorageTextureAccess_WriteOnly() {
        return wgpu_h_constants_0.WGPUStorageTextureAccess_WriteOnly();
    }
    public static  int WGPUStorageTextureAccess_Force32() {
        return wgpu_h_constants_0.WGPUStorageTextureAccess_Force32();
    }
    public static  int WGPUStoreOp_Store() {
        return wgpu_h_constants_0.WGPUStoreOp_Store();
    }
    public static  int WGPUStoreOp_Clear() {
        return wgpu_h_constants_0.WGPUStoreOp_Clear();
    }
    public static  int WGPUStoreOp_Force32() {
        return wgpu_h_constants_0.WGPUStoreOp_Force32();
    }
    public static  int WGPUTextureAspect_All() {
        return wgpu_h_constants_0.WGPUTextureAspect_All();
    }
    public static  int WGPUTextureAspect_StencilOnly() {
        return wgpu_h_constants_0.WGPUTextureAspect_StencilOnly();
    }
    public static  int WGPUTextureAspect_DepthOnly() {
        return wgpu_h_constants_0.WGPUTextureAspect_DepthOnly();
    }
    public static  int WGPUTextureAspect_Force32() {
        return wgpu_h_constants_0.WGPUTextureAspect_Force32();
    }
    public static  int WGPUTextureComponentType_Float() {
        return wgpu_h_constants_0.WGPUTextureComponentType_Float();
    }
    public static  int WGPUTextureComponentType_Sint() {
        return wgpu_h_constants_0.WGPUTextureComponentType_Sint();
    }
    public static  int WGPUTextureComponentType_Uint() {
        return wgpu_h_constants_0.WGPUTextureComponentType_Uint();
    }
    public static  int WGPUTextureComponentType_DepthComparison() {
        return wgpu_h_constants_0.WGPUTextureComponentType_DepthComparison();
    }
    public static  int WGPUTextureComponentType_Force32() {
        return wgpu_h_constants_0.WGPUTextureComponentType_Force32();
    }
    public static  int WGPUTextureDimension_1D() {
        return wgpu_h_constants_0.WGPUTextureDimension_1D();
    }
    public static  int WGPUTextureDimension_2D() {
        return wgpu_h_constants_0.WGPUTextureDimension_2D();
    }
    public static  int WGPUTextureDimension_3D() {
        return wgpu_h_constants_0.WGPUTextureDimension_3D();
    }
    public static  int WGPUTextureDimension_Force32() {
        return wgpu_h_constants_0.WGPUTextureDimension_Force32();
    }
    public static  int WGPUTextureFormat_Undefined() {
        return wgpu_h_constants_0.WGPUTextureFormat_Undefined();
    }
    public static  int WGPUTextureFormat_R8Unorm() {
        return wgpu_h_constants_0.WGPUTextureFormat_R8Unorm();
    }
    public static  int WGPUTextureFormat_R8Snorm() {
        return wgpu_h_constants_0.WGPUTextureFormat_R8Snorm();
    }
    public static  int WGPUTextureFormat_R8Uint() {
        return wgpu_h_constants_0.WGPUTextureFormat_R8Uint();
    }
    public static  int WGPUTextureFormat_R8Sint() {
        return wgpu_h_constants_0.WGPUTextureFormat_R8Sint();
    }
    public static  int WGPUTextureFormat_R16Uint() {
        return wgpu_h_constants_0.WGPUTextureFormat_R16Uint();
    }
    public static  int WGPUTextureFormat_R16Sint() {
        return wgpu_h_constants_0.WGPUTextureFormat_R16Sint();
    }
    public static  int WGPUTextureFormat_R16Float() {
        return wgpu_h_constants_0.WGPUTextureFormat_R16Float();
    }
    public static  int WGPUTextureFormat_RG8Unorm() {
        return wgpu_h_constants_0.WGPUTextureFormat_RG8Unorm();
    }
    public static  int WGPUTextureFormat_RG8Snorm() {
        return wgpu_h_constants_0.WGPUTextureFormat_RG8Snorm();
    }
    public static  int WGPUTextureFormat_RG8Uint() {
        return wgpu_h_constants_0.WGPUTextureFormat_RG8Uint();
    }
    public static  int WGPUTextureFormat_RG8Sint() {
        return wgpu_h_constants_0.WGPUTextureFormat_RG8Sint();
    }
    public static  int WGPUTextureFormat_R32Float() {
        return wgpu_h_constants_0.WGPUTextureFormat_R32Float();
    }
    public static  int WGPUTextureFormat_R32Uint() {
        return wgpu_h_constants_0.WGPUTextureFormat_R32Uint();
    }
    public static  int WGPUTextureFormat_R32Sint() {
        return wgpu_h_constants_0.WGPUTextureFormat_R32Sint();
    }
    public static  int WGPUTextureFormat_RG16Uint() {
        return wgpu_h_constants_0.WGPUTextureFormat_RG16Uint();
    }
    public static  int WGPUTextureFormat_RG16Sint() {
        return wgpu_h_constants_0.WGPUTextureFormat_RG16Sint();
    }
    public static  int WGPUTextureFormat_RG16Float() {
        return wgpu_h_constants_0.WGPUTextureFormat_RG16Float();
    }
    public static  int WGPUTextureFormat_RGBA8Unorm() {
        return wgpu_h_constants_0.WGPUTextureFormat_RGBA8Unorm();
    }
    public static  int WGPUTextureFormat_RGBA8UnormSrgb() {
        return wgpu_h_constants_0.WGPUTextureFormat_RGBA8UnormSrgb();
    }
    public static  int WGPUTextureFormat_RGBA8Snorm() {
        return wgpu_h_constants_0.WGPUTextureFormat_RGBA8Snorm();
    }
    public static  int WGPUTextureFormat_RGBA8Uint() {
        return wgpu_h_constants_0.WGPUTextureFormat_RGBA8Uint();
    }
    public static  int WGPUTextureFormat_RGBA8Sint() {
        return wgpu_h_constants_0.WGPUTextureFormat_RGBA8Sint();
    }
    public static  int WGPUTextureFormat_BGRA8Unorm() {
        return wgpu_h_constants_0.WGPUTextureFormat_BGRA8Unorm();
    }
    public static  int WGPUTextureFormat_BGRA8UnormSrgb() {
        return wgpu_h_constants_0.WGPUTextureFormat_BGRA8UnormSrgb();
    }
    public static  int WGPUTextureFormat_RGB10A2Unorm() {
        return wgpu_h_constants_0.WGPUTextureFormat_RGB10A2Unorm();
    }
    public static  int WGPUTextureFormat_RG11B10Ufloat() {
        return wgpu_h_constants_0.WGPUTextureFormat_RG11B10Ufloat();
    }
    public static  int WGPUTextureFormat_RGB9E5Ufloat() {
        return wgpu_h_constants_0.WGPUTextureFormat_RGB9E5Ufloat();
    }
    public static  int WGPUTextureFormat_RG32Float() {
        return wgpu_h_constants_0.WGPUTextureFormat_RG32Float();
    }
    public static  int WGPUTextureFormat_RG32Uint() {
        return wgpu_h_constants_0.WGPUTextureFormat_RG32Uint();
    }
    public static  int WGPUTextureFormat_RG32Sint() {
        return wgpu_h_constants_0.WGPUTextureFormat_RG32Sint();
    }
    public static  int WGPUTextureFormat_RGBA16Uint() {
        return wgpu_h_constants_0.WGPUTextureFormat_RGBA16Uint();
    }
    public static  int WGPUTextureFormat_RGBA16Sint() {
        return wgpu_h_constants_0.WGPUTextureFormat_RGBA16Sint();
    }
    public static  int WGPUTextureFormat_RGBA16Float() {
        return wgpu_h_constants_0.WGPUTextureFormat_RGBA16Float();
    }
    public static  int WGPUTextureFormat_RGBA32Float() {
        return wgpu_h_constants_0.WGPUTextureFormat_RGBA32Float();
    }
    public static  int WGPUTextureFormat_RGBA32Uint() {
        return wgpu_h_constants_0.WGPUTextureFormat_RGBA32Uint();
    }
    public static  int WGPUTextureFormat_RGBA32Sint() {
        return wgpu_h_constants_0.WGPUTextureFormat_RGBA32Sint();
    }
    public static  int WGPUTextureFormat_Depth32Float() {
        return wgpu_h_constants_0.WGPUTextureFormat_Depth32Float();
    }
    public static  int WGPUTextureFormat_Depth24Plus() {
        return wgpu_h_constants_0.WGPUTextureFormat_Depth24Plus();
    }
    public static  int WGPUTextureFormat_Depth24PlusStencil8() {
        return wgpu_h_constants_0.WGPUTextureFormat_Depth24PlusStencil8();
    }
    public static  int WGPUTextureFormat_Stencil8() {
        return wgpu_h_constants_0.WGPUTextureFormat_Stencil8();
    }
    public static  int WGPUTextureFormat_BC1RGBAUnorm() {
        return wgpu_h_constants_0.WGPUTextureFormat_BC1RGBAUnorm();
    }
    public static  int WGPUTextureFormat_BC1RGBAUnormSrgb() {
        return wgpu_h_constants_0.WGPUTextureFormat_BC1RGBAUnormSrgb();
    }
    public static  int WGPUTextureFormat_BC2RGBAUnorm() {
        return wgpu_h_constants_0.WGPUTextureFormat_BC2RGBAUnorm();
    }
    public static  int WGPUTextureFormat_BC2RGBAUnormSrgb() {
        return wgpu_h_constants_0.WGPUTextureFormat_BC2RGBAUnormSrgb();
    }
    public static  int WGPUTextureFormat_BC3RGBAUnorm() {
        return wgpu_h_constants_0.WGPUTextureFormat_BC3RGBAUnorm();
    }
    public static  int WGPUTextureFormat_BC3RGBAUnormSrgb() {
        return wgpu_h_constants_0.WGPUTextureFormat_BC3RGBAUnormSrgb();
    }
    public static  int WGPUTextureFormat_BC4RUnorm() {
        return wgpu_h_constants_0.WGPUTextureFormat_BC4RUnorm();
    }
    public static  int WGPUTextureFormat_BC4RSnorm() {
        return wgpu_h_constants_0.WGPUTextureFormat_BC4RSnorm();
    }
    public static  int WGPUTextureFormat_BC5RGUnorm() {
        return wgpu_h_constants_0.WGPUTextureFormat_BC5RGUnorm();
    }
    public static  int WGPUTextureFormat_BC5RGSnorm() {
        return wgpu_h_constants_0.WGPUTextureFormat_BC5RGSnorm();
    }
    public static  int WGPUTextureFormat_BC6HRGBUfloat() {
        return wgpu_h_constants_0.WGPUTextureFormat_BC6HRGBUfloat();
    }
    public static  int WGPUTextureFormat_BC6HRGBFloat() {
        return wgpu_h_constants_0.WGPUTextureFormat_BC6HRGBFloat();
    }
    public static  int WGPUTextureFormat_BC7RGBAUnorm() {
        return wgpu_h_constants_0.WGPUTextureFormat_BC7RGBAUnorm();
    }
    public static  int WGPUTextureFormat_BC7RGBAUnormSrgb() {
        return wgpu_h_constants_0.WGPUTextureFormat_BC7RGBAUnormSrgb();
    }
    public static  int WGPUTextureFormat_Force32() {
        return wgpu_h_constants_0.WGPUTextureFormat_Force32();
    }
    public static  int WGPUTextureSampleType_Undefined() {
        return wgpu_h_constants_0.WGPUTextureSampleType_Undefined();
    }
    public static  int WGPUTextureSampleType_Float() {
        return wgpu_h_constants_0.WGPUTextureSampleType_Float();
    }
    public static  int WGPUTextureSampleType_UnfilterableFloat() {
        return wgpu_h_constants_0.WGPUTextureSampleType_UnfilterableFloat();
    }
    public static  int WGPUTextureSampleType_Depth() {
        return wgpu_h_constants_0.WGPUTextureSampleType_Depth();
    }
    public static  int WGPUTextureSampleType_Sint() {
        return wgpu_h_constants_0.WGPUTextureSampleType_Sint();
    }
    public static  int WGPUTextureSampleType_Uint() {
        return wgpu_h_constants_0.WGPUTextureSampleType_Uint();
    }
    public static  int WGPUTextureSampleType_Force32() {
        return wgpu_h_constants_0.WGPUTextureSampleType_Force32();
    }
    public static  int WGPUTextureViewDimension_Undefined() {
        return wgpu_h_constants_0.WGPUTextureViewDimension_Undefined();
    }
    public static  int WGPUTextureViewDimension_1D() {
        return wgpu_h_constants_0.WGPUTextureViewDimension_1D();
    }
    public static  int WGPUTextureViewDimension_2D() {
        return wgpu_h_constants_0.WGPUTextureViewDimension_2D();
    }
    public static  int WGPUTextureViewDimension_2DArray() {
        return wgpu_h_constants_0.WGPUTextureViewDimension_2DArray();
    }
    public static  int WGPUTextureViewDimension_Cube() {
        return wgpu_h_constants_0.WGPUTextureViewDimension_Cube();
    }
    public static  int WGPUTextureViewDimension_CubeArray() {
        return wgpu_h_constants_0.WGPUTextureViewDimension_CubeArray();
    }
    public static  int WGPUTextureViewDimension_3D() {
        return wgpu_h_constants_0.WGPUTextureViewDimension_3D();
    }
    public static  int WGPUTextureViewDimension_Force32() {
        return wgpu_h_constants_0.WGPUTextureViewDimension_Force32();
    }
    public static  int WGPUVertexFormat_Undefined() {
        return wgpu_h_constants_0.WGPUVertexFormat_Undefined();
    }
    public static  int WGPUVertexFormat_Uint8x2() {
        return wgpu_h_constants_0.WGPUVertexFormat_Uint8x2();
    }
    public static  int WGPUVertexFormat_Uint8x4() {
        return wgpu_h_constants_0.WGPUVertexFormat_Uint8x4();
    }
    public static  int WGPUVertexFormat_Sint8x2() {
        return wgpu_h_constants_0.WGPUVertexFormat_Sint8x2();
    }
    public static  int WGPUVertexFormat_Sint8x4() {
        return wgpu_h_constants_0.WGPUVertexFormat_Sint8x4();
    }
    public static  int WGPUVertexFormat_Unorm8x2() {
        return wgpu_h_constants_0.WGPUVertexFormat_Unorm8x2();
    }
    public static  int WGPUVertexFormat_Unorm8x4() {
        return wgpu_h_constants_0.WGPUVertexFormat_Unorm8x4();
    }
    public static  int WGPUVertexFormat_Snorm8x2() {
        return wgpu_h_constants_0.WGPUVertexFormat_Snorm8x2();
    }
    public static  int WGPUVertexFormat_Snorm8x4() {
        return wgpu_h_constants_0.WGPUVertexFormat_Snorm8x4();
    }
    public static  int WGPUVertexFormat_Uint16x2() {
        return wgpu_h_constants_0.WGPUVertexFormat_Uint16x2();
    }
    public static  int WGPUVertexFormat_Uint16x4() {
        return wgpu_h_constants_0.WGPUVertexFormat_Uint16x4();
    }
    public static  int WGPUVertexFormat_Sint16x2() {
        return wgpu_h_constants_0.WGPUVertexFormat_Sint16x2();
    }
    public static  int WGPUVertexFormat_Sint16x4() {
        return wgpu_h_constants_0.WGPUVertexFormat_Sint16x4();
    }
    public static  int WGPUVertexFormat_Unorm16x2() {
        return wgpu_h_constants_0.WGPUVertexFormat_Unorm16x2();
    }
    public static  int WGPUVertexFormat_Unorm16x4() {
        return wgpu_h_constants_0.WGPUVertexFormat_Unorm16x4();
    }
    public static  int WGPUVertexFormat_Snorm16x2() {
        return wgpu_h_constants_0.WGPUVertexFormat_Snorm16x2();
    }
    public static  int WGPUVertexFormat_Snorm16x4() {
        return wgpu_h_constants_0.WGPUVertexFormat_Snorm16x4();
    }
    public static  int WGPUVertexFormat_Float16x2() {
        return wgpu_h_constants_0.WGPUVertexFormat_Float16x2();
    }
    public static  int WGPUVertexFormat_Float16x4() {
        return wgpu_h_constants_0.WGPUVertexFormat_Float16x4();
    }
    public static  int WGPUVertexFormat_Float32() {
        return wgpu_h_constants_0.WGPUVertexFormat_Float32();
    }
    public static  int WGPUVertexFormat_Float32x2() {
        return wgpu_h_constants_0.WGPUVertexFormat_Float32x2();
    }
    public static  int WGPUVertexFormat_Float32x3() {
        return wgpu_h_constants_0.WGPUVertexFormat_Float32x3();
    }
    public static  int WGPUVertexFormat_Float32x4() {
        return wgpu_h_constants_0.WGPUVertexFormat_Float32x4();
    }
    public static  int WGPUVertexFormat_Uint32() {
        return wgpu_h_constants_0.WGPUVertexFormat_Uint32();
    }
    public static  int WGPUVertexFormat_Uint32x2() {
        return wgpu_h_constants_0.WGPUVertexFormat_Uint32x2();
    }
    public static  int WGPUVertexFormat_Uint32x3() {
        return wgpu_h_constants_0.WGPUVertexFormat_Uint32x3();
    }
    public static  int WGPUVertexFormat_Uint32x4() {
        return wgpu_h_constants_0.WGPUVertexFormat_Uint32x4();
    }
    public static  int WGPUVertexFormat_Sint32() {
        return wgpu_h_constants_0.WGPUVertexFormat_Sint32();
    }
    public static  int WGPUVertexFormat_Sint32x2() {
        return wgpu_h_constants_0.WGPUVertexFormat_Sint32x2();
    }
    public static  int WGPUVertexFormat_Sint32x3() {
        return wgpu_h_constants_0.WGPUVertexFormat_Sint32x3();
    }
    public static  int WGPUVertexFormat_Sint32x4() {
        return wgpu_h_constants_0.WGPUVertexFormat_Sint32x4();
    }
    public static  int WGPUVertexFormat_Force32() {
        return wgpu_h_constants_0.WGPUVertexFormat_Force32();
    }
    public static  int WGPUBufferUsage_None() {
        return wgpu_h_constants_0.WGPUBufferUsage_None();
    }
    public static  int WGPUBufferUsage_MapRead() {
        return wgpu_h_constants_0.WGPUBufferUsage_MapRead();
    }
    public static  int WGPUBufferUsage_MapWrite() {
        return wgpu_h_constants_0.WGPUBufferUsage_MapWrite();
    }
    public static  int WGPUBufferUsage_CopySrc() {
        return wgpu_h_constants_0.WGPUBufferUsage_CopySrc();
    }
    public static  int WGPUBufferUsage_CopyDst() {
        return wgpu_h_constants_0.WGPUBufferUsage_CopyDst();
    }
    public static  int WGPUBufferUsage_Index() {
        return wgpu_h_constants_0.WGPUBufferUsage_Index();
    }
    public static  int WGPUBufferUsage_Vertex() {
        return wgpu_h_constants_0.WGPUBufferUsage_Vertex();
    }
    public static  int WGPUBufferUsage_Uniform() {
        return wgpu_h_constants_0.WGPUBufferUsage_Uniform();
    }
    public static  int WGPUBufferUsage_Storage() {
        return wgpu_h_constants_0.WGPUBufferUsage_Storage();
    }
    public static  int WGPUBufferUsage_Indirect() {
        return wgpu_h_constants_0.WGPUBufferUsage_Indirect();
    }
    public static  int WGPUBufferUsage_QueryResolve() {
        return wgpu_h_constants_0.WGPUBufferUsage_QueryResolve();
    }
    public static  int WGPUBufferUsage_Force32() {
        return wgpu_h_constants_0.WGPUBufferUsage_Force32();
    }
    public static  int WGPUColorWriteMask_None() {
        return wgpu_h_constants_0.WGPUColorWriteMask_None();
    }
    public static  int WGPUColorWriteMask_Red() {
        return wgpu_h_constants_0.WGPUColorWriteMask_Red();
    }
    public static  int WGPUColorWriteMask_Green() {
        return wgpu_h_constants_0.WGPUColorWriteMask_Green();
    }
    public static  int WGPUColorWriteMask_Blue() {
        return wgpu_h_constants_0.WGPUColorWriteMask_Blue();
    }
    public static  int WGPUColorWriteMask_Alpha() {
        return wgpu_h_constants_0.WGPUColorWriteMask_Alpha();
    }
    public static  int WGPUColorWriteMask_All() {
        return wgpu_h_constants_0.WGPUColorWriteMask_All();
    }
    public static  int WGPUColorWriteMask_Force32() {
        return wgpu_h_constants_0.WGPUColorWriteMask_Force32();
    }
    public static  int WGPUMapMode_Read() {
        return wgpu_h_constants_0.WGPUMapMode_Read();
    }
    public static  int WGPUMapMode_Write() {
        return wgpu_h_constants_0.WGPUMapMode_Write();
    }
    public static  int WGPUMapMode_Force32() {
        return wgpu_h_constants_0.WGPUMapMode_Force32();
    }
    public static  int WGPUShaderStage_None() {
        return wgpu_h_constants_0.WGPUShaderStage_None();
    }
    public static  int WGPUShaderStage_Vertex() {
        return wgpu_h_constants_0.WGPUShaderStage_Vertex();
    }
    public static  int WGPUShaderStage_Fragment() {
        return wgpu_h_constants_0.WGPUShaderStage_Fragment();
    }
    public static  int WGPUShaderStage_Compute() {
        return wgpu_h_constants_0.WGPUShaderStage_Compute();
    }
    public static  int WGPUShaderStage_Force32() {
        return wgpu_h_constants_0.WGPUShaderStage_Force32();
    }
    public static  int WGPUTextureUsage_None() {
        return wgpu_h_constants_0.WGPUTextureUsage_None();
    }
    public static  int WGPUTextureUsage_CopySrc() {
        return wgpu_h_constants_0.WGPUTextureUsage_CopySrc();
    }
    public static  int WGPUTextureUsage_CopyDst() {
        return wgpu_h_constants_0.WGPUTextureUsage_CopyDst();
    }
    public static  int WGPUTextureUsage_Sampled() {
        return wgpu_h_constants_0.WGPUTextureUsage_Sampled();
    }
    public static  int WGPUTextureUsage_Storage() {
        return wgpu_h_constants_0.WGPUTextureUsage_Storage();
    }
    public static  int WGPUTextureUsage_RenderAttachment() {
        return wgpu_h_constants_0.WGPUTextureUsage_RenderAttachment();
    }
    public static  int WGPUTextureUsage_Force32() {
        return wgpu_h_constants_0.WGPUTextureUsage_Force32();
    }
    public static class WGPUChainedStruct {

        /* package-private */ WGPUChainedStruct() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUChainedStruct$struct$LAYOUT();
        }
        public static VarHandle next$VH() {
            return wgpu_h_constants_0.WGPUChainedStruct$next$VH();
        }
        public static  MemoryAddress next$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUChainedStruct$next$VH().get(seg);
        }
        public static  MemoryAddress next$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUChainedStruct$next$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void next$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUChainedStruct$next$VH().set(seg, x);
        }
        public static void next$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUChainedStruct$next$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sType$VH() {
            return wgpu_h_constants_0.WGPUChainedStruct$sType$VH();
        }
        public static  int sType$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUChainedStruct$sType$VH().get(seg);
        }
        public static  int sType$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUChainedStruct$sType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sType$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUChainedStruct$sType$VH().set(seg, x);
        }
        public static void sType$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUChainedStruct$sType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUAdapterProperties {

        /* package-private */ WGPUAdapterProperties() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUAdapterProperties$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUAdapterProperties$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUAdapterProperties$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUAdapterProperties$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUAdapterProperties$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUAdapterProperties$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle deviceID$VH() {
            return wgpu_h_constants_0.WGPUAdapterProperties$deviceID$VH();
        }
        public static  int deviceID$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUAdapterProperties$deviceID$VH().get(seg);
        }
        public static  int deviceID$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUAdapterProperties$deviceID$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void deviceID$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUAdapterProperties$deviceID$VH().set(seg, x);
        }
        public static void deviceID$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUAdapterProperties$deviceID$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle vendorID$VH() {
            return wgpu_h_constants_0.WGPUAdapterProperties$vendorID$VH();
        }
        public static  int vendorID$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUAdapterProperties$vendorID$VH().get(seg);
        }
        public static  int vendorID$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUAdapterProperties$vendorID$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void vendorID$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUAdapterProperties$vendorID$VH().set(seg, x);
        }
        public static void vendorID$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUAdapterProperties$vendorID$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle name$VH() {
            return wgpu_h_constants_0.WGPUAdapterProperties$name$VH();
        }
        public static  MemoryAddress name$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUAdapterProperties$name$VH().get(seg);
        }
        public static  MemoryAddress name$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUAdapterProperties$name$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void name$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUAdapterProperties$name$VH().set(seg, x);
        }
        public static void name$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUAdapterProperties$name$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle driverDescription$VH() {
            return wgpu_h_constants_0.WGPUAdapterProperties$driverDescription$VH();
        }
        public static  MemoryAddress driverDescription$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUAdapterProperties$driverDescription$VH().get(seg);
        }
        public static  MemoryAddress driverDescription$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUAdapterProperties$driverDescription$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void driverDescription$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUAdapterProperties$driverDescription$VH().set(seg, x);
        }
        public static void driverDescription$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUAdapterProperties$driverDescription$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle adapterType$VH() {
            return wgpu_h_constants_0.WGPUAdapterProperties$adapterType$VH();
        }
        public static  int adapterType$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUAdapterProperties$adapterType$VH().get(seg);
        }
        public static  int adapterType$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUAdapterProperties$adapterType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void adapterType$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUAdapterProperties$adapterType$VH().set(seg, x);
        }
        public static void adapterType$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUAdapterProperties$adapterType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle backendType$VH() {
            return wgpu_h_constants_0.WGPUAdapterProperties$backendType$VH();
        }
        public static  int backendType$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUAdapterProperties$backendType$VH().get(seg);
        }
        public static  int backendType$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUAdapterProperties$backendType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void backendType$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUAdapterProperties$backendType$VH().set(seg, x);
        }
        public static void backendType$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUAdapterProperties$backendType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUBindGroupEntry {

        /* package-private */ WGPUBindGroupEntry() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUBindGroupEntry$struct$LAYOUT();
        }
        public static VarHandle binding$VH() {
            return wgpu_h_constants_0.WGPUBindGroupEntry$binding$VH();
        }
        public static  int binding$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUBindGroupEntry$binding$VH().get(seg);
        }
        public static  int binding$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUBindGroupEntry$binding$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void binding$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUBindGroupEntry$binding$VH().set(seg, x);
        }
        public static void binding$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUBindGroupEntry$binding$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle buffer$VH() {
            return wgpu_h_constants_0.WGPUBindGroupEntry$buffer$VH();
        }
        public static  MemoryAddress buffer$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUBindGroupEntry$buffer$VH().get(seg);
        }
        public static  MemoryAddress buffer$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUBindGroupEntry$buffer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void buffer$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUBindGroupEntry$buffer$VH().set(seg, x);
        }
        public static void buffer$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUBindGroupEntry$buffer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle offset$VH() {
            return wgpu_h_constants_0.WGPUBindGroupEntry$offset$VH();
        }
        public static  long offset$get(MemorySegment seg) {
            return (long)wgpu_h_constants_0.WGPUBindGroupEntry$offset$VH().get(seg);
        }
        public static  long offset$get(MemorySegment seg, long index) {
            return (long)wgpu_h_constants_0.WGPUBindGroupEntry$offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void offset$set( MemorySegment seg, long x) {
            wgpu_h_constants_0.WGPUBindGroupEntry$offset$VH().set(seg, x);
        }
        public static void offset$set(MemorySegment seg, long index, long x) {
            wgpu_h_constants_0.WGPUBindGroupEntry$offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle size$VH() {
            return wgpu_h_constants_0.WGPUBindGroupEntry$size$VH();
        }
        public static  long size$get(MemorySegment seg) {
            return (long)wgpu_h_constants_0.WGPUBindGroupEntry$size$VH().get(seg);
        }
        public static  long size$get(MemorySegment seg, long index) {
            return (long)wgpu_h_constants_0.WGPUBindGroupEntry$size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void size$set( MemorySegment seg, long x) {
            wgpu_h_constants_0.WGPUBindGroupEntry$size$VH().set(seg, x);
        }
        public static void size$set(MemorySegment seg, long index, long x) {
            wgpu_h_constants_0.WGPUBindGroupEntry$size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sampler$VH() {
            return wgpu_h_constants_0.WGPUBindGroupEntry$sampler$VH();
        }
        public static  MemoryAddress sampler$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUBindGroupEntry$sampler$VH().get(seg);
        }
        public static  MemoryAddress sampler$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUBindGroupEntry$sampler$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sampler$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUBindGroupEntry$sampler$VH().set(seg, x);
        }
        public static void sampler$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUBindGroupEntry$sampler$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle textureView$VH() {
            return wgpu_h_constants_0.WGPUBindGroupEntry$textureView$VH();
        }
        public static  MemoryAddress textureView$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUBindGroupEntry$textureView$VH().get(seg);
        }
        public static  MemoryAddress textureView$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUBindGroupEntry$textureView$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void textureView$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUBindGroupEntry$textureView$VH().set(seg, x);
        }
        public static void textureView$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUBindGroupEntry$textureView$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUBlendComponent {

        /* package-private */ WGPUBlendComponent() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUBlendComponent$struct$LAYOUT();
        }
        public static VarHandle srcFactor$VH() {
            return wgpu_h_constants_0.WGPUBlendComponent$srcFactor$VH();
        }
        public static  int srcFactor$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUBlendComponent$srcFactor$VH().get(seg);
        }
        public static  int srcFactor$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUBlendComponent$srcFactor$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void srcFactor$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUBlendComponent$srcFactor$VH().set(seg, x);
        }
        public static void srcFactor$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUBlendComponent$srcFactor$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dstFactor$VH() {
            return wgpu_h_constants_0.WGPUBlendComponent$dstFactor$VH();
        }
        public static  int dstFactor$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUBlendComponent$dstFactor$VH().get(seg);
        }
        public static  int dstFactor$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUBlendComponent$dstFactor$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dstFactor$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUBlendComponent$dstFactor$VH().set(seg, x);
        }
        public static void dstFactor$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUBlendComponent$dstFactor$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle operation$VH() {
            return wgpu_h_constants_0.WGPUBlendComponent$operation$VH();
        }
        public static  int operation$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUBlendComponent$operation$VH().get(seg);
        }
        public static  int operation$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUBlendComponent$operation$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void operation$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUBlendComponent$operation$VH().set(seg, x);
        }
        public static void operation$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUBlendComponent$operation$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUBufferBindingLayout {

        /* package-private */ WGPUBufferBindingLayout() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUBufferBindingLayout$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUBufferBindingLayout$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUBufferBindingLayout$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUBufferBindingLayout$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUBufferBindingLayout$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUBufferBindingLayout$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle type$VH() {
            return wgpu_h_constants_0.WGPUBufferBindingLayout$type$VH();
        }
        public static  int type$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUBufferBindingLayout$type$VH().get(seg);
        }
        public static  int type$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUBufferBindingLayout$type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void type$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUBufferBindingLayout$type$VH().set(seg, x);
        }
        public static void type$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUBufferBindingLayout$type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle hasDynamicOffset$VH() {
            return wgpu_h_constants_0.WGPUBufferBindingLayout$hasDynamicOffset$VH();
        }
        public static  byte hasDynamicOffset$get(MemorySegment seg) {
            return (byte)wgpu_h_constants_0.WGPUBufferBindingLayout$hasDynamicOffset$VH().get(seg);
        }
        public static  byte hasDynamicOffset$get(MemorySegment seg, long index) {
            return (byte)wgpu_h_constants_0.WGPUBufferBindingLayout$hasDynamicOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void hasDynamicOffset$set( MemorySegment seg, byte x) {
            wgpu_h_constants_0.WGPUBufferBindingLayout$hasDynamicOffset$VH().set(seg, x);
        }
        public static void hasDynamicOffset$set(MemorySegment seg, long index, byte x) {
            wgpu_h_constants_0.WGPUBufferBindingLayout$hasDynamicOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle minBindingSize$VH() {
            return wgpu_h_constants_0.WGPUBufferBindingLayout$minBindingSize$VH();
        }
        public static  long minBindingSize$get(MemorySegment seg) {
            return (long)wgpu_h_constants_0.WGPUBufferBindingLayout$minBindingSize$VH().get(seg);
        }
        public static  long minBindingSize$get(MemorySegment seg, long index) {
            return (long)wgpu_h_constants_0.WGPUBufferBindingLayout$minBindingSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void minBindingSize$set( MemorySegment seg, long x) {
            wgpu_h_constants_0.WGPUBufferBindingLayout$minBindingSize$VH().set(seg, x);
        }
        public static void minBindingSize$set(MemorySegment seg, long index, long x) {
            wgpu_h_constants_0.WGPUBufferBindingLayout$minBindingSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUBufferDescriptor {

        /* package-private */ WGPUBufferDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUBufferDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUBufferDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUBufferDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUBufferDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUBufferDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUBufferDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_0.WGPUBufferDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUBufferDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUBufferDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUBufferDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUBufferDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle usage$VH() {
            return wgpu_h_constants_0.WGPUBufferDescriptor$usage$VH();
        }
        public static  int usage$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUBufferDescriptor$usage$VH().get(seg);
        }
        public static  int usage$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUBufferDescriptor$usage$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void usage$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUBufferDescriptor$usage$VH().set(seg, x);
        }
        public static void usage$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUBufferDescriptor$usage$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle size$VH() {
            return wgpu_h_constants_0.WGPUBufferDescriptor$size$VH();
        }
        public static  long size$get(MemorySegment seg) {
            return (long)wgpu_h_constants_0.WGPUBufferDescriptor$size$VH().get(seg);
        }
        public static  long size$get(MemorySegment seg, long index) {
            return (long)wgpu_h_constants_0.WGPUBufferDescriptor$size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void size$set( MemorySegment seg, long x) {
            wgpu_h_constants_0.WGPUBufferDescriptor$size$VH().set(seg, x);
        }
        public static void size$set(MemorySegment seg, long index, long x) {
            wgpu_h_constants_0.WGPUBufferDescriptor$size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mappedAtCreation$VH() {
            return wgpu_h_constants_0.WGPUBufferDescriptor$mappedAtCreation$VH();
        }
        public static  byte mappedAtCreation$get(MemorySegment seg) {
            return (byte)wgpu_h_constants_0.WGPUBufferDescriptor$mappedAtCreation$VH().get(seg);
        }
        public static  byte mappedAtCreation$get(MemorySegment seg, long index) {
            return (byte)wgpu_h_constants_0.WGPUBufferDescriptor$mappedAtCreation$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mappedAtCreation$set( MemorySegment seg, byte x) {
            wgpu_h_constants_0.WGPUBufferDescriptor$mappedAtCreation$VH().set(seg, x);
        }
        public static void mappedAtCreation$set(MemorySegment seg, long index, byte x) {
            wgpu_h_constants_0.WGPUBufferDescriptor$mappedAtCreation$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUColor {

        /* package-private */ WGPUColor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUColor$struct$LAYOUT();
        }
        public static VarHandle r$VH() {
            return wgpu_h_constants_0.WGPUColor$r$VH();
        }
        public static  double r$get(MemorySegment seg) {
            return (double)wgpu_h_constants_0.WGPUColor$r$VH().get(seg);
        }
        public static  double r$get(MemorySegment seg, long index) {
            return (double)wgpu_h_constants_0.WGPUColor$r$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void r$set( MemorySegment seg, double x) {
            wgpu_h_constants_0.WGPUColor$r$VH().set(seg, x);
        }
        public static void r$set(MemorySegment seg, long index, double x) {
            wgpu_h_constants_0.WGPUColor$r$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle g$VH() {
            return wgpu_h_constants_0.WGPUColor$g$VH();
        }
        public static  double g$get(MemorySegment seg) {
            return (double)wgpu_h_constants_0.WGPUColor$g$VH().get(seg);
        }
        public static  double g$get(MemorySegment seg, long index) {
            return (double)wgpu_h_constants_0.WGPUColor$g$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void g$set( MemorySegment seg, double x) {
            wgpu_h_constants_0.WGPUColor$g$VH().set(seg, x);
        }
        public static void g$set(MemorySegment seg, long index, double x) {
            wgpu_h_constants_0.WGPUColor$g$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle b$VH() {
            return wgpu_h_constants_0.WGPUColor$b$VH();
        }
        public static  double b$get(MemorySegment seg) {
            return (double)wgpu_h_constants_0.WGPUColor$b$VH().get(seg);
        }
        public static  double b$get(MemorySegment seg, long index) {
            return (double)wgpu_h_constants_0.WGPUColor$b$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void b$set( MemorySegment seg, double x) {
            wgpu_h_constants_0.WGPUColor$b$VH().set(seg, x);
        }
        public static void b$set(MemorySegment seg, long index, double x) {
            wgpu_h_constants_0.WGPUColor$b$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle a$VH() {
            return wgpu_h_constants_0.WGPUColor$a$VH();
        }
        public static  double a$get(MemorySegment seg) {
            return (double)wgpu_h_constants_0.WGPUColor$a$VH().get(seg);
        }
        public static  double a$get(MemorySegment seg, long index) {
            return (double)wgpu_h_constants_0.WGPUColor$a$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void a$set( MemorySegment seg, double x) {
            wgpu_h_constants_0.WGPUColor$a$VH().set(seg, x);
        }
        public static void a$set(MemorySegment seg, long index, double x) {
            wgpu_h_constants_0.WGPUColor$a$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUCommandBufferDescriptor {

        /* package-private */ WGPUCommandBufferDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUCommandBufferDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUCommandBufferDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUCommandBufferDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUCommandBufferDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUCommandBufferDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUCommandBufferDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_0.WGPUCommandBufferDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUCommandBufferDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUCommandBufferDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUCommandBufferDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUCommandBufferDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUCommandEncoderDescriptor {

        /* package-private */ WGPUCommandEncoderDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUCommandEncoderDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUCommandEncoderDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUCommandEncoderDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUCommandEncoderDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUCommandEncoderDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUCommandEncoderDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_0.WGPUCommandEncoderDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUCommandEncoderDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUCommandEncoderDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUCommandEncoderDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUCommandEncoderDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUComputePassDescriptor {

        /* package-private */ WGPUComputePassDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUComputePassDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUComputePassDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUComputePassDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUComputePassDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUComputePassDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUComputePassDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_0.WGPUComputePassDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUComputePassDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUComputePassDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUComputePassDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUComputePassDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUDeviceDescriptor {

        /* package-private */ WGPUDeviceDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUDeviceDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUDeviceDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUDeviceDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUDeviceDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUDeviceDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUDeviceDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUExtent3D {

        /* package-private */ WGPUExtent3D() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUExtent3D$struct$LAYOUT();
        }
        public static VarHandle width$VH() {
            return wgpu_h_constants_0.WGPUExtent3D$width$VH();
        }
        public static  int width$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUExtent3D$width$VH().get(seg);
        }
        public static  int width$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUExtent3D$width$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void width$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUExtent3D$width$VH().set(seg, x);
        }
        public static void width$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUExtent3D$width$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle height$VH() {
            return wgpu_h_constants_0.WGPUExtent3D$height$VH();
        }
        public static  int height$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUExtent3D$height$VH().get(seg);
        }
        public static  int height$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUExtent3D$height$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void height$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUExtent3D$height$VH().set(seg, x);
        }
        public static void height$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUExtent3D$height$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle depth$VH() {
            return wgpu_h_constants_0.WGPUExtent3D$depth$VH();
        }
        public static  int depth$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUExtent3D$depth$VH().get(seg);
        }
        public static  int depth$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUExtent3D$depth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void depth$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUExtent3D$depth$VH().set(seg, x);
        }
        public static void depth$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUExtent3D$depth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUInstanceDescriptor {

        /* package-private */ WGPUInstanceDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUInstanceDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUInstanceDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUInstanceDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUInstanceDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUInstanceDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUInstanceDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUMultisampleState {

        /* package-private */ WGPUMultisampleState() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUMultisampleState$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUMultisampleState$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUMultisampleState$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUMultisampleState$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUMultisampleState$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUMultisampleState$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle count$VH() {
            return wgpu_h_constants_0.WGPUMultisampleState$count$VH();
        }
        public static  int count$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUMultisampleState$count$VH().get(seg);
        }
        public static  int count$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUMultisampleState$count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void count$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUMultisampleState$count$VH().set(seg, x);
        }
        public static void count$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUMultisampleState$count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mask$VH() {
            return wgpu_h_constants_0.WGPUMultisampleState$mask$VH();
        }
        public static  int mask$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUMultisampleState$mask$VH().get(seg);
        }
        public static  int mask$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUMultisampleState$mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mask$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUMultisampleState$mask$VH().set(seg, x);
        }
        public static void mask$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUMultisampleState$mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle alphaToCoverageEnabled$VH() {
            return wgpu_h_constants_0.WGPUMultisampleState$alphaToCoverageEnabled$VH();
        }
        public static  byte alphaToCoverageEnabled$get(MemorySegment seg) {
            return (byte)wgpu_h_constants_0.WGPUMultisampleState$alphaToCoverageEnabled$VH().get(seg);
        }
        public static  byte alphaToCoverageEnabled$get(MemorySegment seg, long index) {
            return (byte)wgpu_h_constants_0.WGPUMultisampleState$alphaToCoverageEnabled$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void alphaToCoverageEnabled$set( MemorySegment seg, byte x) {
            wgpu_h_constants_0.WGPUMultisampleState$alphaToCoverageEnabled$VH().set(seg, x);
        }
        public static void alphaToCoverageEnabled$set(MemorySegment seg, long index, byte x) {
            wgpu_h_constants_0.WGPUMultisampleState$alphaToCoverageEnabled$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUOrigin3D {

        /* package-private */ WGPUOrigin3D() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUOrigin3D$struct$LAYOUT();
        }
        public static VarHandle x$VH() {
            return wgpu_h_constants_0.WGPUOrigin3D$x$VH();
        }
        public static  int x$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUOrigin3D$x$VH().get(seg);
        }
        public static  int x$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUOrigin3D$x$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void x$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUOrigin3D$x$VH().set(seg, x);
        }
        public static void x$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUOrigin3D$x$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle y$VH() {
            return wgpu_h_constants_0.WGPUOrigin3D$y$VH();
        }
        public static  int y$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUOrigin3D$y$VH().get(seg);
        }
        public static  int y$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUOrigin3D$y$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void y$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUOrigin3D$y$VH().set(seg, x);
        }
        public static void y$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUOrigin3D$y$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle z$VH() {
            return wgpu_h_constants_0.WGPUOrigin3D$z$VH();
        }
        public static  int z$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUOrigin3D$z$VH().get(seg);
        }
        public static  int z$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUOrigin3D$z$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void z$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUOrigin3D$z$VH().set(seg, x);
        }
        public static void z$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUOrigin3D$z$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUPipelineLayoutDescriptor {

        /* package-private */ WGPUPipelineLayoutDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle bindGroupLayoutCount$VH() {
            return wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$bindGroupLayoutCount$VH();
        }
        public static  int bindGroupLayoutCount$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$bindGroupLayoutCount$VH().get(seg);
        }
        public static  int bindGroupLayoutCount$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$bindGroupLayoutCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void bindGroupLayoutCount$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$bindGroupLayoutCount$VH().set(seg, x);
        }
        public static void bindGroupLayoutCount$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$bindGroupLayoutCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle bindGroupLayouts$VH() {
            return wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$bindGroupLayouts$VH();
        }
        public static  MemoryAddress bindGroupLayouts$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$bindGroupLayouts$VH().get(seg);
        }
        public static  MemoryAddress bindGroupLayouts$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$bindGroupLayouts$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void bindGroupLayouts$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$bindGroupLayouts$VH().set(seg, x);
        }
        public static void bindGroupLayouts$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUPipelineLayoutDescriptor$bindGroupLayouts$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUPrimitiveState {

        /* package-private */ WGPUPrimitiveState() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUPrimitiveState$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUPrimitiveState$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUPrimitiveState$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUPrimitiveState$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUPrimitiveState$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUPrimitiveState$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle topology$VH() {
            return wgpu_h_constants_0.WGPUPrimitiveState$topology$VH();
        }
        public static  int topology$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUPrimitiveState$topology$VH().get(seg);
        }
        public static  int topology$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUPrimitiveState$topology$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void topology$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUPrimitiveState$topology$VH().set(seg, x);
        }
        public static void topology$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUPrimitiveState$topology$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle stripIndexFormat$VH() {
            return wgpu_h_constants_0.WGPUPrimitiveState$stripIndexFormat$VH();
        }
        public static  int stripIndexFormat$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUPrimitiveState$stripIndexFormat$VH().get(seg);
        }
        public static  int stripIndexFormat$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUPrimitiveState$stripIndexFormat$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void stripIndexFormat$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUPrimitiveState$stripIndexFormat$VH().set(seg, x);
        }
        public static void stripIndexFormat$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUPrimitiveState$stripIndexFormat$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle frontFace$VH() {
            return wgpu_h_constants_0.WGPUPrimitiveState$frontFace$VH();
        }
        public static  int frontFace$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUPrimitiveState$frontFace$VH().get(seg);
        }
        public static  int frontFace$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUPrimitiveState$frontFace$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void frontFace$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUPrimitiveState$frontFace$VH().set(seg, x);
        }
        public static void frontFace$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUPrimitiveState$frontFace$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle cullMode$VH() {
            return wgpu_h_constants_0.WGPUPrimitiveState$cullMode$VH();
        }
        public static  int cullMode$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUPrimitiveState$cullMode$VH().get(seg);
        }
        public static  int cullMode$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUPrimitiveState$cullMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cullMode$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUPrimitiveState$cullMode$VH().set(seg, x);
        }
        public static void cullMode$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUPrimitiveState$cullMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUProgrammableStageDescriptor {

        /* package-private */ WGPUProgrammableStageDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUProgrammableStageDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUProgrammableStageDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUProgrammableStageDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUProgrammableStageDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUProgrammableStageDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUProgrammableStageDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle module$VH() {
            return wgpu_h_constants_0.WGPUProgrammableStageDescriptor$module$VH();
        }
        public static  MemoryAddress module$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUProgrammableStageDescriptor$module$VH().get(seg);
        }
        public static  MemoryAddress module$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUProgrammableStageDescriptor$module$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void module$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUProgrammableStageDescriptor$module$VH().set(seg, x);
        }
        public static void module$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUProgrammableStageDescriptor$module$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle entryPoint$VH() {
            return wgpu_h_constants_0.WGPUProgrammableStageDescriptor$entryPoint$VH();
        }
        public static  MemoryAddress entryPoint$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUProgrammableStageDescriptor$entryPoint$VH().get(seg);
        }
        public static  MemoryAddress entryPoint$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUProgrammableStageDescriptor$entryPoint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void entryPoint$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUProgrammableStageDescriptor$entryPoint$VH().set(seg, x);
        }
        public static void entryPoint$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUProgrammableStageDescriptor$entryPoint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUQuerySetDescriptor {

        /* package-private */ WGPUQuerySetDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUQuerySetDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUQuerySetDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUQuerySetDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUQuerySetDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUQuerySetDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUQuerySetDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_0.WGPUQuerySetDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUQuerySetDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUQuerySetDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUQuerySetDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUQuerySetDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle type$VH() {
            return wgpu_h_constants_0.WGPUQuerySetDescriptor$type$VH();
        }
        public static  int type$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUQuerySetDescriptor$type$VH().get(seg);
        }
        public static  int type$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUQuerySetDescriptor$type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void type$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUQuerySetDescriptor$type$VH().set(seg, x);
        }
        public static void type$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUQuerySetDescriptor$type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle count$VH() {
            return wgpu_h_constants_0.WGPUQuerySetDescriptor$count$VH();
        }
        public static  int count$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUQuerySetDescriptor$count$VH().get(seg);
        }
        public static  int count$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUQuerySetDescriptor$count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void count$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUQuerySetDescriptor$count$VH().set(seg, x);
        }
        public static void count$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUQuerySetDescriptor$count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pipelineStatistics$VH() {
            return wgpu_h_constants_0.WGPUQuerySetDescriptor$pipelineStatistics$VH();
        }
        public static  MemoryAddress pipelineStatistics$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUQuerySetDescriptor$pipelineStatistics$VH().get(seg);
        }
        public static  MemoryAddress pipelineStatistics$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUQuerySetDescriptor$pipelineStatistics$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pipelineStatistics$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUQuerySetDescriptor$pipelineStatistics$VH().set(seg, x);
        }
        public static void pipelineStatistics$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUQuerySetDescriptor$pipelineStatistics$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pipelineStatisticsCount$VH() {
            return wgpu_h_constants_0.WGPUQuerySetDescriptor$pipelineStatisticsCount$VH();
        }
        public static  int pipelineStatisticsCount$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUQuerySetDescriptor$pipelineStatisticsCount$VH().get(seg);
        }
        public static  int pipelineStatisticsCount$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUQuerySetDescriptor$pipelineStatisticsCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pipelineStatisticsCount$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUQuerySetDescriptor$pipelineStatisticsCount$VH().set(seg, x);
        }
        public static void pipelineStatisticsCount$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUQuerySetDescriptor$pipelineStatisticsCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPURenderBundleDescriptor {

        /* package-private */ WGPURenderBundleDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPURenderBundleDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPURenderBundleDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPURenderBundleDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPURenderBundleDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPURenderBundleDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPURenderBundleDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_0.WGPURenderBundleDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPURenderBundleDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPURenderBundleDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPURenderBundleDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPURenderBundleDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPURenderBundleEncoderDescriptor {

        /* package-private */ WGPURenderBundleEncoderDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle colorFormatsCount$VH() {
            return wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$colorFormatsCount$VH();
        }
        public static  int colorFormatsCount$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$colorFormatsCount$VH().get(seg);
        }
        public static  int colorFormatsCount$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$colorFormatsCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void colorFormatsCount$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$colorFormatsCount$VH().set(seg, x);
        }
        public static void colorFormatsCount$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$colorFormatsCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle colorFormats$VH() {
            return wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$colorFormats$VH();
        }
        public static  MemoryAddress colorFormats$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$colorFormats$VH().get(seg);
        }
        public static  MemoryAddress colorFormats$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$colorFormats$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void colorFormats$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$colorFormats$VH().set(seg, x);
        }
        public static void colorFormats$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$colorFormats$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle depthStencilFormat$VH() {
            return wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$depthStencilFormat$VH();
        }
        public static  int depthStencilFormat$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$depthStencilFormat$VH().get(seg);
        }
        public static  int depthStencilFormat$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$depthStencilFormat$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void depthStencilFormat$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$depthStencilFormat$VH().set(seg, x);
        }
        public static void depthStencilFormat$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$depthStencilFormat$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sampleCount$VH() {
            return wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$sampleCount$VH();
        }
        public static  int sampleCount$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$sampleCount$VH().get(seg);
        }
        public static  int sampleCount$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$sampleCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sampleCount$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$sampleCount$VH().set(seg, x);
        }
        public static void sampleCount$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPURenderBundleEncoderDescriptor$sampleCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPURenderPassDepthStencilAttachmentDescriptor {

        /* package-private */ WGPURenderPassDepthStencilAttachmentDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$struct$LAYOUT();
        }
        public static VarHandle attachment$VH() {
            return wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$attachment$VH();
        }
        public static  MemoryAddress attachment$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$attachment$VH().get(seg);
        }
        public static  MemoryAddress attachment$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$attachment$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void attachment$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$attachment$VH().set(seg, x);
        }
        public static void attachment$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$attachment$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle depthLoadOp$VH() {
            return wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$depthLoadOp$VH();
        }
        public static  int depthLoadOp$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$depthLoadOp$VH().get(seg);
        }
        public static  int depthLoadOp$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$depthLoadOp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void depthLoadOp$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$depthLoadOp$VH().set(seg, x);
        }
        public static void depthLoadOp$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$depthLoadOp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle depthStoreOp$VH() {
            return wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$depthStoreOp$VH();
        }
        public static  int depthStoreOp$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$depthStoreOp$VH().get(seg);
        }
        public static  int depthStoreOp$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$depthStoreOp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void depthStoreOp$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$depthStoreOp$VH().set(seg, x);
        }
        public static void depthStoreOp$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$depthStoreOp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle clearDepth$VH() {
            return wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$clearDepth$VH();
        }
        public static  float clearDepth$get(MemorySegment seg) {
            return (float)wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$clearDepth$VH().get(seg);
        }
        public static  float clearDepth$get(MemorySegment seg, long index) {
            return (float)wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$clearDepth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void clearDepth$set( MemorySegment seg, float x) {
            wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$clearDepth$VH().set(seg, x);
        }
        public static void clearDepth$set(MemorySegment seg, long index, float x) {
            wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$clearDepth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle depthReadOnly$VH() {
            return wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$depthReadOnly$VH();
        }
        public static  byte depthReadOnly$get(MemorySegment seg) {
            return (byte)wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$depthReadOnly$VH().get(seg);
        }
        public static  byte depthReadOnly$get(MemorySegment seg, long index) {
            return (byte)wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$depthReadOnly$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void depthReadOnly$set( MemorySegment seg, byte x) {
            wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$depthReadOnly$VH().set(seg, x);
        }
        public static void depthReadOnly$set(MemorySegment seg, long index, byte x) {
            wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$depthReadOnly$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle stencilLoadOp$VH() {
            return wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$stencilLoadOp$VH();
        }
        public static  int stencilLoadOp$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$stencilLoadOp$VH().get(seg);
        }
        public static  int stencilLoadOp$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$stencilLoadOp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void stencilLoadOp$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$stencilLoadOp$VH().set(seg, x);
        }
        public static void stencilLoadOp$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$stencilLoadOp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle stencilStoreOp$VH() {
            return wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$stencilStoreOp$VH();
        }
        public static  int stencilStoreOp$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$stencilStoreOp$VH().get(seg);
        }
        public static  int stencilStoreOp$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$stencilStoreOp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void stencilStoreOp$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$stencilStoreOp$VH().set(seg, x);
        }
        public static void stencilStoreOp$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$stencilStoreOp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle clearStencil$VH() {
            return wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$clearStencil$VH();
        }
        public static  int clearStencil$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$clearStencil$VH().get(seg);
        }
        public static  int clearStencil$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$clearStencil$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void clearStencil$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$clearStencil$VH().set(seg, x);
        }
        public static void clearStencil$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$clearStencil$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle stencilReadOnly$VH() {
            return wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$stencilReadOnly$VH();
        }
        public static  byte stencilReadOnly$get(MemorySegment seg) {
            return (byte)wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$stencilReadOnly$VH().get(seg);
        }
        public static  byte stencilReadOnly$get(MemorySegment seg, long index) {
            return (byte)wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$stencilReadOnly$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void stencilReadOnly$set( MemorySegment seg, byte x) {
            wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$stencilReadOnly$VH().set(seg, x);
        }
        public static void stencilReadOnly$set(MemorySegment seg, long index, byte x) {
            wgpu_h_constants_0.WGPURenderPassDepthStencilAttachmentDescriptor$stencilReadOnly$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPURequestAdapterOptions {

        /* package-private */ WGPURequestAdapterOptions() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPURequestAdapterOptions$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPURequestAdapterOptions$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPURequestAdapterOptions$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPURequestAdapterOptions$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPURequestAdapterOptions$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPURequestAdapterOptions$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle compatibleSurface$VH() {
            return wgpu_h_constants_0.WGPURequestAdapterOptions$compatibleSurface$VH();
        }
        public static  MemoryAddress compatibleSurface$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPURequestAdapterOptions$compatibleSurface$VH().get(seg);
        }
        public static  MemoryAddress compatibleSurface$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPURequestAdapterOptions$compatibleSurface$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void compatibleSurface$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPURequestAdapterOptions$compatibleSurface$VH().set(seg, x);
        }
        public static void compatibleSurface$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPURequestAdapterOptions$compatibleSurface$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUSamplerBindingLayout {

        /* package-private */ WGPUSamplerBindingLayout() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUSamplerBindingLayout$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUSamplerBindingLayout$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSamplerBindingLayout$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSamplerBindingLayout$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSamplerBindingLayout$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSamplerBindingLayout$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle type$VH() {
            return wgpu_h_constants_0.WGPUSamplerBindingLayout$type$VH();
        }
        public static  int type$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUSamplerBindingLayout$type$VH().get(seg);
        }
        public static  int type$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUSamplerBindingLayout$type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void type$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUSamplerBindingLayout$type$VH().set(seg, x);
        }
        public static void type$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUSamplerBindingLayout$type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUSamplerDescriptor {

        /* package-private */ WGPUSamplerDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUSamplerDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUSamplerDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSamplerDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSamplerDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_0.WGPUSamplerDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSamplerDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSamplerDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle addressModeU$VH() {
            return wgpu_h_constants_0.WGPUSamplerDescriptor$addressModeU$VH();
        }
        public static  int addressModeU$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUSamplerDescriptor$addressModeU$VH().get(seg);
        }
        public static  int addressModeU$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUSamplerDescriptor$addressModeU$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void addressModeU$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$addressModeU$VH().set(seg, x);
        }
        public static void addressModeU$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$addressModeU$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle addressModeV$VH() {
            return wgpu_h_constants_0.WGPUSamplerDescriptor$addressModeV$VH();
        }
        public static  int addressModeV$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUSamplerDescriptor$addressModeV$VH().get(seg);
        }
        public static  int addressModeV$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUSamplerDescriptor$addressModeV$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void addressModeV$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$addressModeV$VH().set(seg, x);
        }
        public static void addressModeV$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$addressModeV$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle addressModeW$VH() {
            return wgpu_h_constants_0.WGPUSamplerDescriptor$addressModeW$VH();
        }
        public static  int addressModeW$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUSamplerDescriptor$addressModeW$VH().get(seg);
        }
        public static  int addressModeW$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUSamplerDescriptor$addressModeW$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void addressModeW$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$addressModeW$VH().set(seg, x);
        }
        public static void addressModeW$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$addressModeW$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle magFilter$VH() {
            return wgpu_h_constants_0.WGPUSamplerDescriptor$magFilter$VH();
        }
        public static  int magFilter$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUSamplerDescriptor$magFilter$VH().get(seg);
        }
        public static  int magFilter$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUSamplerDescriptor$magFilter$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void magFilter$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$magFilter$VH().set(seg, x);
        }
        public static void magFilter$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$magFilter$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle minFilter$VH() {
            return wgpu_h_constants_0.WGPUSamplerDescriptor$minFilter$VH();
        }
        public static  int minFilter$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUSamplerDescriptor$minFilter$VH().get(seg);
        }
        public static  int minFilter$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUSamplerDescriptor$minFilter$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void minFilter$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$minFilter$VH().set(seg, x);
        }
        public static void minFilter$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$minFilter$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mipmapFilter$VH() {
            return wgpu_h_constants_0.WGPUSamplerDescriptor$mipmapFilter$VH();
        }
        public static  int mipmapFilter$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUSamplerDescriptor$mipmapFilter$VH().get(seg);
        }
        public static  int mipmapFilter$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUSamplerDescriptor$mipmapFilter$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mipmapFilter$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$mipmapFilter$VH().set(seg, x);
        }
        public static void mipmapFilter$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$mipmapFilter$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lodMinClamp$VH() {
            return wgpu_h_constants_0.WGPUSamplerDescriptor$lodMinClamp$VH();
        }
        public static  float lodMinClamp$get(MemorySegment seg) {
            return (float)wgpu_h_constants_0.WGPUSamplerDescriptor$lodMinClamp$VH().get(seg);
        }
        public static  float lodMinClamp$get(MemorySegment seg, long index) {
            return (float)wgpu_h_constants_0.WGPUSamplerDescriptor$lodMinClamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lodMinClamp$set( MemorySegment seg, float x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$lodMinClamp$VH().set(seg, x);
        }
        public static void lodMinClamp$set(MemorySegment seg, long index, float x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$lodMinClamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lodMaxClamp$VH() {
            return wgpu_h_constants_0.WGPUSamplerDescriptor$lodMaxClamp$VH();
        }
        public static  float lodMaxClamp$get(MemorySegment seg) {
            return (float)wgpu_h_constants_0.WGPUSamplerDescriptor$lodMaxClamp$VH().get(seg);
        }
        public static  float lodMaxClamp$get(MemorySegment seg, long index) {
            return (float)wgpu_h_constants_0.WGPUSamplerDescriptor$lodMaxClamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lodMaxClamp$set( MemorySegment seg, float x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$lodMaxClamp$VH().set(seg, x);
        }
        public static void lodMaxClamp$set(MemorySegment seg, long index, float x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$lodMaxClamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle compare$VH() {
            return wgpu_h_constants_0.WGPUSamplerDescriptor$compare$VH();
        }
        public static  int compare$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUSamplerDescriptor$compare$VH().get(seg);
        }
        public static  int compare$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUSamplerDescriptor$compare$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void compare$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$compare$VH().set(seg, x);
        }
        public static void compare$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$compare$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle maxAnisotropy$VH() {
            return wgpu_h_constants_0.WGPUSamplerDescriptor$maxAnisotropy$VH();
        }
        public static  short maxAnisotropy$get(MemorySegment seg) {
            return (short)wgpu_h_constants_0.WGPUSamplerDescriptor$maxAnisotropy$VH().get(seg);
        }
        public static  short maxAnisotropy$get(MemorySegment seg, long index) {
            return (short)wgpu_h_constants_0.WGPUSamplerDescriptor$maxAnisotropy$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void maxAnisotropy$set( MemorySegment seg, short x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$maxAnisotropy$VH().set(seg, x);
        }
        public static void maxAnisotropy$set(MemorySegment seg, long index, short x) {
            wgpu_h_constants_0.WGPUSamplerDescriptor$maxAnisotropy$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUShaderModuleDescriptor {

        /* package-private */ WGPUShaderModuleDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUShaderModuleDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUShaderModuleDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUShaderModuleDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUShaderModuleDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUShaderModuleDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUShaderModuleDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_0.WGPUShaderModuleDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUShaderModuleDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUShaderModuleDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUShaderModuleDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUShaderModuleDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUShaderModuleSPIRVDescriptor {

        /* package-private */ WGPUShaderModuleSPIRVDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUShaderModuleSPIRVDescriptor$struct$LAYOUT();
        }
        public static MemorySegment chain$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static VarHandle codeSize$VH() {
            return wgpu_h_constants_0.WGPUShaderModuleSPIRVDescriptor$codeSize$VH();
        }
        public static  int codeSize$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUShaderModuleSPIRVDescriptor$codeSize$VH().get(seg);
        }
        public static  int codeSize$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUShaderModuleSPIRVDescriptor$codeSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void codeSize$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUShaderModuleSPIRVDescriptor$codeSize$VH().set(seg, x);
        }
        public static void codeSize$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUShaderModuleSPIRVDescriptor$codeSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle code$VH() {
            return wgpu_h_constants_0.WGPUShaderModuleSPIRVDescriptor$code$VH();
        }
        public static  MemoryAddress code$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUShaderModuleSPIRVDescriptor$code$VH().get(seg);
        }
        public static  MemoryAddress code$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUShaderModuleSPIRVDescriptor$code$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void code$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUShaderModuleSPIRVDescriptor$code$VH().set(seg, x);
        }
        public static void code$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUShaderModuleSPIRVDescriptor$code$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUShaderModuleWGSLDescriptor {

        /* package-private */ WGPUShaderModuleWGSLDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUShaderModuleWGSLDescriptor$struct$LAYOUT();
        }
        public static MemorySegment chain$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static VarHandle source$VH() {
            return wgpu_h_constants_0.WGPUShaderModuleWGSLDescriptor$source$VH();
        }
        public static  MemoryAddress source$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUShaderModuleWGSLDescriptor$source$VH().get(seg);
        }
        public static  MemoryAddress source$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUShaderModuleWGSLDescriptor$source$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void source$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUShaderModuleWGSLDescriptor$source$VH().set(seg, x);
        }
        public static void source$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUShaderModuleWGSLDescriptor$source$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUStencilFaceState {

        /* package-private */ WGPUStencilFaceState() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUStencilFaceState$struct$LAYOUT();
        }
        public static VarHandle compare$VH() {
            return wgpu_h_constants_0.WGPUStencilFaceState$compare$VH();
        }
        public static  int compare$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUStencilFaceState$compare$VH().get(seg);
        }
        public static  int compare$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUStencilFaceState$compare$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void compare$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUStencilFaceState$compare$VH().set(seg, x);
        }
        public static void compare$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUStencilFaceState$compare$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle failOp$VH() {
            return wgpu_h_constants_0.WGPUStencilFaceState$failOp$VH();
        }
        public static  int failOp$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUStencilFaceState$failOp$VH().get(seg);
        }
        public static  int failOp$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUStencilFaceState$failOp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void failOp$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUStencilFaceState$failOp$VH().set(seg, x);
        }
        public static void failOp$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUStencilFaceState$failOp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle depthFailOp$VH() {
            return wgpu_h_constants_0.WGPUStencilFaceState$depthFailOp$VH();
        }
        public static  int depthFailOp$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUStencilFaceState$depthFailOp$VH().get(seg);
        }
        public static  int depthFailOp$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUStencilFaceState$depthFailOp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void depthFailOp$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUStencilFaceState$depthFailOp$VH().set(seg, x);
        }
        public static void depthFailOp$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUStencilFaceState$depthFailOp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle passOp$VH() {
            return wgpu_h_constants_0.WGPUStencilFaceState$passOp$VH();
        }
        public static  int passOp$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUStencilFaceState$passOp$VH().get(seg);
        }
        public static  int passOp$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUStencilFaceState$passOp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void passOp$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUStencilFaceState$passOp$VH().set(seg, x);
        }
        public static void passOp$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUStencilFaceState$passOp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUStorageTextureBindingLayout {

        /* package-private */ WGPUStorageTextureBindingLayout() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUStorageTextureBindingLayout$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUStorageTextureBindingLayout$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUStorageTextureBindingLayout$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUStorageTextureBindingLayout$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUStorageTextureBindingLayout$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUStorageTextureBindingLayout$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle access$VH() {
            return wgpu_h_constants_0.WGPUStorageTextureBindingLayout$access$VH();
        }
        public static  int access$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUStorageTextureBindingLayout$access$VH().get(seg);
        }
        public static  int access$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUStorageTextureBindingLayout$access$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void access$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUStorageTextureBindingLayout$access$VH().set(seg, x);
        }
        public static void access$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUStorageTextureBindingLayout$access$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle format$VH() {
            return wgpu_h_constants_0.WGPUStorageTextureBindingLayout$format$VH();
        }
        public static  int format$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUStorageTextureBindingLayout$format$VH().get(seg);
        }
        public static  int format$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUStorageTextureBindingLayout$format$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void format$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUStorageTextureBindingLayout$format$VH().set(seg, x);
        }
        public static void format$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUStorageTextureBindingLayout$format$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle viewDimension$VH() {
            return wgpu_h_constants_0.WGPUStorageTextureBindingLayout$viewDimension$VH();
        }
        public static  int viewDimension$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUStorageTextureBindingLayout$viewDimension$VH().get(seg);
        }
        public static  int viewDimension$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUStorageTextureBindingLayout$viewDimension$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void viewDimension$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUStorageTextureBindingLayout$viewDimension$VH().set(seg, x);
        }
        public static void viewDimension$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUStorageTextureBindingLayout$viewDimension$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUSurfaceDescriptor {

        /* package-private */ WGPUSurfaceDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUSurfaceDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUSurfaceDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSurfaceDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSurfaceDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSurfaceDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSurfaceDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_0.WGPUSurfaceDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSurfaceDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSurfaceDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSurfaceDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSurfaceDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUSurfaceDescriptorFromCanvasHTMLSelector {

        /* package-private */ WGPUSurfaceDescriptorFromCanvasHTMLSelector() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUSurfaceDescriptorFromCanvasHTMLSelector$struct$LAYOUT();
        }
        public static MemorySegment chain$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static VarHandle selector$VH() {
            return wgpu_h_constants_0.WGPUSurfaceDescriptorFromCanvasHTMLSelector$selector$VH();
        }
        public static  MemoryAddress selector$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSurfaceDescriptorFromCanvasHTMLSelector$selector$VH().get(seg);
        }
        public static  MemoryAddress selector$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSurfaceDescriptorFromCanvasHTMLSelector$selector$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void selector$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSurfaceDescriptorFromCanvasHTMLSelector$selector$VH().set(seg, x);
        }
        public static void selector$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSurfaceDescriptorFromCanvasHTMLSelector$selector$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUSurfaceDescriptorFromMetalLayer {

        /* package-private */ WGPUSurfaceDescriptorFromMetalLayer() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUSurfaceDescriptorFromMetalLayer$struct$LAYOUT();
        }
        public static MemorySegment chain$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static VarHandle layer$VH() {
            return wgpu_h_constants_0.WGPUSurfaceDescriptorFromMetalLayer$layer$VH();
        }
        public static  MemoryAddress layer$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSurfaceDescriptorFromMetalLayer$layer$VH().get(seg);
        }
        public static  MemoryAddress layer$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSurfaceDescriptorFromMetalLayer$layer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void layer$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSurfaceDescriptorFromMetalLayer$layer$VH().set(seg, x);
        }
        public static void layer$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSurfaceDescriptorFromMetalLayer$layer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUSurfaceDescriptorFromWindowsHWND {

        /* package-private */ WGPUSurfaceDescriptorFromWindowsHWND() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUSurfaceDescriptorFromWindowsHWND$struct$LAYOUT();
        }
        public static MemorySegment chain$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static VarHandle hinstance$VH() {
            return wgpu_h_constants_0.WGPUSurfaceDescriptorFromWindowsHWND$hinstance$VH();
        }
        public static  MemoryAddress hinstance$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSurfaceDescriptorFromWindowsHWND$hinstance$VH().get(seg);
        }
        public static  MemoryAddress hinstance$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSurfaceDescriptorFromWindowsHWND$hinstance$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void hinstance$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSurfaceDescriptorFromWindowsHWND$hinstance$VH().set(seg, x);
        }
        public static void hinstance$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSurfaceDescriptorFromWindowsHWND$hinstance$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle hwnd$VH() {
            return wgpu_h_constants_0.WGPUSurfaceDescriptorFromWindowsHWND$hwnd$VH();
        }
        public static  MemoryAddress hwnd$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSurfaceDescriptorFromWindowsHWND$hwnd$VH().get(seg);
        }
        public static  MemoryAddress hwnd$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSurfaceDescriptorFromWindowsHWND$hwnd$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void hwnd$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSurfaceDescriptorFromWindowsHWND$hwnd$VH().set(seg, x);
        }
        public static void hwnd$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSurfaceDescriptorFromWindowsHWND$hwnd$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUSurfaceDescriptorFromXlib {

        /* package-private */ WGPUSurfaceDescriptorFromXlib() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUSurfaceDescriptorFromXlib$struct$LAYOUT();
        }
        public static MemorySegment chain$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static VarHandle display$VH() {
            return wgpu_h_constants_0.WGPUSurfaceDescriptorFromXlib$display$VH();
        }
        public static  MemoryAddress display$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSurfaceDescriptorFromXlib$display$VH().get(seg);
        }
        public static  MemoryAddress display$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSurfaceDescriptorFromXlib$display$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void display$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSurfaceDescriptorFromXlib$display$VH().set(seg, x);
        }
        public static void display$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSurfaceDescriptorFromXlib$display$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle window$VH() {
            return wgpu_h_constants_0.WGPUSurfaceDescriptorFromXlib$window$VH();
        }
        public static  int window$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUSurfaceDescriptorFromXlib$window$VH().get(seg);
        }
        public static  int window$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUSurfaceDescriptorFromXlib$window$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void window$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUSurfaceDescriptorFromXlib$window$VH().set(seg, x);
        }
        public static void window$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUSurfaceDescriptorFromXlib$window$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUSwapChainDescriptor {

        /* package-private */ WGPUSwapChainDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_0.WGPUSwapChainDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_0.WGPUSwapChainDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSwapChainDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSwapChainDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSwapChainDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSwapChainDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_0.WGPUSwapChainDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSwapChainDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_0.WGPUSwapChainDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSwapChainDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_0.WGPUSwapChainDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle usage$VH() {
            return wgpu_h_constants_0.WGPUSwapChainDescriptor$usage$VH();
        }
        public static  int usage$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUSwapChainDescriptor$usage$VH().get(seg);
        }
        public static  int usage$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUSwapChainDescriptor$usage$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void usage$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUSwapChainDescriptor$usage$VH().set(seg, x);
        }
        public static void usage$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUSwapChainDescriptor$usage$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle format$VH() {
            return wgpu_h_constants_0.WGPUSwapChainDescriptor$format$VH();
        }
        public static  int format$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUSwapChainDescriptor$format$VH().get(seg);
        }
        public static  int format$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUSwapChainDescriptor$format$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void format$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUSwapChainDescriptor$format$VH().set(seg, x);
        }
        public static void format$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUSwapChainDescriptor$format$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle width$VH() {
            return wgpu_h_constants_0.WGPUSwapChainDescriptor$width$VH();
        }
        public static  int width$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUSwapChainDescriptor$width$VH().get(seg);
        }
        public static  int width$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUSwapChainDescriptor$width$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void width$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUSwapChainDescriptor$width$VH().set(seg, x);
        }
        public static void width$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUSwapChainDescriptor$width$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle height$VH() {
            return wgpu_h_constants_0.WGPUSwapChainDescriptor$height$VH();
        }
        public static  int height$get(MemorySegment seg) {
            return (int)wgpu_h_constants_0.WGPUSwapChainDescriptor$height$VH().get(seg);
        }
        public static  int height$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_0.WGPUSwapChainDescriptor$height$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void height$set( MemorySegment seg, int x) {
            wgpu_h_constants_0.WGPUSwapChainDescriptor$height$VH().set(seg, x);
        }
        public static void height$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_0.WGPUSwapChainDescriptor$height$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle presentMode$VH() {
            return wgpu_h_constants_1.WGPUSwapChainDescriptor$presentMode$VH();
        }
        public static  int presentMode$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUSwapChainDescriptor$presentMode$VH().get(seg);
        }
        public static  int presentMode$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUSwapChainDescriptor$presentMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void presentMode$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUSwapChainDescriptor$presentMode$VH().set(seg, x);
        }
        public static void presentMode$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUSwapChainDescriptor$presentMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUTextureBindingLayout {

        /* package-private */ WGPUTextureBindingLayout() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPUTextureBindingLayout$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_1.WGPUTextureBindingLayout$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUTextureBindingLayout$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUTextureBindingLayout$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUTextureBindingLayout$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUTextureBindingLayout$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sampleType$VH() {
            return wgpu_h_constants_1.WGPUTextureBindingLayout$sampleType$VH();
        }
        public static  int sampleType$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUTextureBindingLayout$sampleType$VH().get(seg);
        }
        public static  int sampleType$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUTextureBindingLayout$sampleType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sampleType$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUTextureBindingLayout$sampleType$VH().set(seg, x);
        }
        public static void sampleType$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUTextureBindingLayout$sampleType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle viewDimension$VH() {
            return wgpu_h_constants_1.WGPUTextureBindingLayout$viewDimension$VH();
        }
        public static  int viewDimension$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUTextureBindingLayout$viewDimension$VH().get(seg);
        }
        public static  int viewDimension$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUTextureBindingLayout$viewDimension$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void viewDimension$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUTextureBindingLayout$viewDimension$VH().set(seg, x);
        }
        public static void viewDimension$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUTextureBindingLayout$viewDimension$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle multisampled$VH() {
            return wgpu_h_constants_1.WGPUTextureBindingLayout$multisampled$VH();
        }
        public static  byte multisampled$get(MemorySegment seg) {
            return (byte)wgpu_h_constants_1.WGPUTextureBindingLayout$multisampled$VH().get(seg);
        }
        public static  byte multisampled$get(MemorySegment seg, long index) {
            return (byte)wgpu_h_constants_1.WGPUTextureBindingLayout$multisampled$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void multisampled$set( MemorySegment seg, byte x) {
            wgpu_h_constants_1.WGPUTextureBindingLayout$multisampled$VH().set(seg, x);
        }
        public static void multisampled$set(MemorySegment seg, long index, byte x) {
            wgpu_h_constants_1.WGPUTextureBindingLayout$multisampled$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUTextureDataLayout {

        /* package-private */ WGPUTextureDataLayout() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPUTextureDataLayout$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_1.WGPUTextureDataLayout$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUTextureDataLayout$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUTextureDataLayout$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUTextureDataLayout$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUTextureDataLayout$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle offset$VH() {
            return wgpu_h_constants_1.WGPUTextureDataLayout$offset$VH();
        }
        public static  long offset$get(MemorySegment seg) {
            return (long)wgpu_h_constants_1.WGPUTextureDataLayout$offset$VH().get(seg);
        }
        public static  long offset$get(MemorySegment seg, long index) {
            return (long)wgpu_h_constants_1.WGPUTextureDataLayout$offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void offset$set( MemorySegment seg, long x) {
            wgpu_h_constants_1.WGPUTextureDataLayout$offset$VH().set(seg, x);
        }
        public static void offset$set(MemorySegment seg, long index, long x) {
            wgpu_h_constants_1.WGPUTextureDataLayout$offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle bytesPerRow$VH() {
            return wgpu_h_constants_1.WGPUTextureDataLayout$bytesPerRow$VH();
        }
        public static  int bytesPerRow$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUTextureDataLayout$bytesPerRow$VH().get(seg);
        }
        public static  int bytesPerRow$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUTextureDataLayout$bytesPerRow$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void bytesPerRow$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUTextureDataLayout$bytesPerRow$VH().set(seg, x);
        }
        public static void bytesPerRow$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUTextureDataLayout$bytesPerRow$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle rowsPerImage$VH() {
            return wgpu_h_constants_1.WGPUTextureDataLayout$rowsPerImage$VH();
        }
        public static  int rowsPerImage$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUTextureDataLayout$rowsPerImage$VH().get(seg);
        }
        public static  int rowsPerImage$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUTextureDataLayout$rowsPerImage$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void rowsPerImage$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUTextureDataLayout$rowsPerImage$VH().set(seg, x);
        }
        public static void rowsPerImage$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUTextureDataLayout$rowsPerImage$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUTextureViewDescriptor {

        /* package-private */ WGPUTextureViewDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPUTextureViewDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_1.WGPUTextureViewDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUTextureViewDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUTextureViewDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUTextureViewDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUTextureViewDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_1.WGPUTextureViewDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUTextureViewDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUTextureViewDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUTextureViewDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUTextureViewDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle format$VH() {
            return wgpu_h_constants_1.WGPUTextureViewDescriptor$format$VH();
        }
        public static  int format$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUTextureViewDescriptor$format$VH().get(seg);
        }
        public static  int format$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUTextureViewDescriptor$format$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void format$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUTextureViewDescriptor$format$VH().set(seg, x);
        }
        public static void format$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUTextureViewDescriptor$format$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dimension$VH() {
            return wgpu_h_constants_1.WGPUTextureViewDescriptor$dimension$VH();
        }
        public static  int dimension$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUTextureViewDescriptor$dimension$VH().get(seg);
        }
        public static  int dimension$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUTextureViewDescriptor$dimension$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dimension$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUTextureViewDescriptor$dimension$VH().set(seg, x);
        }
        public static void dimension$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUTextureViewDescriptor$dimension$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle baseMipLevel$VH() {
            return wgpu_h_constants_1.WGPUTextureViewDescriptor$baseMipLevel$VH();
        }
        public static  int baseMipLevel$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUTextureViewDescriptor$baseMipLevel$VH().get(seg);
        }
        public static  int baseMipLevel$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUTextureViewDescriptor$baseMipLevel$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void baseMipLevel$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUTextureViewDescriptor$baseMipLevel$VH().set(seg, x);
        }
        public static void baseMipLevel$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUTextureViewDescriptor$baseMipLevel$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mipLevelCount$VH() {
            return wgpu_h_constants_1.WGPUTextureViewDescriptor$mipLevelCount$VH();
        }
        public static  int mipLevelCount$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUTextureViewDescriptor$mipLevelCount$VH().get(seg);
        }
        public static  int mipLevelCount$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUTextureViewDescriptor$mipLevelCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mipLevelCount$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUTextureViewDescriptor$mipLevelCount$VH().set(seg, x);
        }
        public static void mipLevelCount$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUTextureViewDescriptor$mipLevelCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle baseArrayLayer$VH() {
            return wgpu_h_constants_1.WGPUTextureViewDescriptor$baseArrayLayer$VH();
        }
        public static  int baseArrayLayer$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUTextureViewDescriptor$baseArrayLayer$VH().get(seg);
        }
        public static  int baseArrayLayer$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUTextureViewDescriptor$baseArrayLayer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void baseArrayLayer$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUTextureViewDescriptor$baseArrayLayer$VH().set(seg, x);
        }
        public static void baseArrayLayer$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUTextureViewDescriptor$baseArrayLayer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle arrayLayerCount$VH() {
            return wgpu_h_constants_1.WGPUTextureViewDescriptor$arrayLayerCount$VH();
        }
        public static  int arrayLayerCount$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUTextureViewDescriptor$arrayLayerCount$VH().get(seg);
        }
        public static  int arrayLayerCount$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUTextureViewDescriptor$arrayLayerCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void arrayLayerCount$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUTextureViewDescriptor$arrayLayerCount$VH().set(seg, x);
        }
        public static void arrayLayerCount$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUTextureViewDescriptor$arrayLayerCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle aspect$VH() {
            return wgpu_h_constants_1.WGPUTextureViewDescriptor$aspect$VH();
        }
        public static  int aspect$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUTextureViewDescriptor$aspect$VH().get(seg);
        }
        public static  int aspect$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUTextureViewDescriptor$aspect$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void aspect$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUTextureViewDescriptor$aspect$VH().set(seg, x);
        }
        public static void aspect$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUTextureViewDescriptor$aspect$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUVertexAttribute {

        /* package-private */ WGPUVertexAttribute() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPUVertexAttribute$struct$LAYOUT();
        }
        public static VarHandle format$VH() {
            return wgpu_h_constants_1.WGPUVertexAttribute$format$VH();
        }
        public static  int format$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUVertexAttribute$format$VH().get(seg);
        }
        public static  int format$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUVertexAttribute$format$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void format$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUVertexAttribute$format$VH().set(seg, x);
        }
        public static void format$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUVertexAttribute$format$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle offset$VH() {
            return wgpu_h_constants_1.WGPUVertexAttribute$offset$VH();
        }
        public static  long offset$get(MemorySegment seg) {
            return (long)wgpu_h_constants_1.WGPUVertexAttribute$offset$VH().get(seg);
        }
        public static  long offset$get(MemorySegment seg, long index) {
            return (long)wgpu_h_constants_1.WGPUVertexAttribute$offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void offset$set( MemorySegment seg, long x) {
            wgpu_h_constants_1.WGPUVertexAttribute$offset$VH().set(seg, x);
        }
        public static void offset$set(MemorySegment seg, long index, long x) {
            wgpu_h_constants_1.WGPUVertexAttribute$offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle shaderLocation$VH() {
            return wgpu_h_constants_1.WGPUVertexAttribute$shaderLocation$VH();
        }
        public static  int shaderLocation$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUVertexAttribute$shaderLocation$VH().get(seg);
        }
        public static  int shaderLocation$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUVertexAttribute$shaderLocation$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void shaderLocation$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUVertexAttribute$shaderLocation$VH().set(seg, x);
        }
        public static void shaderLocation$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUVertexAttribute$shaderLocation$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUBindGroupDescriptor {

        /* package-private */ WGPUBindGroupDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPUBindGroupDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_1.WGPUBindGroupDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUBindGroupDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUBindGroupDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUBindGroupDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUBindGroupDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_1.WGPUBindGroupDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUBindGroupDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUBindGroupDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUBindGroupDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUBindGroupDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle layout$VH() {
            return wgpu_h_constants_1.WGPUBindGroupDescriptor$layout$VH();
        }
        public static  MemoryAddress layout$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUBindGroupDescriptor$layout$VH().get(seg);
        }
        public static  MemoryAddress layout$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUBindGroupDescriptor$layout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void layout$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUBindGroupDescriptor$layout$VH().set(seg, x);
        }
        public static void layout$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUBindGroupDescriptor$layout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle entryCount$VH() {
            return wgpu_h_constants_1.WGPUBindGroupDescriptor$entryCount$VH();
        }
        public static  int entryCount$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUBindGroupDescriptor$entryCount$VH().get(seg);
        }
        public static  int entryCount$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUBindGroupDescriptor$entryCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void entryCount$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUBindGroupDescriptor$entryCount$VH().set(seg, x);
        }
        public static void entryCount$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUBindGroupDescriptor$entryCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle entries$VH() {
            return wgpu_h_constants_1.WGPUBindGroupDescriptor$entries$VH();
        }
        public static  MemoryAddress entries$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUBindGroupDescriptor$entries$VH().get(seg);
        }
        public static  MemoryAddress entries$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUBindGroupDescriptor$entries$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void entries$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUBindGroupDescriptor$entries$VH().set(seg, x);
        }
        public static void entries$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUBindGroupDescriptor$entries$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUBindGroupLayoutEntry {

        /* package-private */ WGPUBindGroupLayoutEntry() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPUBindGroupLayoutEntry$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_1.WGPUBindGroupLayoutEntry$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUBindGroupLayoutEntry$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUBindGroupLayoutEntry$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUBindGroupLayoutEntry$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUBindGroupLayoutEntry$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle binding$VH() {
            return wgpu_h_constants_1.WGPUBindGroupLayoutEntry$binding$VH();
        }
        public static  int binding$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUBindGroupLayoutEntry$binding$VH().get(seg);
        }
        public static  int binding$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUBindGroupLayoutEntry$binding$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void binding$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUBindGroupLayoutEntry$binding$VH().set(seg, x);
        }
        public static void binding$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUBindGroupLayoutEntry$binding$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle visibility$VH() {
            return wgpu_h_constants_1.WGPUBindGroupLayoutEntry$visibility$VH();
        }
        public static  int visibility$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUBindGroupLayoutEntry$visibility$VH().get(seg);
        }
        public static  int visibility$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUBindGroupLayoutEntry$visibility$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void visibility$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUBindGroupLayoutEntry$visibility$VH().set(seg, x);
        }
        public static void visibility$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUBindGroupLayoutEntry$visibility$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment buffer$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 24));
        }
        public static MemorySegment sampler$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 16));
        }
        public static MemorySegment texture$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(56, 24));
        }
        public static MemorySegment storageTexture$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(80, 24));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUBlendState {

        /* package-private */ WGPUBlendState() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPUBlendState$struct$LAYOUT();
        }
        public static MemorySegment color$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 12));
        }
        public static MemorySegment alpha$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 12));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUComputePipelineDescriptor {

        /* package-private */ WGPUComputePipelineDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPUComputePipelineDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_1.WGPUComputePipelineDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUComputePipelineDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUComputePipelineDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUComputePipelineDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUComputePipelineDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_1.WGPUComputePipelineDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUComputePipelineDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUComputePipelineDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUComputePipelineDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUComputePipelineDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle layout$VH() {
            return wgpu_h_constants_1.WGPUComputePipelineDescriptor$layout$VH();
        }
        public static  MemoryAddress layout$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUComputePipelineDescriptor$layout$VH().get(seg);
        }
        public static  MemoryAddress layout$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUComputePipelineDescriptor$layout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void layout$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUComputePipelineDescriptor$layout$VH().set(seg, x);
        }
        public static void layout$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUComputePipelineDescriptor$layout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment computeStage$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 24));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUDepthStencilState {

        /* package-private */ WGPUDepthStencilState() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPUDepthStencilState$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_1.WGPUDepthStencilState$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUDepthStencilState$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUDepthStencilState$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUDepthStencilState$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUDepthStencilState$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle format$VH() {
            return wgpu_h_constants_1.WGPUDepthStencilState$format$VH();
        }
        public static  int format$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUDepthStencilState$format$VH().get(seg);
        }
        public static  int format$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUDepthStencilState$format$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void format$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUDepthStencilState$format$VH().set(seg, x);
        }
        public static void format$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUDepthStencilState$format$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle depthWriteEnabled$VH() {
            return wgpu_h_constants_1.WGPUDepthStencilState$depthWriteEnabled$VH();
        }
        public static  byte depthWriteEnabled$get(MemorySegment seg) {
            return (byte)wgpu_h_constants_1.WGPUDepthStencilState$depthWriteEnabled$VH().get(seg);
        }
        public static  byte depthWriteEnabled$get(MemorySegment seg, long index) {
            return (byte)wgpu_h_constants_1.WGPUDepthStencilState$depthWriteEnabled$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void depthWriteEnabled$set( MemorySegment seg, byte x) {
            wgpu_h_constants_1.WGPUDepthStencilState$depthWriteEnabled$VH().set(seg, x);
        }
        public static void depthWriteEnabled$set(MemorySegment seg, long index, byte x) {
            wgpu_h_constants_1.WGPUDepthStencilState$depthWriteEnabled$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle depthCompare$VH() {
            return wgpu_h_constants_1.WGPUDepthStencilState$depthCompare$VH();
        }
        public static  int depthCompare$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUDepthStencilState$depthCompare$VH().get(seg);
        }
        public static  int depthCompare$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUDepthStencilState$depthCompare$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void depthCompare$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUDepthStencilState$depthCompare$VH().set(seg, x);
        }
        public static void depthCompare$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUDepthStencilState$depthCompare$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment stencilFront$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(20, 16));
        }
        public static MemorySegment stencilBack$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(36, 16));
        }
        public static VarHandle stencilReadMask$VH() {
            return wgpu_h_constants_1.WGPUDepthStencilState$stencilReadMask$VH();
        }
        public static  int stencilReadMask$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUDepthStencilState$stencilReadMask$VH().get(seg);
        }
        public static  int stencilReadMask$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUDepthStencilState$stencilReadMask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void stencilReadMask$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUDepthStencilState$stencilReadMask$VH().set(seg, x);
        }
        public static void stencilReadMask$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUDepthStencilState$stencilReadMask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle stencilWriteMask$VH() {
            return wgpu_h_constants_1.WGPUDepthStencilState$stencilWriteMask$VH();
        }
        public static  int stencilWriteMask$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUDepthStencilState$stencilWriteMask$VH().get(seg);
        }
        public static  int stencilWriteMask$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUDepthStencilState$stencilWriteMask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void stencilWriteMask$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUDepthStencilState$stencilWriteMask$VH().set(seg, x);
        }
        public static void stencilWriteMask$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUDepthStencilState$stencilWriteMask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle depthBias$VH() {
            return wgpu_h_constants_1.WGPUDepthStencilState$depthBias$VH();
        }
        public static  int depthBias$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUDepthStencilState$depthBias$VH().get(seg);
        }
        public static  int depthBias$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUDepthStencilState$depthBias$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void depthBias$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUDepthStencilState$depthBias$VH().set(seg, x);
        }
        public static void depthBias$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUDepthStencilState$depthBias$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle depthBiasSlopeScale$VH() {
            return wgpu_h_constants_1.WGPUDepthStencilState$depthBiasSlopeScale$VH();
        }
        public static  float depthBiasSlopeScale$get(MemorySegment seg) {
            return (float)wgpu_h_constants_1.WGPUDepthStencilState$depthBiasSlopeScale$VH().get(seg);
        }
        public static  float depthBiasSlopeScale$get(MemorySegment seg, long index) {
            return (float)wgpu_h_constants_1.WGPUDepthStencilState$depthBiasSlopeScale$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void depthBiasSlopeScale$set( MemorySegment seg, float x) {
            wgpu_h_constants_1.WGPUDepthStencilState$depthBiasSlopeScale$VH().set(seg, x);
        }
        public static void depthBiasSlopeScale$set(MemorySegment seg, long index, float x) {
            wgpu_h_constants_1.WGPUDepthStencilState$depthBiasSlopeScale$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle depthBiasClamp$VH() {
            return wgpu_h_constants_1.WGPUDepthStencilState$depthBiasClamp$VH();
        }
        public static  float depthBiasClamp$get(MemorySegment seg) {
            return (float)wgpu_h_constants_1.WGPUDepthStencilState$depthBiasClamp$VH().get(seg);
        }
        public static  float depthBiasClamp$get(MemorySegment seg, long index) {
            return (float)wgpu_h_constants_1.WGPUDepthStencilState$depthBiasClamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void depthBiasClamp$set( MemorySegment seg, float x) {
            wgpu_h_constants_1.WGPUDepthStencilState$depthBiasClamp$VH().set(seg, x);
        }
        public static void depthBiasClamp$set(MemorySegment seg, long index, float x) {
            wgpu_h_constants_1.WGPUDepthStencilState$depthBiasClamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUImageCopyBuffer {

        /* package-private */ WGPUImageCopyBuffer() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPUImageCopyBuffer$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_1.WGPUImageCopyBuffer$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUImageCopyBuffer$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUImageCopyBuffer$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUImageCopyBuffer$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUImageCopyBuffer$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment layout$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 24));
        }
        public static VarHandle buffer$VH() {
            return wgpu_h_constants_1.WGPUImageCopyBuffer$buffer$VH();
        }
        public static  MemoryAddress buffer$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUImageCopyBuffer$buffer$VH().get(seg);
        }
        public static  MemoryAddress buffer$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUImageCopyBuffer$buffer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void buffer$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUImageCopyBuffer$buffer$VH().set(seg, x);
        }
        public static void buffer$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUImageCopyBuffer$buffer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUImageCopyTexture {

        /* package-private */ WGPUImageCopyTexture() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPUImageCopyTexture$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_1.WGPUImageCopyTexture$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUImageCopyTexture$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUImageCopyTexture$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUImageCopyTexture$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUImageCopyTexture$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle texture$VH() {
            return wgpu_h_constants_1.WGPUImageCopyTexture$texture$VH();
        }
        public static  MemoryAddress texture$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUImageCopyTexture$texture$VH().get(seg);
        }
        public static  MemoryAddress texture$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUImageCopyTexture$texture$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void texture$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUImageCopyTexture$texture$VH().set(seg, x);
        }
        public static void texture$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUImageCopyTexture$texture$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mipLevel$VH() {
            return wgpu_h_constants_1.WGPUImageCopyTexture$mipLevel$VH();
        }
        public static  int mipLevel$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUImageCopyTexture$mipLevel$VH().get(seg);
        }
        public static  int mipLevel$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUImageCopyTexture$mipLevel$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mipLevel$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUImageCopyTexture$mipLevel$VH().set(seg, x);
        }
        public static void mipLevel$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUImageCopyTexture$mipLevel$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment origin$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(20, 12));
        }
        public static VarHandle aspect$VH() {
            return wgpu_h_constants_1.WGPUImageCopyTexture$aspect$VH();
        }
        public static  int aspect$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUImageCopyTexture$aspect$VH().get(seg);
        }
        public static  int aspect$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUImageCopyTexture$aspect$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void aspect$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUImageCopyTexture$aspect$VH().set(seg, x);
        }
        public static void aspect$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUImageCopyTexture$aspect$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPURenderPassColorAttachmentDescriptor {

        /* package-private */ WGPURenderPassColorAttachmentDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$struct$LAYOUT();
        }
        public static VarHandle attachment$VH() {
            return wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$attachment$VH();
        }
        public static  MemoryAddress attachment$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$attachment$VH().get(seg);
        }
        public static  MemoryAddress attachment$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$attachment$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void attachment$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$attachment$VH().set(seg, x);
        }
        public static void attachment$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$attachment$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle resolveTarget$VH() {
            return wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$resolveTarget$VH();
        }
        public static  MemoryAddress resolveTarget$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$resolveTarget$VH().get(seg);
        }
        public static  MemoryAddress resolveTarget$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$resolveTarget$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void resolveTarget$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$resolveTarget$VH().set(seg, x);
        }
        public static void resolveTarget$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$resolveTarget$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle loadOp$VH() {
            return wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$loadOp$VH();
        }
        public static  int loadOp$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$loadOp$VH().get(seg);
        }
        public static  int loadOp$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$loadOp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void loadOp$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$loadOp$VH().set(seg, x);
        }
        public static void loadOp$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$loadOp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle storeOp$VH() {
            return wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$storeOp$VH();
        }
        public static  int storeOp$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$storeOp$VH().get(seg);
        }
        public static  int storeOp$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$storeOp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void storeOp$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$storeOp$VH().set(seg, x);
        }
        public static void storeOp$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPURenderPassColorAttachmentDescriptor$storeOp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment clearColor$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 32));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUTextureDescriptor {

        /* package-private */ WGPUTextureDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPUTextureDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_1.WGPUTextureDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUTextureDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUTextureDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUTextureDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUTextureDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_1.WGPUTextureDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUTextureDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUTextureDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUTextureDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUTextureDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle usage$VH() {
            return wgpu_h_constants_1.WGPUTextureDescriptor$usage$VH();
        }
        public static  int usage$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUTextureDescriptor$usage$VH().get(seg);
        }
        public static  int usage$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUTextureDescriptor$usage$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void usage$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUTextureDescriptor$usage$VH().set(seg, x);
        }
        public static void usage$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUTextureDescriptor$usage$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dimension$VH() {
            return wgpu_h_constants_1.WGPUTextureDescriptor$dimension$VH();
        }
        public static  int dimension$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUTextureDescriptor$dimension$VH().get(seg);
        }
        public static  int dimension$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUTextureDescriptor$dimension$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dimension$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUTextureDescriptor$dimension$VH().set(seg, x);
        }
        public static void dimension$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUTextureDescriptor$dimension$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment size$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 12));
        }
        public static VarHandle format$VH() {
            return wgpu_h_constants_1.WGPUTextureDescriptor$format$VH();
        }
        public static  int format$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUTextureDescriptor$format$VH().get(seg);
        }
        public static  int format$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUTextureDescriptor$format$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void format$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUTextureDescriptor$format$VH().set(seg, x);
        }
        public static void format$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUTextureDescriptor$format$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mipLevelCount$VH() {
            return wgpu_h_constants_1.WGPUTextureDescriptor$mipLevelCount$VH();
        }
        public static  int mipLevelCount$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUTextureDescriptor$mipLevelCount$VH().get(seg);
        }
        public static  int mipLevelCount$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUTextureDescriptor$mipLevelCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mipLevelCount$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUTextureDescriptor$mipLevelCount$VH().set(seg, x);
        }
        public static void mipLevelCount$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUTextureDescriptor$mipLevelCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sampleCount$VH() {
            return wgpu_h_constants_1.WGPUTextureDescriptor$sampleCount$VH();
        }
        public static  int sampleCount$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUTextureDescriptor$sampleCount$VH().get(seg);
        }
        public static  int sampleCount$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUTextureDescriptor$sampleCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sampleCount$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUTextureDescriptor$sampleCount$VH().set(seg, x);
        }
        public static void sampleCount$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUTextureDescriptor$sampleCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUVertexBufferLayout {

        /* package-private */ WGPUVertexBufferLayout() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPUVertexBufferLayout$struct$LAYOUT();
        }
        public static VarHandle arrayStride$VH() {
            return wgpu_h_constants_1.WGPUVertexBufferLayout$arrayStride$VH();
        }
        public static  long arrayStride$get(MemorySegment seg) {
            return (long)wgpu_h_constants_1.WGPUVertexBufferLayout$arrayStride$VH().get(seg);
        }
        public static  long arrayStride$get(MemorySegment seg, long index) {
            return (long)wgpu_h_constants_1.WGPUVertexBufferLayout$arrayStride$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void arrayStride$set( MemorySegment seg, long x) {
            wgpu_h_constants_1.WGPUVertexBufferLayout$arrayStride$VH().set(seg, x);
        }
        public static void arrayStride$set(MemorySegment seg, long index, long x) {
            wgpu_h_constants_1.WGPUVertexBufferLayout$arrayStride$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle stepMode$VH() {
            return wgpu_h_constants_1.WGPUVertexBufferLayout$stepMode$VH();
        }
        public static  int stepMode$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUVertexBufferLayout$stepMode$VH().get(seg);
        }
        public static  int stepMode$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUVertexBufferLayout$stepMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void stepMode$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUVertexBufferLayout$stepMode$VH().set(seg, x);
        }
        public static void stepMode$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUVertexBufferLayout$stepMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle attributeCount$VH() {
            return wgpu_h_constants_1.WGPUVertexBufferLayout$attributeCount$VH();
        }
        public static  int attributeCount$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUVertexBufferLayout$attributeCount$VH().get(seg);
        }
        public static  int attributeCount$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUVertexBufferLayout$attributeCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void attributeCount$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUVertexBufferLayout$attributeCount$VH().set(seg, x);
        }
        public static void attributeCount$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUVertexBufferLayout$attributeCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle attributes$VH() {
            return wgpu_h_constants_1.WGPUVertexBufferLayout$attributes$VH();
        }
        public static  MemoryAddress attributes$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUVertexBufferLayout$attributes$VH().get(seg);
        }
        public static  MemoryAddress attributes$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUVertexBufferLayout$attributes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void attributes$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUVertexBufferLayout$attributes$VH().set(seg, x);
        }
        public static void attributes$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUVertexBufferLayout$attributes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUBindGroupLayoutDescriptor {

        /* package-private */ WGPUBindGroupLayoutDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle entryCount$VH() {
            return wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$entryCount$VH();
        }
        public static  int entryCount$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$entryCount$VH().get(seg);
        }
        public static  int entryCount$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$entryCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void entryCount$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$entryCount$VH().set(seg, x);
        }
        public static void entryCount$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$entryCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle entries$VH() {
            return wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$entries$VH();
        }
        public static  MemoryAddress entries$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$entries$VH().get(seg);
        }
        public static  MemoryAddress entries$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$entries$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void entries$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$entries$VH().set(seg, x);
        }
        public static void entries$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUBindGroupLayoutDescriptor$entries$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUColorTargetState {

        /* package-private */ WGPUColorTargetState() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPUColorTargetState$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_1.WGPUColorTargetState$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUColorTargetState$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUColorTargetState$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUColorTargetState$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUColorTargetState$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle format$VH() {
            return wgpu_h_constants_1.WGPUColorTargetState$format$VH();
        }
        public static  int format$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUColorTargetState$format$VH().get(seg);
        }
        public static  int format$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUColorTargetState$format$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void format$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUColorTargetState$format$VH().set(seg, x);
        }
        public static void format$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUColorTargetState$format$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle blend$VH() {
            return wgpu_h_constants_1.WGPUColorTargetState$blend$VH();
        }
        public static  MemoryAddress blend$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUColorTargetState$blend$VH().get(seg);
        }
        public static  MemoryAddress blend$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUColorTargetState$blend$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void blend$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUColorTargetState$blend$VH().set(seg, x);
        }
        public static void blend$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUColorTargetState$blend$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle writeMask$VH() {
            return wgpu_h_constants_1.WGPUColorTargetState$writeMask$VH();
        }
        public static  int writeMask$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUColorTargetState$writeMask$VH().get(seg);
        }
        public static  int writeMask$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUColorTargetState$writeMask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void writeMask$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUColorTargetState$writeMask$VH().set(seg, x);
        }
        public static void writeMask$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUColorTargetState$writeMask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPURenderPassDescriptor {

        /* package-private */ WGPURenderPassDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPURenderPassDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_1.WGPURenderPassDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPassDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPassDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPassDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPassDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_1.WGPURenderPassDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPassDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPassDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPassDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPassDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle colorAttachmentCount$VH() {
            return wgpu_h_constants_1.WGPURenderPassDescriptor$colorAttachmentCount$VH();
        }
        public static  int colorAttachmentCount$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPURenderPassDescriptor$colorAttachmentCount$VH().get(seg);
        }
        public static  int colorAttachmentCount$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPURenderPassDescriptor$colorAttachmentCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void colorAttachmentCount$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPURenderPassDescriptor$colorAttachmentCount$VH().set(seg, x);
        }
        public static void colorAttachmentCount$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPURenderPassDescriptor$colorAttachmentCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle colorAttachments$VH() {
            return wgpu_h_constants_1.WGPURenderPassDescriptor$colorAttachments$VH();
        }
        public static  MemoryAddress colorAttachments$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPassDescriptor$colorAttachments$VH().get(seg);
        }
        public static  MemoryAddress colorAttachments$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPassDescriptor$colorAttachments$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void colorAttachments$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPassDescriptor$colorAttachments$VH().set(seg, x);
        }
        public static void colorAttachments$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPassDescriptor$colorAttachments$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle depthStencilAttachment$VH() {
            return wgpu_h_constants_1.WGPURenderPassDescriptor$depthStencilAttachment$VH();
        }
        public static  MemoryAddress depthStencilAttachment$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPassDescriptor$depthStencilAttachment$VH().get(seg);
        }
        public static  MemoryAddress depthStencilAttachment$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPassDescriptor$depthStencilAttachment$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void depthStencilAttachment$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPassDescriptor$depthStencilAttachment$VH().set(seg, x);
        }
        public static void depthStencilAttachment$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPassDescriptor$depthStencilAttachment$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle occlusionQuerySet$VH() {
            return wgpu_h_constants_1.WGPURenderPassDescriptor$occlusionQuerySet$VH();
        }
        public static  MemoryAddress occlusionQuerySet$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPassDescriptor$occlusionQuerySet$VH().get(seg);
        }
        public static  MemoryAddress occlusionQuerySet$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPassDescriptor$occlusionQuerySet$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void occlusionQuerySet$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPassDescriptor$occlusionQuerySet$VH().set(seg, x);
        }
        public static void occlusionQuerySet$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPassDescriptor$occlusionQuerySet$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUVertexState {

        /* package-private */ WGPUVertexState() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPUVertexState$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_1.WGPUVertexState$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUVertexState$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUVertexState$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUVertexState$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUVertexState$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle module$VH() {
            return wgpu_h_constants_1.WGPUVertexState$module$VH();
        }
        public static  MemoryAddress module$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUVertexState$module$VH().get(seg);
        }
        public static  MemoryAddress module$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUVertexState$module$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void module$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUVertexState$module$VH().set(seg, x);
        }
        public static void module$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUVertexState$module$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle entryPoint$VH() {
            return wgpu_h_constants_1.WGPUVertexState$entryPoint$VH();
        }
        public static  MemoryAddress entryPoint$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUVertexState$entryPoint$VH().get(seg);
        }
        public static  MemoryAddress entryPoint$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUVertexState$entryPoint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void entryPoint$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUVertexState$entryPoint$VH().set(seg, x);
        }
        public static void entryPoint$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUVertexState$entryPoint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle bufferCount$VH() {
            return wgpu_h_constants_1.WGPUVertexState$bufferCount$VH();
        }
        public static  int bufferCount$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUVertexState$bufferCount$VH().get(seg);
        }
        public static  int bufferCount$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUVertexState$bufferCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void bufferCount$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUVertexState$bufferCount$VH().set(seg, x);
        }
        public static void bufferCount$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUVertexState$bufferCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle buffers$VH() {
            return wgpu_h_constants_1.WGPUVertexState$buffers$VH();
        }
        public static  MemoryAddress buffers$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUVertexState$buffers$VH().get(seg);
        }
        public static  MemoryAddress buffers$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUVertexState$buffers$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void buffers$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUVertexState$buffers$VH().set(seg, x);
        }
        public static void buffers$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUVertexState$buffers$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPUFragmentState {

        /* package-private */ WGPUFragmentState() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPUFragmentState$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_1.WGPUFragmentState$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUFragmentState$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUFragmentState$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUFragmentState$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUFragmentState$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle module$VH() {
            return wgpu_h_constants_1.WGPUFragmentState$module$VH();
        }
        public static  MemoryAddress module$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUFragmentState$module$VH().get(seg);
        }
        public static  MemoryAddress module$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUFragmentState$module$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void module$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUFragmentState$module$VH().set(seg, x);
        }
        public static void module$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUFragmentState$module$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle entryPoint$VH() {
            return wgpu_h_constants_1.WGPUFragmentState$entryPoint$VH();
        }
        public static  MemoryAddress entryPoint$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUFragmentState$entryPoint$VH().get(seg);
        }
        public static  MemoryAddress entryPoint$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUFragmentState$entryPoint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void entryPoint$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUFragmentState$entryPoint$VH().set(seg, x);
        }
        public static void entryPoint$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUFragmentState$entryPoint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle targetCount$VH() {
            return wgpu_h_constants_1.WGPUFragmentState$targetCount$VH();
        }
        public static  int targetCount$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUFragmentState$targetCount$VH().get(seg);
        }
        public static  int targetCount$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUFragmentState$targetCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void targetCount$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUFragmentState$targetCount$VH().set(seg, x);
        }
        public static void targetCount$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUFragmentState$targetCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle targets$VH() {
            return wgpu_h_constants_1.WGPUFragmentState$targets$VH();
        }
        public static  MemoryAddress targets$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUFragmentState$targets$VH().get(seg);
        }
        public static  MemoryAddress targets$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUFragmentState$targets$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void targets$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUFragmentState$targets$VH().set(seg, x);
        }
        public static void targets$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUFragmentState$targets$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class WGPURenderPipelineDescriptor {

        /* package-private */ WGPURenderPipelineDescriptor() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPURenderPipelineDescriptor$struct$LAYOUT();
        }
        public static VarHandle nextInChain$VH() {
            return wgpu_h_constants_1.WGPURenderPipelineDescriptor$nextInChain$VH();
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPipelineDescriptor$nextInChain$VH().get(seg);
        }
        public static  MemoryAddress nextInChain$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPipelineDescriptor$nextInChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextInChain$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPipelineDescriptor$nextInChain$VH().set(seg, x);
        }
        public static void nextInChain$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPipelineDescriptor$nextInChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_1.WGPURenderPipelineDescriptor$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPipelineDescriptor$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPipelineDescriptor$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPipelineDescriptor$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPipelineDescriptor$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle layout$VH() {
            return wgpu_h_constants_1.WGPURenderPipelineDescriptor$layout$VH();
        }
        public static  MemoryAddress layout$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPipelineDescriptor$layout$VH().get(seg);
        }
        public static  MemoryAddress layout$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPipelineDescriptor$layout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void layout$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPipelineDescriptor$layout$VH().set(seg, x);
        }
        public static void layout$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPipelineDescriptor$layout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment vertex$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 40));
        }
        public static MemorySegment primitive$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(64, 24));
        }
        public static VarHandle depthStencil$VH() {
            return wgpu_h_constants_1.WGPURenderPipelineDescriptor$depthStencil$VH();
        }
        public static  MemoryAddress depthStencil$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPipelineDescriptor$depthStencil$VH().get(seg);
        }
        public static  MemoryAddress depthStencil$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPipelineDescriptor$depthStencil$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void depthStencil$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPipelineDescriptor$depthStencil$VH().set(seg, x);
        }
        public static void depthStencil$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPipelineDescriptor$depthStencil$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment multisample$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(96, 24));
        }
        public static VarHandle fragment$VH() {
            return wgpu_h_constants_1.WGPURenderPipelineDescriptor$fragment$VH();
        }
        public static  MemoryAddress fragment$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPipelineDescriptor$fragment$VH().get(seg);
        }
        public static  MemoryAddress fragment$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPURenderPipelineDescriptor$fragment$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fragment$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPipelineDescriptor$fragment$VH().set(seg, x);
        }
        public static void fragment$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPURenderPipelineDescriptor$fragment$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static interface WGPUBufferMapCallback {

        void apply(int x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUBufferMapCallback fi) {
            return RuntimeHelper.upcallStub(WGPUBufferMapCallback.class, fi, wgpu_h_constants_1.WGPUBufferMapCallback$FUNC(), "(ILjdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUBufferMapCallback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUCreateComputePipelineAsyncCallback {

        void apply(int x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        public static  MemorySegment allocate(WGPUCreateComputePipelineAsyncCallback fi) {
            return RuntimeHelper.upcallStub(WGPUCreateComputePipelineAsyncCallback.class, fi, wgpu_h_constants_1.WGPUCreateComputePipelineAsyncCallback$FUNC(), "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUCreateComputePipelineAsyncCallback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUCreateRenderPipelineAsyncCallback {

        void apply(int x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        public static  MemorySegment allocate(WGPUCreateRenderPipelineAsyncCallback fi) {
            return RuntimeHelper.upcallStub(WGPUCreateRenderPipelineAsyncCallback.class, fi, wgpu_h_constants_1.WGPUCreateRenderPipelineAsyncCallback$FUNC(), "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUCreateRenderPipelineAsyncCallback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUDeviceLostCallback {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUDeviceLostCallback fi) {
            return RuntimeHelper.upcallStub(WGPUDeviceLostCallback.class, fi, wgpu_h_constants_1.WGPUDeviceLostCallback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUDeviceLostCallback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUErrorCallback {

        void apply(int x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        public static  MemorySegment allocate(WGPUErrorCallback fi) {
            return RuntimeHelper.upcallStub(WGPUErrorCallback.class, fi, wgpu_h_constants_1.WGPUErrorCallback$FUNC(), "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUErrorCallback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUQueueWorkDoneCallback {

        void apply(int x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUQueueWorkDoneCallback fi) {
            return RuntimeHelper.upcallStub(WGPUQueueWorkDoneCallback.class, fi, wgpu_h_constants_1.WGPUQueueWorkDoneCallback$FUNC(), "(ILjdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUQueueWorkDoneCallback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPURequestAdapterCallback {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPURequestAdapterCallback fi) {
            return RuntimeHelper.upcallStub(WGPURequestAdapterCallback.class, fi, wgpu_h_constants_1.WGPURequestAdapterCallback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPURequestAdapterCallback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPURequestDeviceCallback {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPURequestDeviceCallback fi) {
            return RuntimeHelper.upcallStub(WGPURequestDeviceCallback.class, fi, wgpu_h_constants_1.WGPURequestDeviceCallback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPURequestDeviceCallback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUSurfaceGetPreferredFormatCallback {

        void apply(int x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUSurfaceGetPreferredFormatCallback fi) {
            return RuntimeHelper.upcallStub(WGPUSurfaceGetPreferredFormatCallback.class, fi, wgpu_h_constants_1.WGPUSurfaceGetPreferredFormatCallback$FUNC(), "(ILjdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUSurfaceGetPreferredFormatCallback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProc {

        void apply();
        public static  MemorySegment allocate(WGPUProc fi) {
            return RuntimeHelper.upcallStub(WGPUProc.class, fi, wgpu_h_constants_1.WGPUProc$FUNC(), "()V");
        }
        public static  MemorySegment allocate(WGPUProc fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcCreateInstance {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(WGPUProcCreateInstance fi) {
            return RuntimeHelper.upcallStub(WGPUProcCreateInstance.class, fi, wgpu_h_constants_1.WGPUProcCreateInstance$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcCreateInstance fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcGetProcAddress {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcGetProcAddress fi) {
            return RuntimeHelper.upcallStub(WGPUProcGetProcAddress.class, fi, wgpu_h_constants_1.WGPUProcGetProcAddress$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcGetProcAddress fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcAdapterGetProperties {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcAdapterGetProperties fi) {
            return RuntimeHelper.upcallStub(WGPUProcAdapterGetProperties.class, fi, wgpu_h_constants_1.WGPUProcAdapterGetProperties$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcAdapterGetProperties fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcAdapterRequestDevice {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        public static  MemorySegment allocate(WGPUProcAdapterRequestDevice fi) {
            return RuntimeHelper.upcallStub(WGPUProcAdapterRequestDevice.class, fi, wgpu_h_constants_1.WGPUProcAdapterRequestDevice$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcAdapterRequestDevice fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcBufferDestroy {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(WGPUProcBufferDestroy fi) {
            return RuntimeHelper.upcallStub(WGPUProcBufferDestroy.class, fi, wgpu_h_constants_1.WGPUProcBufferDestroy$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcBufferDestroy fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcBufferGetConstMappedRange {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, long x1, long x2);
        public static  MemorySegment allocate(WGPUProcBufferGetConstMappedRange fi) {
            return RuntimeHelper.upcallStub(WGPUProcBufferGetConstMappedRange.class, fi, wgpu_h_constants_1.WGPUProcBufferGetConstMappedRange$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;JJ)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcBufferGetConstMappedRange fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcBufferGetMappedRange {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, long x1, long x2);
        public static  MemorySegment allocate(WGPUProcBufferGetMappedRange fi) {
            return RuntimeHelper.upcallStub(WGPUProcBufferGetMappedRange.class, fi, wgpu_h_constants_1.WGPUProcBufferGetMappedRange$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;JJ)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcBufferGetMappedRange fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcBufferMapAsync {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, long x2, long x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5);
        public static  MemorySegment allocate(WGPUProcBufferMapAsync fi) {
            return RuntimeHelper.upcallStub(WGPUProcBufferMapAsync.class, fi, wgpu_h_constants_1.WGPUProcBufferMapAsync$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;IJJLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcBufferMapAsync fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcBufferUnmap {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(WGPUProcBufferUnmap fi) {
            return RuntimeHelper.upcallStub(WGPUProcBufferUnmap.class, fi, wgpu_h_constants_1.WGPUProcBufferUnmap$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcBufferUnmap fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcCommandEncoderBeginComputePass {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcCommandEncoderBeginComputePass fi) {
            return RuntimeHelper.upcallStub(WGPUProcCommandEncoderBeginComputePass.class, fi, wgpu_h_constants_1.WGPUProcCommandEncoderBeginComputePass$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcCommandEncoderBeginComputePass fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcCommandEncoderBeginRenderPass {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcCommandEncoderBeginRenderPass fi) {
            return RuntimeHelper.upcallStub(WGPUProcCommandEncoderBeginRenderPass.class, fi, wgpu_h_constants_1.WGPUProcCommandEncoderBeginRenderPass$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcCommandEncoderBeginRenderPass fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcCommandEncoderCopyBufferToBuffer {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2, jdk.incubator.foreign.MemoryAddress x3, long x4, long x5);
        public static  MemorySegment allocate(WGPUProcCommandEncoderCopyBufferToBuffer fi) {
            return RuntimeHelper.upcallStub(WGPUProcCommandEncoderCopyBufferToBuffer.class, fi, wgpu_h_constants_1.WGPUProcCommandEncoderCopyBufferToBuffer$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;JJ)V");
        }
        public static  MemorySegment allocate(WGPUProcCommandEncoderCopyBufferToBuffer fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcCommandEncoderCopyBufferToTexture {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        public static  MemorySegment allocate(WGPUProcCommandEncoderCopyBufferToTexture fi) {
            return RuntimeHelper.upcallStub(WGPUProcCommandEncoderCopyBufferToTexture.class, fi, wgpu_h_constants_1.WGPUProcCommandEncoderCopyBufferToTexture$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcCommandEncoderCopyBufferToTexture fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcCommandEncoderCopyTextureToBuffer {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        public static  MemorySegment allocate(WGPUProcCommandEncoderCopyTextureToBuffer fi) {
            return RuntimeHelper.upcallStub(WGPUProcCommandEncoderCopyTextureToBuffer.class, fi, wgpu_h_constants_1.WGPUProcCommandEncoderCopyTextureToBuffer$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcCommandEncoderCopyTextureToBuffer fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcCommandEncoderCopyTextureToTexture {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        public static  MemorySegment allocate(WGPUProcCommandEncoderCopyTextureToTexture fi) {
            return RuntimeHelper.upcallStub(WGPUProcCommandEncoderCopyTextureToTexture.class, fi, wgpu_h_constants_1.WGPUProcCommandEncoderCopyTextureToTexture$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcCommandEncoderCopyTextureToTexture fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcCommandEncoderFinish {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcCommandEncoderFinish fi) {
            return RuntimeHelper.upcallStub(WGPUProcCommandEncoderFinish.class, fi, wgpu_h_constants_1.WGPUProcCommandEncoderFinish$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcCommandEncoderFinish fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcCommandEncoderInsertDebugMarker {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcCommandEncoderInsertDebugMarker fi) {
            return RuntimeHelper.upcallStub(WGPUProcCommandEncoderInsertDebugMarker.class, fi, wgpu_h_constants_1.WGPUProcCommandEncoderInsertDebugMarker$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcCommandEncoderInsertDebugMarker fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcCommandEncoderPopDebugGroup {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(WGPUProcCommandEncoderPopDebugGroup fi) {
            return RuntimeHelper.upcallStub(WGPUProcCommandEncoderPopDebugGroup.class, fi, wgpu_h_constants_1.WGPUProcCommandEncoderPopDebugGroup$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcCommandEncoderPopDebugGroup fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcCommandEncoderPushDebugGroup {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcCommandEncoderPushDebugGroup fi) {
            return RuntimeHelper.upcallStub(WGPUProcCommandEncoderPushDebugGroup.class, fi, wgpu_h_constants_1.WGPUProcCommandEncoderPushDebugGroup$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcCommandEncoderPushDebugGroup fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcCommandEncoderResolveQuerySet {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3, jdk.incubator.foreign.MemoryAddress x4, long x5);
        public static  MemorySegment allocate(WGPUProcCommandEncoderResolveQuerySet fi) {
            return RuntimeHelper.upcallStub(WGPUProcCommandEncoderResolveQuerySet.class, fi, wgpu_h_constants_1.WGPUProcCommandEncoderResolveQuerySet$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;J)V");
        }
        public static  MemorySegment allocate(WGPUProcCommandEncoderResolveQuerySet fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcCommandEncoderWriteTimestamp {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        public static  MemorySegment allocate(WGPUProcCommandEncoderWriteTimestamp fi) {
            return RuntimeHelper.upcallStub(WGPUProcCommandEncoderWriteTimestamp.class, fi, wgpu_h_constants_1.WGPUProcCommandEncoderWriteTimestamp$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V");
        }
        public static  MemorySegment allocate(WGPUProcCommandEncoderWriteTimestamp fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcComputePassEncoderBeginPipelineStatisticsQuery {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        public static  MemorySegment allocate(WGPUProcComputePassEncoderBeginPipelineStatisticsQuery fi) {
            return RuntimeHelper.upcallStub(WGPUProcComputePassEncoderBeginPipelineStatisticsQuery.class, fi, wgpu_h_constants_1.WGPUProcComputePassEncoderBeginPipelineStatisticsQuery$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V");
        }
        public static  MemorySegment allocate(WGPUProcComputePassEncoderBeginPipelineStatisticsQuery fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcComputePassEncoderDispatch {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, int x3);
        public static  MemorySegment allocate(WGPUProcComputePassEncoderDispatch fi) {
            return RuntimeHelper.upcallStub(WGPUProcComputePassEncoderDispatch.class, fi, wgpu_h_constants_1.WGPUProcComputePassEncoderDispatch$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;III)V");
        }
        public static  MemorySegment allocate(WGPUProcComputePassEncoderDispatch fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcComputePassEncoderDispatchIndirect {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2);
        public static  MemorySegment allocate(WGPUProcComputePassEncoderDispatchIndirect fi) {
            return RuntimeHelper.upcallStub(WGPUProcComputePassEncoderDispatchIndirect.class, fi, wgpu_h_constants_1.WGPUProcComputePassEncoderDispatchIndirect$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)V");
        }
        public static  MemorySegment allocate(WGPUProcComputePassEncoderDispatchIndirect fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcComputePassEncoderEndPass {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(WGPUProcComputePassEncoderEndPass fi) {
            return RuntimeHelper.upcallStub(WGPUProcComputePassEncoderEndPass.class, fi, wgpu_h_constants_1.WGPUProcComputePassEncoderEndPass$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcComputePassEncoderEndPass fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcComputePassEncoderEndPipelineStatisticsQuery {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(WGPUProcComputePassEncoderEndPipelineStatisticsQuery fi) {
            return RuntimeHelper.upcallStub(WGPUProcComputePassEncoderEndPipelineStatisticsQuery.class, fi, wgpu_h_constants_1.WGPUProcComputePassEncoderEndPipelineStatisticsQuery$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcComputePassEncoderEndPipelineStatisticsQuery fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcComputePassEncoderInsertDebugMarker {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcComputePassEncoderInsertDebugMarker fi) {
            return RuntimeHelper.upcallStub(WGPUProcComputePassEncoderInsertDebugMarker.class, fi, wgpu_h_constants_1.WGPUProcComputePassEncoderInsertDebugMarker$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcComputePassEncoderInsertDebugMarker fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcComputePassEncoderPopDebugGroup {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(WGPUProcComputePassEncoderPopDebugGroup fi) {
            return RuntimeHelper.upcallStub(WGPUProcComputePassEncoderPopDebugGroup.class, fi, wgpu_h_constants_1.WGPUProcComputePassEncoderPopDebugGroup$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcComputePassEncoderPopDebugGroup fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcComputePassEncoderPushDebugGroup {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcComputePassEncoderPushDebugGroup fi) {
            return RuntimeHelper.upcallStub(WGPUProcComputePassEncoderPushDebugGroup.class, fi, wgpu_h_constants_1.WGPUProcComputePassEncoderPushDebugGroup$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcComputePassEncoderPushDebugGroup fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcComputePassEncoderSetBindGroup {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4);
        public static  MemorySegment allocate(WGPUProcComputePassEncoderSetBindGroup fi) {
            return RuntimeHelper.upcallStub(WGPUProcComputePassEncoderSetBindGroup.class, fi, wgpu_h_constants_1.WGPUProcComputePassEncoderSetBindGroup$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcComputePassEncoderSetBindGroup fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcComputePassEncoderSetPipeline {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcComputePassEncoderSetPipeline fi) {
            return RuntimeHelper.upcallStub(WGPUProcComputePassEncoderSetPipeline.class, fi, wgpu_h_constants_1.WGPUProcComputePassEncoderSetPipeline$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcComputePassEncoderSetPipeline fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcComputePassEncoderWriteTimestamp {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        public static  MemorySegment allocate(WGPUProcComputePassEncoderWriteTimestamp fi) {
            return RuntimeHelper.upcallStub(WGPUProcComputePassEncoderWriteTimestamp.class, fi, wgpu_h_constants_1.WGPUProcComputePassEncoderWriteTimestamp$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V");
        }
        public static  MemorySegment allocate(WGPUProcComputePassEncoderWriteTimestamp fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcComputePipelineGetBindGroupLayout {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        public static  MemorySegment allocate(WGPUProcComputePipelineGetBindGroupLayout fi) {
            return RuntimeHelper.upcallStub(WGPUProcComputePipelineGetBindGroupLayout.class, fi, wgpu_h_constants_1.WGPUProcComputePipelineGetBindGroupLayout$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcComputePipelineGetBindGroupLayout fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDeviceCreateBindGroup {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcDeviceCreateBindGroup fi) {
            return RuntimeHelper.upcallStub(WGPUProcDeviceCreateBindGroup.class, fi, wgpu_h_constants_1.WGPUProcDeviceCreateBindGroup$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcDeviceCreateBindGroup fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDeviceCreateBindGroupLayout {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcDeviceCreateBindGroupLayout fi) {
            return RuntimeHelper.upcallStub(WGPUProcDeviceCreateBindGroupLayout.class, fi, wgpu_h_constants_1.WGPUProcDeviceCreateBindGroupLayout$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcDeviceCreateBindGroupLayout fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDeviceCreateBuffer {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcDeviceCreateBuffer fi) {
            return RuntimeHelper.upcallStub(WGPUProcDeviceCreateBuffer.class, fi, wgpu_h_constants_1.WGPUProcDeviceCreateBuffer$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcDeviceCreateBuffer fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDeviceCreateCommandEncoder {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcDeviceCreateCommandEncoder fi) {
            return RuntimeHelper.upcallStub(WGPUProcDeviceCreateCommandEncoder.class, fi, wgpu_h_constants_1.WGPUProcDeviceCreateCommandEncoder$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcDeviceCreateCommandEncoder fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDeviceCreateComputePipeline {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcDeviceCreateComputePipeline fi) {
            return RuntimeHelper.upcallStub(WGPUProcDeviceCreateComputePipeline.class, fi, wgpu_h_constants_1.WGPUProcDeviceCreateComputePipeline$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcDeviceCreateComputePipeline fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDeviceCreateComputePipelineAsync {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        public static  MemorySegment allocate(WGPUProcDeviceCreateComputePipelineAsync fi) {
            return RuntimeHelper.upcallStub(WGPUProcDeviceCreateComputePipelineAsync.class, fi, wgpu_h_constants_1.WGPUProcDeviceCreateComputePipelineAsync$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcDeviceCreateComputePipelineAsync fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDeviceCreatePipelineLayout {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcDeviceCreatePipelineLayout fi) {
            return RuntimeHelper.upcallStub(WGPUProcDeviceCreatePipelineLayout.class, fi, wgpu_h_constants_1.WGPUProcDeviceCreatePipelineLayout$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcDeviceCreatePipelineLayout fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDeviceCreateQuerySet {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcDeviceCreateQuerySet fi) {
            return RuntimeHelper.upcallStub(WGPUProcDeviceCreateQuerySet.class, fi, wgpu_h_constants_1.WGPUProcDeviceCreateQuerySet$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcDeviceCreateQuerySet fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDeviceCreateRenderBundleEncoder {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcDeviceCreateRenderBundleEncoder fi) {
            return RuntimeHelper.upcallStub(WGPUProcDeviceCreateRenderBundleEncoder.class, fi, wgpu_h_constants_1.WGPUProcDeviceCreateRenderBundleEncoder$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcDeviceCreateRenderBundleEncoder fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDeviceCreateRenderPipeline {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcDeviceCreateRenderPipeline fi) {
            return RuntimeHelper.upcallStub(WGPUProcDeviceCreateRenderPipeline.class, fi, wgpu_h_constants_1.WGPUProcDeviceCreateRenderPipeline$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcDeviceCreateRenderPipeline fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDeviceCreateRenderPipelineAsync {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        public static  MemorySegment allocate(WGPUProcDeviceCreateRenderPipelineAsync fi) {
            return RuntimeHelper.upcallStub(WGPUProcDeviceCreateRenderPipelineAsync.class, fi, wgpu_h_constants_1.WGPUProcDeviceCreateRenderPipelineAsync$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcDeviceCreateRenderPipelineAsync fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDeviceCreateSampler {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcDeviceCreateSampler fi) {
            return RuntimeHelper.upcallStub(WGPUProcDeviceCreateSampler.class, fi, wgpu_h_constants_1.WGPUProcDeviceCreateSampler$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcDeviceCreateSampler fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDeviceCreateShaderModule {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcDeviceCreateShaderModule fi) {
            return RuntimeHelper.upcallStub(WGPUProcDeviceCreateShaderModule.class, fi, wgpu_h_constants_1.WGPUProcDeviceCreateShaderModule$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcDeviceCreateShaderModule fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDeviceCreateSwapChain {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        public static  MemorySegment allocate(WGPUProcDeviceCreateSwapChain fi) {
            return RuntimeHelper.upcallStub(WGPUProcDeviceCreateSwapChain.class, fi, wgpu_h_constants_1.WGPUProcDeviceCreateSwapChain$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcDeviceCreateSwapChain fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDeviceCreateTexture {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcDeviceCreateTexture fi) {
            return RuntimeHelper.upcallStub(WGPUProcDeviceCreateTexture.class, fi, wgpu_h_constants_1.WGPUProcDeviceCreateTexture$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcDeviceCreateTexture fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDeviceGetQueue {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(WGPUProcDeviceGetQueue fi) {
            return RuntimeHelper.upcallStub(WGPUProcDeviceGetQueue.class, fi, wgpu_h_constants_1.WGPUProcDeviceGetQueue$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcDeviceGetQueue fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDevicePopErrorScope {

        byte apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        public static  MemorySegment allocate(WGPUProcDevicePopErrorScope fi) {
            return RuntimeHelper.upcallStub(WGPUProcDevicePopErrorScope.class, fi, wgpu_h_constants_1.WGPUProcDevicePopErrorScope$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)B");
        }
        public static  MemorySegment allocate(WGPUProcDevicePopErrorScope fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDevicePushErrorScope {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        public static  MemorySegment allocate(WGPUProcDevicePushErrorScope fi) {
            return RuntimeHelper.upcallStub(WGPUProcDevicePushErrorScope.class, fi, wgpu_h_constants_1.WGPUProcDevicePushErrorScope$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;I)V");
        }
        public static  MemorySegment allocate(WGPUProcDevicePushErrorScope fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDeviceSetDeviceLostCallback {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        public static  MemorySegment allocate(WGPUProcDeviceSetDeviceLostCallback fi) {
            return RuntimeHelper.upcallStub(WGPUProcDeviceSetDeviceLostCallback.class, fi, wgpu_h_constants_1.WGPUProcDeviceSetDeviceLostCallback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcDeviceSetDeviceLostCallback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcDeviceSetUncapturedErrorCallback {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        public static  MemorySegment allocate(WGPUProcDeviceSetUncapturedErrorCallback fi) {
            return RuntimeHelper.upcallStub(WGPUProcDeviceSetUncapturedErrorCallback.class, fi, wgpu_h_constants_1.WGPUProcDeviceSetUncapturedErrorCallback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcDeviceSetUncapturedErrorCallback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcInstanceCreateSurface {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcInstanceCreateSurface fi) {
            return RuntimeHelper.upcallStub(WGPUProcInstanceCreateSurface.class, fi, wgpu_h_constants_1.WGPUProcInstanceCreateSurface$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcInstanceCreateSurface fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcInstanceProcessEvents {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(WGPUProcInstanceProcessEvents fi) {
            return RuntimeHelper.upcallStub(WGPUProcInstanceProcessEvents.class, fi, wgpu_h_constants_1.WGPUProcInstanceProcessEvents$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcInstanceProcessEvents fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcInstanceRequestAdapter {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        public static  MemorySegment allocate(WGPUProcInstanceRequestAdapter fi) {
            return RuntimeHelper.upcallStub(WGPUProcInstanceRequestAdapter.class, fi, wgpu_h_constants_1.WGPUProcInstanceRequestAdapter$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcInstanceRequestAdapter fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcQuerySetDestroy {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(WGPUProcQuerySetDestroy fi) {
            return RuntimeHelper.upcallStub(WGPUProcQuerySetDestroy.class, fi, wgpu_h_constants_1.WGPUProcQuerySetDestroy$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcQuerySetDestroy fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcQueueOnSubmittedWorkDone {

        void apply(jdk.incubator.foreign.MemoryAddress x0, long x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        public static  MemorySegment allocate(WGPUProcQueueOnSubmittedWorkDone fi) {
            return RuntimeHelper.upcallStub(WGPUProcQueueOnSubmittedWorkDone.class, fi, wgpu_h_constants_1.WGPUProcQueueOnSubmittedWorkDone$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcQueueOnSubmittedWorkDone fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcQueueSubmit {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        public static  MemorySegment allocate(WGPUProcQueueSubmit fi) {
            return RuntimeHelper.upcallStub(WGPUProcQueueSubmit.class, fi, wgpu_h_constants_1.WGPUProcQueueSubmit$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcQueueSubmit fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcQueueWriteBuffer {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2, jdk.incubator.foreign.MemoryAddress x3, long x4);
        public static  MemorySegment allocate(WGPUProcQueueWriteBuffer fi) {
            return RuntimeHelper.upcallStub(WGPUProcQueueWriteBuffer.class, fi, wgpu_h_constants_1.WGPUProcQueueWriteBuffer$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;J)V");
        }
        public static  MemorySegment allocate(WGPUProcQueueWriteBuffer fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcQueueWriteTexture {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, long x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5);
        public static  MemorySegment allocate(WGPUProcQueueWriteTexture fi) {
            return RuntimeHelper.upcallStub(WGPUProcQueueWriteTexture.class, fi, wgpu_h_constants_1.WGPUProcQueueWriteTexture$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcQueueWriteTexture fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderBundleEncoderDraw {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, int x3, int x4);
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderDraw fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderBundleEncoderDraw.class, fi, wgpu_h_constants_1.WGPUProcRenderBundleEncoderDraw$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;IIII)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderDraw fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderBundleEncoderDrawIndexed {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, int x3, int x4, int x5);
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderDrawIndexed fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderBundleEncoderDrawIndexed.class, fi, wgpu_h_constants_1.WGPUProcRenderBundleEncoderDrawIndexed$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;IIIII)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderDrawIndexed fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderBundleEncoderDrawIndexedIndirect {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2);
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderDrawIndexedIndirect fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderBundleEncoderDrawIndexedIndirect.class, fi, wgpu_h_constants_1.WGPUProcRenderBundleEncoderDrawIndexedIndirect$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderDrawIndexedIndirect fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderBundleEncoderDrawIndirect {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2);
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderDrawIndirect fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderBundleEncoderDrawIndirect.class, fi, wgpu_h_constants_1.WGPUProcRenderBundleEncoderDrawIndirect$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderDrawIndirect fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderBundleEncoderFinish {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderFinish fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderBundleEncoderFinish.class, fi, wgpu_h_constants_1.WGPUProcRenderBundleEncoderFinish$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderFinish fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderBundleEncoderInsertDebugMarker {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderInsertDebugMarker fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderBundleEncoderInsertDebugMarker.class, fi, wgpu_h_constants_1.WGPUProcRenderBundleEncoderInsertDebugMarker$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderInsertDebugMarker fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderBundleEncoderPopDebugGroup {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderPopDebugGroup fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderBundleEncoderPopDebugGroup.class, fi, wgpu_h_constants_1.WGPUProcRenderBundleEncoderPopDebugGroup$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderPopDebugGroup fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderBundleEncoderPushDebugGroup {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderPushDebugGroup fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderBundleEncoderPushDebugGroup.class, fi, wgpu_h_constants_1.WGPUProcRenderBundleEncoderPushDebugGroup$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderPushDebugGroup fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderBundleEncoderSetBindGroup {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4);
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderSetBindGroup fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderBundleEncoderSetBindGroup.class, fi, wgpu_h_constants_1.WGPUProcRenderBundleEncoderSetBindGroup$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderSetBindGroup fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderBundleEncoderSetIndexBuffer {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, long x3, long x4);
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderSetIndexBuffer fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderBundleEncoderSetIndexBuffer.class, fi, wgpu_h_constants_1.WGPUProcRenderBundleEncoderSetIndexBuffer$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJJ)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderSetIndexBuffer fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderBundleEncoderSetPipeline {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderSetPipeline fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderBundleEncoderSetPipeline.class, fi, wgpu_h_constants_1.WGPUProcRenderBundleEncoderSetPipeline$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderSetPipeline fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderBundleEncoderSetVertexBuffer {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, long x3, long x4);
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderSetVertexBuffer fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderBundleEncoderSetVertexBuffer.class, fi, wgpu_h_constants_1.WGPUProcRenderBundleEncoderSetVertexBuffer$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;JJ)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderBundleEncoderSetVertexBuffer fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderBeginOcclusionQuery {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderBeginOcclusionQuery fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderBeginOcclusionQuery.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderBeginOcclusionQuery$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;I)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderBeginOcclusionQuery fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderDraw {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, int x3, int x4);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderDraw fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderDraw.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderDraw$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;IIII)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderDraw fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderDrawIndexed {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, int x3, int x4, int x5);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderDrawIndexed fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderDrawIndexed.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderDrawIndexed$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;IIIII)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderDrawIndexed fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderDrawIndexedIndirect {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderDrawIndexedIndirect fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderDrawIndexedIndirect.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderDrawIndexedIndirect$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderDrawIndexedIndirect fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderDrawIndirect {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderDrawIndirect fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderDrawIndirect.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderDrawIndirect$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderDrawIndirect fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderEndOcclusionQuery {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderEndOcclusionQuery fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderEndOcclusionQuery.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderEndOcclusionQuery$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderEndOcclusionQuery fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderEndPass {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderEndPass fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderEndPass.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderEndPass$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderEndPass fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderEndPipelineStatisticsQuery {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderEndPipelineStatisticsQuery fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderEndPipelineStatisticsQuery.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderEndPipelineStatisticsQuery$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderEndPipelineStatisticsQuery fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderExecuteBundles {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderExecuteBundles fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderExecuteBundles.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderExecuteBundles$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderExecuteBundles fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderInsertDebugMarker {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderInsertDebugMarker fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderInsertDebugMarker.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderInsertDebugMarker$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderInsertDebugMarker fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderPopDebugGroup {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderPopDebugGroup fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderPopDebugGroup.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderPopDebugGroup$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderPopDebugGroup fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderPushDebugGroup {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderPushDebugGroup fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderPushDebugGroup.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderPushDebugGroup$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderPushDebugGroup fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderSetBindGroup {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderSetBindGroup fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderSetBindGroup.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderSetBindGroup$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderSetBindGroup fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderSetBlendColor {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderSetBlendColor fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderSetBlendColor.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderSetBlendColor$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderSetBlendColor fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderSetIndexBuffer {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, long x3, long x4);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderSetIndexBuffer fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderSetIndexBuffer.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderSetIndexBuffer$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJJ)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderSetIndexBuffer fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderSetPipeline {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderSetPipeline fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderSetPipeline.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderSetPipeline$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderSetPipeline fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderSetScissorRect {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, int x3, int x4);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderSetScissorRect fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderSetScissorRect.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderSetScissorRect$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;IIII)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderSetScissorRect fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderSetStencilReference {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderSetStencilReference fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderSetStencilReference.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderSetStencilReference$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;I)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderSetStencilReference fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderSetVertexBuffer {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, long x3, long x4);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderSetVertexBuffer fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderSetVertexBuffer.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderSetVertexBuffer$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;JJ)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderSetVertexBuffer fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderSetViewport {

        void apply(jdk.incubator.foreign.MemoryAddress x0, float x1, float x2, float x3, float x4, float x5, float x6);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderSetViewport fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderSetViewport.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderSetViewport$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;FFFFFF)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderSetViewport fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPassEncoderWriteTimestamp {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderWriteTimestamp fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPassEncoderWriteTimestamp.class, fi, wgpu_h_constants_1.WGPUProcRenderPassEncoderWriteTimestamp$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V");
        }
        public static  MemorySegment allocate(WGPUProcRenderPassEncoderWriteTimestamp fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcRenderPipelineGetBindGroupLayout {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        public static  MemorySegment allocate(WGPUProcRenderPipelineGetBindGroupLayout fi) {
            return RuntimeHelper.upcallStub(WGPUProcRenderPipelineGetBindGroupLayout.class, fi, wgpu_h_constants_1.WGPUProcRenderPipelineGetBindGroupLayout$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcRenderPipelineGetBindGroupLayout fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcSurfaceGetPreferredFormat {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        public static  MemorySegment allocate(WGPUProcSurfaceGetPreferredFormat fi) {
            return RuntimeHelper.upcallStub(WGPUProcSurfaceGetPreferredFormat.class, fi, wgpu_h_constants_1.WGPUProcSurfaceGetPreferredFormat$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcSurfaceGetPreferredFormat fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcSwapChainGetCurrentTextureView {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(WGPUProcSwapChainGetCurrentTextureView fi) {
            return RuntimeHelper.upcallStub(WGPUProcSwapChainGetCurrentTextureView.class, fi, wgpu_h_constants_1.WGPUProcSwapChainGetCurrentTextureView$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcSwapChainGetCurrentTextureView fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcSwapChainPresent {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(WGPUProcSwapChainPresent fi) {
            return RuntimeHelper.upcallStub(WGPUProcSwapChainPresent.class, fi, wgpu_h_constants_1.WGPUProcSwapChainPresent$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcSwapChainPresent fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcTextureCreateView {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPUProcTextureCreateView fi) {
            return RuntimeHelper.upcallStub(WGPUProcTextureCreateView.class, fi, wgpu_h_constants_1.WGPUProcTextureCreateView$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  MemorySegment allocate(WGPUProcTextureCreateView fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface WGPUProcTextureDestroy {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(WGPUProcTextureDestroy fi) {
            return RuntimeHelper.upcallStub(WGPUProcTextureDestroy.class, fi, wgpu_h_constants_1.WGPUProcTextureDestroy$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPUProcTextureDestroy fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static  MethodHandle wgpuCreateInstance$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCreateInstance$MH(),"unresolved symbol: wgpuCreateInstance");
    }
    public static MemoryAddress wgpuCreateInstance ( Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCreateInstance$MH(), "unresolved symbol: wgpuCreateInstance");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuGetProcAddress$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuGetProcAddress$MH(),"unresolved symbol: wgpuGetProcAddress");
    }
    public static MemoryAddress wgpuGetProcAddress ( Addressable device,  Addressable procName) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuGetProcAddress$MH(), "unresolved symbol: wgpuGetProcAddress");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(device.address(), procName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuAdapterGetProperties$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuAdapterGetProperties$MH(),"unresolved symbol: wgpuAdapterGetProperties");
    }
    public static void wgpuAdapterGetProperties ( Addressable adapter,  Addressable properties) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuAdapterGetProperties$MH(), "unresolved symbol: wgpuAdapterGetProperties");
        try {
            mh$.invokeExact(adapter.address(), properties.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuAdapterRequestDevice$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuAdapterRequestDevice$MH(),"unresolved symbol: wgpuAdapterRequestDevice");
    }
    public static void wgpuAdapterRequestDevice ( Addressable adapter,  Addressable descriptor,  Addressable callback,  Addressable userdata) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuAdapterRequestDevice$MH(), "unresolved symbol: wgpuAdapterRequestDevice");
        try {
            mh$.invokeExact(adapter.address(), descriptor.address(), callback.address(), userdata.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuBufferDestroy$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuBufferDestroy$MH(),"unresolved symbol: wgpuBufferDestroy");
    }
    public static void wgpuBufferDestroy ( Addressable buffer) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuBufferDestroy$MH(), "unresolved symbol: wgpuBufferDestroy");
        try {
            mh$.invokeExact(buffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuBufferGetConstMappedRange$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuBufferGetConstMappedRange$MH(),"unresolved symbol: wgpuBufferGetConstMappedRange");
    }
    public static MemoryAddress wgpuBufferGetConstMappedRange ( Addressable buffer,  long offset,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuBufferGetConstMappedRange$MH(), "unresolved symbol: wgpuBufferGetConstMappedRange");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(buffer.address(), offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuBufferGetMappedRange$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuBufferGetMappedRange$MH(),"unresolved symbol: wgpuBufferGetMappedRange");
    }
    public static MemoryAddress wgpuBufferGetMappedRange ( Addressable buffer,  long offset,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuBufferGetMappedRange$MH(), "unresolved symbol: wgpuBufferGetMappedRange");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(buffer.address(), offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuBufferMapAsync$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuBufferMapAsync$MH(),"unresolved symbol: wgpuBufferMapAsync");
    }
    public static void wgpuBufferMapAsync ( Addressable buffer,  int mode,  long offset,  long size,  Addressable callback,  Addressable userdata) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuBufferMapAsync$MH(), "unresolved symbol: wgpuBufferMapAsync");
        try {
            mh$.invokeExact(buffer.address(), mode, offset, size, callback.address(), userdata.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuBufferUnmap$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuBufferUnmap$MH(),"unresolved symbol: wgpuBufferUnmap");
    }
    public static void wgpuBufferUnmap ( Addressable buffer) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuBufferUnmap$MH(), "unresolved symbol: wgpuBufferUnmap");
        try {
            mh$.invokeExact(buffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuCommandEncoderBeginComputePass$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderBeginComputePass$MH(),"unresolved symbol: wgpuCommandEncoderBeginComputePass");
    }
    public static MemoryAddress wgpuCommandEncoderBeginComputePass ( Addressable commandEncoder,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderBeginComputePass$MH(), "unresolved symbol: wgpuCommandEncoderBeginComputePass");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(commandEncoder.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuCommandEncoderBeginRenderPass$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderBeginRenderPass$MH(),"unresolved symbol: wgpuCommandEncoderBeginRenderPass");
    }
    public static MemoryAddress wgpuCommandEncoderBeginRenderPass ( Addressable commandEncoder,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderBeginRenderPass$MH(), "unresolved symbol: wgpuCommandEncoderBeginRenderPass");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(commandEncoder.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuCommandEncoderCopyBufferToBuffer$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderCopyBufferToBuffer$MH(),"unresolved symbol: wgpuCommandEncoderCopyBufferToBuffer");
    }
    public static void wgpuCommandEncoderCopyBufferToBuffer ( Addressable commandEncoder,  Addressable source,  long sourceOffset,  Addressable destination,  long destinationOffset,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderCopyBufferToBuffer$MH(), "unresolved symbol: wgpuCommandEncoderCopyBufferToBuffer");
        try {
            mh$.invokeExact(commandEncoder.address(), source.address(), sourceOffset, destination.address(), destinationOffset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuCommandEncoderCopyBufferToTexture$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderCopyBufferToTexture$MH(),"unresolved symbol: wgpuCommandEncoderCopyBufferToTexture");
    }
    public static void wgpuCommandEncoderCopyBufferToTexture ( Addressable commandEncoder,  Addressable source,  Addressable destination,  Addressable copySize) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderCopyBufferToTexture$MH(), "unresolved symbol: wgpuCommandEncoderCopyBufferToTexture");
        try {
            mh$.invokeExact(commandEncoder.address(), source.address(), destination.address(), copySize.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuCommandEncoderCopyTextureToBuffer$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderCopyTextureToBuffer$MH(),"unresolved symbol: wgpuCommandEncoderCopyTextureToBuffer");
    }
    public static void wgpuCommandEncoderCopyTextureToBuffer ( Addressable commandEncoder,  Addressable source,  Addressable destination,  Addressable copySize) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderCopyTextureToBuffer$MH(), "unresolved symbol: wgpuCommandEncoderCopyTextureToBuffer");
        try {
            mh$.invokeExact(commandEncoder.address(), source.address(), destination.address(), copySize.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuCommandEncoderCopyTextureToTexture$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderCopyTextureToTexture$MH(),"unresolved symbol: wgpuCommandEncoderCopyTextureToTexture");
    }
    public static void wgpuCommandEncoderCopyTextureToTexture ( Addressable commandEncoder,  Addressable source,  Addressable destination,  Addressable copySize) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderCopyTextureToTexture$MH(), "unresolved symbol: wgpuCommandEncoderCopyTextureToTexture");
        try {
            mh$.invokeExact(commandEncoder.address(), source.address(), destination.address(), copySize.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuCommandEncoderFinish$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderFinish$MH(),"unresolved symbol: wgpuCommandEncoderFinish");
    }
    public static MemoryAddress wgpuCommandEncoderFinish ( Addressable commandEncoder,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderFinish$MH(), "unresolved symbol: wgpuCommandEncoderFinish");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(commandEncoder.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuCommandEncoderInsertDebugMarker$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderInsertDebugMarker$MH(),"unresolved symbol: wgpuCommandEncoderInsertDebugMarker");
    }
    public static void wgpuCommandEncoderInsertDebugMarker ( Addressable commandEncoder,  Addressable markerLabel) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderInsertDebugMarker$MH(), "unresolved symbol: wgpuCommandEncoderInsertDebugMarker");
        try {
            mh$.invokeExact(commandEncoder.address(), markerLabel.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuCommandEncoderPopDebugGroup$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderPopDebugGroup$MH(),"unresolved symbol: wgpuCommandEncoderPopDebugGroup");
    }
    public static void wgpuCommandEncoderPopDebugGroup ( Addressable commandEncoder) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderPopDebugGroup$MH(), "unresolved symbol: wgpuCommandEncoderPopDebugGroup");
        try {
            mh$.invokeExact(commandEncoder.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuCommandEncoderPushDebugGroup$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderPushDebugGroup$MH(),"unresolved symbol: wgpuCommandEncoderPushDebugGroup");
    }
    public static void wgpuCommandEncoderPushDebugGroup ( Addressable commandEncoder,  Addressable groupLabel) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderPushDebugGroup$MH(), "unresolved symbol: wgpuCommandEncoderPushDebugGroup");
        try {
            mh$.invokeExact(commandEncoder.address(), groupLabel.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuCommandEncoderResolveQuerySet$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderResolveQuerySet$MH(),"unresolved symbol: wgpuCommandEncoderResolveQuerySet");
    }
    public static void wgpuCommandEncoderResolveQuerySet ( Addressable commandEncoder,  Addressable querySet,  int firstQuery,  int queryCount,  Addressable destination,  long destinationOffset) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderResolveQuerySet$MH(), "unresolved symbol: wgpuCommandEncoderResolveQuerySet");
        try {
            mh$.invokeExact(commandEncoder.address(), querySet.address(), firstQuery, queryCount, destination.address(), destinationOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuCommandEncoderWriteTimestamp$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderWriteTimestamp$MH(),"unresolved symbol: wgpuCommandEncoderWriteTimestamp");
    }
    public static void wgpuCommandEncoderWriteTimestamp ( Addressable commandEncoder,  Addressable querySet,  int queryIndex) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuCommandEncoderWriteTimestamp$MH(), "unresolved symbol: wgpuCommandEncoderWriteTimestamp");
        try {
            mh$.invokeExact(commandEncoder.address(), querySet.address(), queryIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuComputePassEncoderBeginPipelineStatisticsQuery$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderBeginPipelineStatisticsQuery$MH(),"unresolved symbol: wgpuComputePassEncoderBeginPipelineStatisticsQuery");
    }
    public static void wgpuComputePassEncoderBeginPipelineStatisticsQuery ( Addressable computePassEncoder,  Addressable querySet,  int queryIndex) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderBeginPipelineStatisticsQuery$MH(), "unresolved symbol: wgpuComputePassEncoderBeginPipelineStatisticsQuery");
        try {
            mh$.invokeExact(computePassEncoder.address(), querySet.address(), queryIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuComputePassEncoderDispatch$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderDispatch$MH(),"unresolved symbol: wgpuComputePassEncoderDispatch");
    }
    public static void wgpuComputePassEncoderDispatch ( Addressable computePassEncoder,  int x,  int y,  int z) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderDispatch$MH(), "unresolved symbol: wgpuComputePassEncoderDispatch");
        try {
            mh$.invokeExact(computePassEncoder.address(), x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuComputePassEncoderDispatchIndirect$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderDispatchIndirect$MH(),"unresolved symbol: wgpuComputePassEncoderDispatchIndirect");
    }
    public static void wgpuComputePassEncoderDispatchIndirect ( Addressable computePassEncoder,  Addressable indirectBuffer,  long indirectOffset) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderDispatchIndirect$MH(), "unresolved symbol: wgpuComputePassEncoderDispatchIndirect");
        try {
            mh$.invokeExact(computePassEncoder.address(), indirectBuffer.address(), indirectOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuComputePassEncoderEndPass$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderEndPass$MH(),"unresolved symbol: wgpuComputePassEncoderEndPass");
    }
    public static void wgpuComputePassEncoderEndPass ( Addressable computePassEncoder) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderEndPass$MH(), "unresolved symbol: wgpuComputePassEncoderEndPass");
        try {
            mh$.invokeExact(computePassEncoder.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuComputePassEncoderEndPipelineStatisticsQuery$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderEndPipelineStatisticsQuery$MH(),"unresolved symbol: wgpuComputePassEncoderEndPipelineStatisticsQuery");
    }
    public static void wgpuComputePassEncoderEndPipelineStatisticsQuery ( Addressable computePassEncoder) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderEndPipelineStatisticsQuery$MH(), "unresolved symbol: wgpuComputePassEncoderEndPipelineStatisticsQuery");
        try {
            mh$.invokeExact(computePassEncoder.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuComputePassEncoderInsertDebugMarker$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderInsertDebugMarker$MH(),"unresolved symbol: wgpuComputePassEncoderInsertDebugMarker");
    }
    public static void wgpuComputePassEncoderInsertDebugMarker ( Addressable computePassEncoder,  Addressable markerLabel) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderInsertDebugMarker$MH(), "unresolved symbol: wgpuComputePassEncoderInsertDebugMarker");
        try {
            mh$.invokeExact(computePassEncoder.address(), markerLabel.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuComputePassEncoderPopDebugGroup$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderPopDebugGroup$MH(),"unresolved symbol: wgpuComputePassEncoderPopDebugGroup");
    }
    public static void wgpuComputePassEncoderPopDebugGroup ( Addressable computePassEncoder) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderPopDebugGroup$MH(), "unresolved symbol: wgpuComputePassEncoderPopDebugGroup");
        try {
            mh$.invokeExact(computePassEncoder.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuComputePassEncoderPushDebugGroup$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderPushDebugGroup$MH(),"unresolved symbol: wgpuComputePassEncoderPushDebugGroup");
    }
    public static void wgpuComputePassEncoderPushDebugGroup ( Addressable computePassEncoder,  Addressable groupLabel) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderPushDebugGroup$MH(), "unresolved symbol: wgpuComputePassEncoderPushDebugGroup");
        try {
            mh$.invokeExact(computePassEncoder.address(), groupLabel.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuComputePassEncoderSetBindGroup$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderSetBindGroup$MH(),"unresolved symbol: wgpuComputePassEncoderSetBindGroup");
    }
    public static void wgpuComputePassEncoderSetBindGroup ( Addressable computePassEncoder,  int groupIndex,  Addressable group,  int dynamicOffsetCount,  Addressable dynamicOffsets) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderSetBindGroup$MH(), "unresolved symbol: wgpuComputePassEncoderSetBindGroup");
        try {
            mh$.invokeExact(computePassEncoder.address(), groupIndex, group.address(), dynamicOffsetCount, dynamicOffsets.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuComputePassEncoderSetPipeline$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderSetPipeline$MH(),"unresolved symbol: wgpuComputePassEncoderSetPipeline");
    }
    public static void wgpuComputePassEncoderSetPipeline ( Addressable computePassEncoder,  Addressable pipeline) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderSetPipeline$MH(), "unresolved symbol: wgpuComputePassEncoderSetPipeline");
        try {
            mh$.invokeExact(computePassEncoder.address(), pipeline.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuComputePassEncoderWriteTimestamp$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderWriteTimestamp$MH(),"unresolved symbol: wgpuComputePassEncoderWriteTimestamp");
    }
    public static void wgpuComputePassEncoderWriteTimestamp ( Addressable computePassEncoder,  Addressable querySet,  int queryIndex) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePassEncoderWriteTimestamp$MH(), "unresolved symbol: wgpuComputePassEncoderWriteTimestamp");
        try {
            mh$.invokeExact(computePassEncoder.address(), querySet.address(), queryIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuComputePipelineGetBindGroupLayout$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePipelineGetBindGroupLayout$MH(),"unresolved symbol: wgpuComputePipelineGetBindGroupLayout");
    }
    public static MemoryAddress wgpuComputePipelineGetBindGroupLayout ( Addressable computePipeline,  int groupIndex) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuComputePipelineGetBindGroupLayout$MH(), "unresolved symbol: wgpuComputePipelineGetBindGroupLayout");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(computePipeline.address(), groupIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDeviceCreateBindGroup$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateBindGroup$MH(),"unresolved symbol: wgpuDeviceCreateBindGroup");
    }
    public static MemoryAddress wgpuDeviceCreateBindGroup ( Addressable device,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateBindGroup$MH(), "unresolved symbol: wgpuDeviceCreateBindGroup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(device.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDeviceCreateBindGroupLayout$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateBindGroupLayout$MH(),"unresolved symbol: wgpuDeviceCreateBindGroupLayout");
    }
    public static MemoryAddress wgpuDeviceCreateBindGroupLayout ( Addressable device,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateBindGroupLayout$MH(), "unresolved symbol: wgpuDeviceCreateBindGroupLayout");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(device.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDeviceCreateBuffer$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateBuffer$MH(),"unresolved symbol: wgpuDeviceCreateBuffer");
    }
    public static MemoryAddress wgpuDeviceCreateBuffer ( Addressable device,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateBuffer$MH(), "unresolved symbol: wgpuDeviceCreateBuffer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(device.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDeviceCreateCommandEncoder$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateCommandEncoder$MH(),"unresolved symbol: wgpuDeviceCreateCommandEncoder");
    }
    public static MemoryAddress wgpuDeviceCreateCommandEncoder ( Addressable device,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateCommandEncoder$MH(), "unresolved symbol: wgpuDeviceCreateCommandEncoder");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(device.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDeviceCreateComputePipeline$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateComputePipeline$MH(),"unresolved symbol: wgpuDeviceCreateComputePipeline");
    }
    public static MemoryAddress wgpuDeviceCreateComputePipeline ( Addressable device,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateComputePipeline$MH(), "unresolved symbol: wgpuDeviceCreateComputePipeline");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(device.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDeviceCreateComputePipelineAsync$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateComputePipelineAsync$MH(),"unresolved symbol: wgpuDeviceCreateComputePipelineAsync");
    }
    public static void wgpuDeviceCreateComputePipelineAsync ( Addressable device,  Addressable descriptor,  Addressable callback,  Addressable userdata) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateComputePipelineAsync$MH(), "unresolved symbol: wgpuDeviceCreateComputePipelineAsync");
        try {
            mh$.invokeExact(device.address(), descriptor.address(), callback.address(), userdata.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDeviceCreatePipelineLayout$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreatePipelineLayout$MH(),"unresolved symbol: wgpuDeviceCreatePipelineLayout");
    }
    public static MemoryAddress wgpuDeviceCreatePipelineLayout ( Addressable device,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreatePipelineLayout$MH(), "unresolved symbol: wgpuDeviceCreatePipelineLayout");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(device.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDeviceCreateQuerySet$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateQuerySet$MH(),"unresolved symbol: wgpuDeviceCreateQuerySet");
    }
    public static MemoryAddress wgpuDeviceCreateQuerySet ( Addressable device,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateQuerySet$MH(), "unresolved symbol: wgpuDeviceCreateQuerySet");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(device.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDeviceCreateRenderBundleEncoder$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateRenderBundleEncoder$MH(),"unresolved symbol: wgpuDeviceCreateRenderBundleEncoder");
    }
    public static MemoryAddress wgpuDeviceCreateRenderBundleEncoder ( Addressable device,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateRenderBundleEncoder$MH(), "unresolved symbol: wgpuDeviceCreateRenderBundleEncoder");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(device.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDeviceCreateRenderPipeline$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateRenderPipeline$MH(),"unresolved symbol: wgpuDeviceCreateRenderPipeline");
    }
    public static MemoryAddress wgpuDeviceCreateRenderPipeline ( Addressable device,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateRenderPipeline$MH(), "unresolved symbol: wgpuDeviceCreateRenderPipeline");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(device.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDeviceCreateRenderPipelineAsync$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateRenderPipelineAsync$MH(),"unresolved symbol: wgpuDeviceCreateRenderPipelineAsync");
    }
    public static void wgpuDeviceCreateRenderPipelineAsync ( Addressable device,  Addressable descriptor,  Addressable callback,  Addressable userdata) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateRenderPipelineAsync$MH(), "unresolved symbol: wgpuDeviceCreateRenderPipelineAsync");
        try {
            mh$.invokeExact(device.address(), descriptor.address(), callback.address(), userdata.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDeviceCreateSampler$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateSampler$MH(),"unresolved symbol: wgpuDeviceCreateSampler");
    }
    public static MemoryAddress wgpuDeviceCreateSampler ( Addressable device,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateSampler$MH(), "unresolved symbol: wgpuDeviceCreateSampler");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(device.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDeviceCreateShaderModule$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateShaderModule$MH(),"unresolved symbol: wgpuDeviceCreateShaderModule");
    }
    public static MemoryAddress wgpuDeviceCreateShaderModule ( Addressable device,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateShaderModule$MH(), "unresolved symbol: wgpuDeviceCreateShaderModule");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(device.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDeviceCreateSwapChain$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateSwapChain$MH(),"unresolved symbol: wgpuDeviceCreateSwapChain");
    }
    public static MemoryAddress wgpuDeviceCreateSwapChain ( Addressable device,  Addressable surface,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateSwapChain$MH(), "unresolved symbol: wgpuDeviceCreateSwapChain");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(device.address(), surface.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDeviceCreateTexture$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateTexture$MH(),"unresolved symbol: wgpuDeviceCreateTexture");
    }
    public static MemoryAddress wgpuDeviceCreateTexture ( Addressable device,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceCreateTexture$MH(), "unresolved symbol: wgpuDeviceCreateTexture");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(device.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDeviceGetQueue$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceGetQueue$MH(),"unresolved symbol: wgpuDeviceGetQueue");
    }
    public static MemoryAddress wgpuDeviceGetQueue ( Addressable device) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceGetQueue$MH(), "unresolved symbol: wgpuDeviceGetQueue");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(device.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDevicePopErrorScope$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDevicePopErrorScope$MH(),"unresolved symbol: wgpuDevicePopErrorScope");
    }
    public static byte wgpuDevicePopErrorScope ( Addressable device,  Addressable callback,  Addressable userdata) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDevicePopErrorScope$MH(), "unresolved symbol: wgpuDevicePopErrorScope");
        try {
            return (byte)mh$.invokeExact(device.address(), callback.address(), userdata.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDevicePushErrorScope$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDevicePushErrorScope$MH(),"unresolved symbol: wgpuDevicePushErrorScope");
    }
    public static void wgpuDevicePushErrorScope ( Addressable device,  int filter) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDevicePushErrorScope$MH(), "unresolved symbol: wgpuDevicePushErrorScope");
        try {
            mh$.invokeExact(device.address(), filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDeviceSetDeviceLostCallback$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceSetDeviceLostCallback$MH(),"unresolved symbol: wgpuDeviceSetDeviceLostCallback");
    }
    public static void wgpuDeviceSetDeviceLostCallback ( Addressable device,  Addressable callback,  Addressable userdata) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceSetDeviceLostCallback$MH(), "unresolved symbol: wgpuDeviceSetDeviceLostCallback");
        try {
            mh$.invokeExact(device.address(), callback.address(), userdata.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuDeviceSetUncapturedErrorCallback$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceSetUncapturedErrorCallback$MH(),"unresolved symbol: wgpuDeviceSetUncapturedErrorCallback");
    }
    public static void wgpuDeviceSetUncapturedErrorCallback ( Addressable device,  Addressable callback,  Addressable userdata) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDeviceSetUncapturedErrorCallback$MH(), "unresolved symbol: wgpuDeviceSetUncapturedErrorCallback");
        try {
            mh$.invokeExact(device.address(), callback.address(), userdata.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuInstanceCreateSurface$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuInstanceCreateSurface$MH(),"unresolved symbol: wgpuInstanceCreateSurface");
    }
    public static MemoryAddress wgpuInstanceCreateSurface ( Addressable instance,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuInstanceCreateSurface$MH(), "unresolved symbol: wgpuInstanceCreateSurface");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(instance.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuInstanceProcessEvents$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuInstanceProcessEvents$MH(),"unresolved symbol: wgpuInstanceProcessEvents");
    }
    public static void wgpuInstanceProcessEvents ( Addressable instance) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuInstanceProcessEvents$MH(), "unresolved symbol: wgpuInstanceProcessEvents");
        try {
            mh$.invokeExact(instance.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuInstanceRequestAdapter$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuInstanceRequestAdapter$MH(),"unresolved symbol: wgpuInstanceRequestAdapter");
    }
    public static void wgpuInstanceRequestAdapter ( Addressable instance,  Addressable options,  Addressable callback,  Addressable userdata) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuInstanceRequestAdapter$MH(), "unresolved symbol: wgpuInstanceRequestAdapter");
        try {
            mh$.invokeExact(instance.address(), options.address(), callback.address(), userdata.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuQuerySetDestroy$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuQuerySetDestroy$MH(),"unresolved symbol: wgpuQuerySetDestroy");
    }
    public static void wgpuQuerySetDestroy ( Addressable querySet) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuQuerySetDestroy$MH(), "unresolved symbol: wgpuQuerySetDestroy");
        try {
            mh$.invokeExact(querySet.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuQueueOnSubmittedWorkDone$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuQueueOnSubmittedWorkDone$MH(),"unresolved symbol: wgpuQueueOnSubmittedWorkDone");
    }
    public static void wgpuQueueOnSubmittedWorkDone ( Addressable queue,  long signalValue,  Addressable callback,  Addressable userdata) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuQueueOnSubmittedWorkDone$MH(), "unresolved symbol: wgpuQueueOnSubmittedWorkDone");
        try {
            mh$.invokeExact(queue.address(), signalValue, callback.address(), userdata.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuQueueSubmit$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuQueueSubmit$MH(),"unresolved symbol: wgpuQueueSubmit");
    }
    public static void wgpuQueueSubmit ( Addressable queue,  int commandCount,  Addressable commands) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuQueueSubmit$MH(), "unresolved symbol: wgpuQueueSubmit");
        try {
            mh$.invokeExact(queue.address(), commandCount, commands.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuQueueWriteBuffer$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuQueueWriteBuffer$MH(),"unresolved symbol: wgpuQueueWriteBuffer");
    }
    public static void wgpuQueueWriteBuffer ( Addressable queue,  Addressable buffer,  long bufferOffset,  Addressable data,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuQueueWriteBuffer$MH(), "unresolved symbol: wgpuQueueWriteBuffer");
        try {
            mh$.invokeExact(queue.address(), buffer.address(), bufferOffset, data.address(), size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuQueueWriteTexture$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuQueueWriteTexture$MH(),"unresolved symbol: wgpuQueueWriteTexture");
    }
    public static void wgpuQueueWriteTexture ( Addressable queue,  Addressable destination,  Addressable data,  long dataSize,  Addressable dataLayout,  Addressable writeSize) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuQueueWriteTexture$MH(), "unresolved symbol: wgpuQueueWriteTexture");
        try {
            mh$.invokeExact(queue.address(), destination.address(), data.address(), dataSize, dataLayout.address(), writeSize.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderBundleEncoderDraw$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderDraw$MH(),"unresolved symbol: wgpuRenderBundleEncoderDraw");
    }
    public static void wgpuRenderBundleEncoderDraw ( Addressable renderBundleEncoder,  int vertexCount,  int instanceCount,  int firstVertex,  int firstInstance) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderDraw$MH(), "unresolved symbol: wgpuRenderBundleEncoderDraw");
        try {
            mh$.invokeExact(renderBundleEncoder.address(), vertexCount, instanceCount, firstVertex, firstInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderBundleEncoderDrawIndexed$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderDrawIndexed$MH(),"unresolved symbol: wgpuRenderBundleEncoderDrawIndexed");
    }
    public static void wgpuRenderBundleEncoderDrawIndexed ( Addressable renderBundleEncoder,  int indexCount,  int instanceCount,  int firstIndex,  int baseVertex,  int firstInstance) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderDrawIndexed$MH(), "unresolved symbol: wgpuRenderBundleEncoderDrawIndexed");
        try {
            mh$.invokeExact(renderBundleEncoder.address(), indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderBundleEncoderDrawIndexedIndirect$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderDrawIndexedIndirect$MH(),"unresolved symbol: wgpuRenderBundleEncoderDrawIndexedIndirect");
    }
    public static void wgpuRenderBundleEncoderDrawIndexedIndirect ( Addressable renderBundleEncoder,  Addressable indirectBuffer,  long indirectOffset) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderDrawIndexedIndirect$MH(), "unresolved symbol: wgpuRenderBundleEncoderDrawIndexedIndirect");
        try {
            mh$.invokeExact(renderBundleEncoder.address(), indirectBuffer.address(), indirectOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderBundleEncoderDrawIndirect$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderDrawIndirect$MH(),"unresolved symbol: wgpuRenderBundleEncoderDrawIndirect");
    }
    public static void wgpuRenderBundleEncoderDrawIndirect ( Addressable renderBundleEncoder,  Addressable indirectBuffer,  long indirectOffset) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderDrawIndirect$MH(), "unresolved symbol: wgpuRenderBundleEncoderDrawIndirect");
        try {
            mh$.invokeExact(renderBundleEncoder.address(), indirectBuffer.address(), indirectOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderBundleEncoderFinish$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderFinish$MH(),"unresolved symbol: wgpuRenderBundleEncoderFinish");
    }
    public static MemoryAddress wgpuRenderBundleEncoderFinish ( Addressable renderBundleEncoder,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderFinish$MH(), "unresolved symbol: wgpuRenderBundleEncoderFinish");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(renderBundleEncoder.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderBundleEncoderInsertDebugMarker$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderInsertDebugMarker$MH(),"unresolved symbol: wgpuRenderBundleEncoderInsertDebugMarker");
    }
    public static void wgpuRenderBundleEncoderInsertDebugMarker ( Addressable renderBundleEncoder,  Addressable markerLabel) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderInsertDebugMarker$MH(), "unresolved symbol: wgpuRenderBundleEncoderInsertDebugMarker");
        try {
            mh$.invokeExact(renderBundleEncoder.address(), markerLabel.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderBundleEncoderPopDebugGroup$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderPopDebugGroup$MH(),"unresolved symbol: wgpuRenderBundleEncoderPopDebugGroup");
    }
    public static void wgpuRenderBundleEncoderPopDebugGroup ( Addressable renderBundleEncoder) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderPopDebugGroup$MH(), "unresolved symbol: wgpuRenderBundleEncoderPopDebugGroup");
        try {
            mh$.invokeExact(renderBundleEncoder.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderBundleEncoderPushDebugGroup$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderPushDebugGroup$MH(),"unresolved symbol: wgpuRenderBundleEncoderPushDebugGroup");
    }
    public static void wgpuRenderBundleEncoderPushDebugGroup ( Addressable renderBundleEncoder,  Addressable groupLabel) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderPushDebugGroup$MH(), "unresolved symbol: wgpuRenderBundleEncoderPushDebugGroup");
        try {
            mh$.invokeExact(renderBundleEncoder.address(), groupLabel.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderBundleEncoderSetBindGroup$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderSetBindGroup$MH(),"unresolved symbol: wgpuRenderBundleEncoderSetBindGroup");
    }
    public static void wgpuRenderBundleEncoderSetBindGroup ( Addressable renderBundleEncoder,  int groupIndex,  Addressable group,  int dynamicOffsetCount,  Addressable dynamicOffsets) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderSetBindGroup$MH(), "unresolved symbol: wgpuRenderBundleEncoderSetBindGroup");
        try {
            mh$.invokeExact(renderBundleEncoder.address(), groupIndex, group.address(), dynamicOffsetCount, dynamicOffsets.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderBundleEncoderSetIndexBuffer$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderSetIndexBuffer$MH(),"unresolved symbol: wgpuRenderBundleEncoderSetIndexBuffer");
    }
    public static void wgpuRenderBundleEncoderSetIndexBuffer ( Addressable renderBundleEncoder,  Addressable buffer,  int format,  long offset,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderSetIndexBuffer$MH(), "unresolved symbol: wgpuRenderBundleEncoderSetIndexBuffer");
        try {
            mh$.invokeExact(renderBundleEncoder.address(), buffer.address(), format, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderBundleEncoderSetPipeline$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderSetPipeline$MH(),"unresolved symbol: wgpuRenderBundleEncoderSetPipeline");
    }
    public static void wgpuRenderBundleEncoderSetPipeline ( Addressable renderBundleEncoder,  Addressable pipeline) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderSetPipeline$MH(), "unresolved symbol: wgpuRenderBundleEncoderSetPipeline");
        try {
            mh$.invokeExact(renderBundleEncoder.address(), pipeline.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderBundleEncoderSetVertexBuffer$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderSetVertexBuffer$MH(),"unresolved symbol: wgpuRenderBundleEncoderSetVertexBuffer");
    }
    public static void wgpuRenderBundleEncoderSetVertexBuffer ( Addressable renderBundleEncoder,  int slot,  Addressable buffer,  long offset,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderBundleEncoderSetVertexBuffer$MH(), "unresolved symbol: wgpuRenderBundleEncoderSetVertexBuffer");
        try {
            mh$.invokeExact(renderBundleEncoder.address(), slot, buffer.address(), offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderBeginOcclusionQuery$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderBeginOcclusionQuery$MH(),"unresolved symbol: wgpuRenderPassEncoderBeginOcclusionQuery");
    }
    public static void wgpuRenderPassEncoderBeginOcclusionQuery ( Addressable renderPassEncoder,  int queryIndex) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderBeginOcclusionQuery$MH(), "unresolved symbol: wgpuRenderPassEncoderBeginOcclusionQuery");
        try {
            mh$.invokeExact(renderPassEncoder.address(), queryIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderBeginPipelineStatisticsQuery$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderBeginPipelineStatisticsQuery$MH(),"unresolved symbol: wgpuRenderPassEncoderBeginPipelineStatisticsQuery");
    }
    public static void wgpuRenderPassEncoderBeginPipelineStatisticsQuery ( Addressable renderPassEncoder,  Addressable querySet,  int queryIndex) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderBeginPipelineStatisticsQuery$MH(), "unresolved symbol: wgpuRenderPassEncoderBeginPipelineStatisticsQuery");
        try {
            mh$.invokeExact(renderPassEncoder.address(), querySet.address(), queryIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderDraw$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderDraw$MH(),"unresolved symbol: wgpuRenderPassEncoderDraw");
    }
    public static void wgpuRenderPassEncoderDraw ( Addressable renderPassEncoder,  int vertexCount,  int instanceCount,  int firstVertex,  int firstInstance) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderDraw$MH(), "unresolved symbol: wgpuRenderPassEncoderDraw");
        try {
            mh$.invokeExact(renderPassEncoder.address(), vertexCount, instanceCount, firstVertex, firstInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderDrawIndexed$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderDrawIndexed$MH(),"unresolved symbol: wgpuRenderPassEncoderDrawIndexed");
    }
    public static void wgpuRenderPassEncoderDrawIndexed ( Addressable renderPassEncoder,  int indexCount,  int instanceCount,  int firstIndex,  int baseVertex,  int firstInstance) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderDrawIndexed$MH(), "unresolved symbol: wgpuRenderPassEncoderDrawIndexed");
        try {
            mh$.invokeExact(renderPassEncoder.address(), indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderDrawIndexedIndirect$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderDrawIndexedIndirect$MH(),"unresolved symbol: wgpuRenderPassEncoderDrawIndexedIndirect");
    }
    public static void wgpuRenderPassEncoderDrawIndexedIndirect ( Addressable renderPassEncoder,  Addressable indirectBuffer,  long indirectOffset) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderDrawIndexedIndirect$MH(), "unresolved symbol: wgpuRenderPassEncoderDrawIndexedIndirect");
        try {
            mh$.invokeExact(renderPassEncoder.address(), indirectBuffer.address(), indirectOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderDrawIndirect$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderDrawIndirect$MH(),"unresolved symbol: wgpuRenderPassEncoderDrawIndirect");
    }
    public static void wgpuRenderPassEncoderDrawIndirect ( Addressable renderPassEncoder,  Addressable indirectBuffer,  long indirectOffset) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderDrawIndirect$MH(), "unresolved symbol: wgpuRenderPassEncoderDrawIndirect");
        try {
            mh$.invokeExact(renderPassEncoder.address(), indirectBuffer.address(), indirectOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderEndOcclusionQuery$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderEndOcclusionQuery$MH(),"unresolved symbol: wgpuRenderPassEncoderEndOcclusionQuery");
    }
    public static void wgpuRenderPassEncoderEndOcclusionQuery ( Addressable renderPassEncoder) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderEndOcclusionQuery$MH(), "unresolved symbol: wgpuRenderPassEncoderEndOcclusionQuery");
        try {
            mh$.invokeExact(renderPassEncoder.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderEndPass$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderEndPass$MH(),"unresolved symbol: wgpuRenderPassEncoderEndPass");
    }
    public static void wgpuRenderPassEncoderEndPass ( Addressable renderPassEncoder) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderEndPass$MH(), "unresolved symbol: wgpuRenderPassEncoderEndPass");
        try {
            mh$.invokeExact(renderPassEncoder.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderEndPipelineStatisticsQuery$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderEndPipelineStatisticsQuery$MH(),"unresolved symbol: wgpuRenderPassEncoderEndPipelineStatisticsQuery");
    }
    public static void wgpuRenderPassEncoderEndPipelineStatisticsQuery ( Addressable renderPassEncoder) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderEndPipelineStatisticsQuery$MH(), "unresolved symbol: wgpuRenderPassEncoderEndPipelineStatisticsQuery");
        try {
            mh$.invokeExact(renderPassEncoder.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderExecuteBundles$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderExecuteBundles$MH(),"unresolved symbol: wgpuRenderPassEncoderExecuteBundles");
    }
    public static void wgpuRenderPassEncoderExecuteBundles ( Addressable renderPassEncoder,  int bundlesCount,  Addressable bundles) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderExecuteBundles$MH(), "unresolved symbol: wgpuRenderPassEncoderExecuteBundles");
        try {
            mh$.invokeExact(renderPassEncoder.address(), bundlesCount, bundles.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderInsertDebugMarker$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderInsertDebugMarker$MH(),"unresolved symbol: wgpuRenderPassEncoderInsertDebugMarker");
    }
    public static void wgpuRenderPassEncoderInsertDebugMarker ( Addressable renderPassEncoder,  Addressable markerLabel) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderInsertDebugMarker$MH(), "unresolved symbol: wgpuRenderPassEncoderInsertDebugMarker");
        try {
            mh$.invokeExact(renderPassEncoder.address(), markerLabel.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderPopDebugGroup$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderPopDebugGroup$MH(),"unresolved symbol: wgpuRenderPassEncoderPopDebugGroup");
    }
    public static void wgpuRenderPassEncoderPopDebugGroup ( Addressable renderPassEncoder) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderPopDebugGroup$MH(), "unresolved symbol: wgpuRenderPassEncoderPopDebugGroup");
        try {
            mh$.invokeExact(renderPassEncoder.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderPushDebugGroup$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderPushDebugGroup$MH(),"unresolved symbol: wgpuRenderPassEncoderPushDebugGroup");
    }
    public static void wgpuRenderPassEncoderPushDebugGroup ( Addressable renderPassEncoder,  Addressable groupLabel) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderPushDebugGroup$MH(), "unresolved symbol: wgpuRenderPassEncoderPushDebugGroup");
        try {
            mh$.invokeExact(renderPassEncoder.address(), groupLabel.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderSetBindGroup$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderSetBindGroup$MH(),"unresolved symbol: wgpuRenderPassEncoderSetBindGroup");
    }
    public static void wgpuRenderPassEncoderSetBindGroup ( Addressable renderPassEncoder,  int groupIndex,  Addressable group,  int dynamicOffsetCount,  Addressable dynamicOffsets) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderSetBindGroup$MH(), "unresolved symbol: wgpuRenderPassEncoderSetBindGroup");
        try {
            mh$.invokeExact(renderPassEncoder.address(), groupIndex, group.address(), dynamicOffsetCount, dynamicOffsets.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderSetBlendColor$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderSetBlendColor$MH(),"unresolved symbol: wgpuRenderPassEncoderSetBlendColor");
    }
    public static void wgpuRenderPassEncoderSetBlendColor ( Addressable renderPassEncoder,  Addressable color) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderSetBlendColor$MH(), "unresolved symbol: wgpuRenderPassEncoderSetBlendColor");
        try {
            mh$.invokeExact(renderPassEncoder.address(), color.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderSetIndexBuffer$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderSetIndexBuffer$MH(),"unresolved symbol: wgpuRenderPassEncoderSetIndexBuffer");
    }
    public static void wgpuRenderPassEncoderSetIndexBuffer ( Addressable renderPassEncoder,  Addressable buffer,  int format,  long offset,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderSetIndexBuffer$MH(), "unresolved symbol: wgpuRenderPassEncoderSetIndexBuffer");
        try {
            mh$.invokeExact(renderPassEncoder.address(), buffer.address(), format, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderSetPipeline$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderSetPipeline$MH(),"unresolved symbol: wgpuRenderPassEncoderSetPipeline");
    }
    public static void wgpuRenderPassEncoderSetPipeline ( Addressable renderPassEncoder,  Addressable pipeline) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderSetPipeline$MH(), "unresolved symbol: wgpuRenderPassEncoderSetPipeline");
        try {
            mh$.invokeExact(renderPassEncoder.address(), pipeline.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderSetScissorRect$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderSetScissorRect$MH(),"unresolved symbol: wgpuRenderPassEncoderSetScissorRect");
    }
    public static void wgpuRenderPassEncoderSetScissorRect ( Addressable renderPassEncoder,  int x,  int y,  int width,  int height) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderSetScissorRect$MH(), "unresolved symbol: wgpuRenderPassEncoderSetScissorRect");
        try {
            mh$.invokeExact(renderPassEncoder.address(), x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderSetStencilReference$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderSetStencilReference$MH(),"unresolved symbol: wgpuRenderPassEncoderSetStencilReference");
    }
    public static void wgpuRenderPassEncoderSetStencilReference ( Addressable renderPassEncoder,  int reference) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderSetStencilReference$MH(), "unresolved symbol: wgpuRenderPassEncoderSetStencilReference");
        try {
            mh$.invokeExact(renderPassEncoder.address(), reference);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderSetVertexBuffer$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderSetVertexBuffer$MH(),"unresolved symbol: wgpuRenderPassEncoderSetVertexBuffer");
    }
    public static void wgpuRenderPassEncoderSetVertexBuffer ( Addressable renderPassEncoder,  int slot,  Addressable buffer,  long offset,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderSetVertexBuffer$MH(), "unresolved symbol: wgpuRenderPassEncoderSetVertexBuffer");
        try {
            mh$.invokeExact(renderPassEncoder.address(), slot, buffer.address(), offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderSetViewport$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderSetViewport$MH(),"unresolved symbol: wgpuRenderPassEncoderSetViewport");
    }
    public static void wgpuRenderPassEncoderSetViewport ( Addressable renderPassEncoder,  float x,  float y,  float width,  float height,  float minDepth,  float maxDepth) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderSetViewport$MH(), "unresolved symbol: wgpuRenderPassEncoderSetViewport");
        try {
            mh$.invokeExact(renderPassEncoder.address(), x, y, width, height, minDepth, maxDepth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderWriteTimestamp$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderWriteTimestamp$MH(),"unresolved symbol: wgpuRenderPassEncoderWriteTimestamp");
    }
    public static void wgpuRenderPassEncoderWriteTimestamp ( Addressable renderPassEncoder,  Addressable querySet,  int queryIndex) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderWriteTimestamp$MH(), "unresolved symbol: wgpuRenderPassEncoderWriteTimestamp");
        try {
            mh$.invokeExact(renderPassEncoder.address(), querySet.address(), queryIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPipelineGetBindGroupLayout$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPipelineGetBindGroupLayout$MH(),"unresolved symbol: wgpuRenderPipelineGetBindGroupLayout");
    }
    public static MemoryAddress wgpuRenderPipelineGetBindGroupLayout ( Addressable renderPipeline,  int groupIndex) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPipelineGetBindGroupLayout$MH(), "unresolved symbol: wgpuRenderPipelineGetBindGroupLayout");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(renderPipeline.address(), groupIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuSurfaceGetPreferredFormat$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuSurfaceGetPreferredFormat$MH(),"unresolved symbol: wgpuSurfaceGetPreferredFormat");
    }
    public static void wgpuSurfaceGetPreferredFormat ( Addressable surface,  Addressable adapter,  Addressable callback,  Addressable userdata) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuSurfaceGetPreferredFormat$MH(), "unresolved symbol: wgpuSurfaceGetPreferredFormat");
        try {
            mh$.invokeExact(surface.address(), adapter.address(), callback.address(), userdata.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuSwapChainGetCurrentTextureView$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuSwapChainGetCurrentTextureView$MH(),"unresolved symbol: wgpuSwapChainGetCurrentTextureView");
    }
    public static MemoryAddress wgpuSwapChainGetCurrentTextureView ( Addressable swapChain) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuSwapChainGetCurrentTextureView$MH(), "unresolved symbol: wgpuSwapChainGetCurrentTextureView");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(swapChain.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuSwapChainPresent$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuSwapChainPresent$MH(),"unresolved symbol: wgpuSwapChainPresent");
    }
    public static void wgpuSwapChainPresent ( Addressable swapChain) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuSwapChainPresent$MH(), "unresolved symbol: wgpuSwapChainPresent");
        try {
            mh$.invokeExact(swapChain.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuTextureCreateView$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuTextureCreateView$MH(),"unresolved symbol: wgpuTextureCreateView");
    }
    public static MemoryAddress wgpuTextureCreateView ( Addressable texture,  Addressable descriptor) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuTextureCreateView$MH(), "unresolved symbol: wgpuTextureCreateView");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(texture.address(), descriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuTextureDestroy$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuTextureDestroy$MH(),"unresolved symbol: wgpuTextureDestroy");
    }
    public static void wgpuTextureDestroy ( Addressable texture) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuTextureDestroy$MH(), "unresolved symbol: wgpuTextureDestroy");
        try {
            mh$.invokeExact(texture.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  int WGPUSType_DeviceExtras() {
        return wgpu_h_constants_1.WGPUSType_DeviceExtras();
    }
    public static  int WGPUNativeSType_Force32() {
        return wgpu_h_constants_1.WGPUNativeSType_Force32();
    }
    public static class WGPUDeviceExtras {

        /* package-private */ WGPUDeviceExtras() {}
        public static MemoryLayout $LAYOUT() {
            return wgpu_h_constants_1.WGPUDeviceExtras$struct$LAYOUT();
        }
        public static MemorySegment chain$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static VarHandle maxBindGroups$VH() {
            return wgpu_h_constants_1.WGPUDeviceExtras$maxBindGroups$VH();
        }
        public static  int maxBindGroups$get(MemorySegment seg) {
            return (int)wgpu_h_constants_1.WGPUDeviceExtras$maxBindGroups$VH().get(seg);
        }
        public static  int maxBindGroups$get(MemorySegment seg, long index) {
            return (int)wgpu_h_constants_1.WGPUDeviceExtras$maxBindGroups$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void maxBindGroups$set( MemorySegment seg, int x) {
            wgpu_h_constants_1.WGPUDeviceExtras$maxBindGroups$VH().set(seg, x);
        }
        public static void maxBindGroups$set(MemorySegment seg, long index, int x) {
            wgpu_h_constants_1.WGPUDeviceExtras$maxBindGroups$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle label$VH() {
            return wgpu_h_constants_1.WGPUDeviceExtras$label$VH();
        }
        public static  MemoryAddress label$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUDeviceExtras$label$VH().get(seg);
        }
        public static  MemoryAddress label$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUDeviceExtras$label$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void label$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUDeviceExtras$label$VH().set(seg, x);
        }
        public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUDeviceExtras$label$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tracePath$VH() {
            return wgpu_h_constants_1.WGPUDeviceExtras$tracePath$VH();
        }
        public static  MemoryAddress tracePath$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUDeviceExtras$tracePath$VH().get(seg);
        }
        public static  MemoryAddress tracePath$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)wgpu_h_constants_1.WGPUDeviceExtras$tracePath$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tracePath$set( MemorySegment seg, MemoryAddress x) {
            wgpu_h_constants_1.WGPUDeviceExtras$tracePath$VH().set(seg, x);
        }
        public static void tracePath$set(MemorySegment seg, long index, MemoryAddress x) {
            wgpu_h_constants_1.WGPUDeviceExtras$tracePath$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static  int WGPULogLevel_Off() {
        return wgpu_h_constants_1.WGPULogLevel_Off();
    }
    public static  int WGPULogLevel_Error() {
        return wgpu_h_constants_1.WGPULogLevel_Error();
    }
    public static  int WGPULogLevel_Warn() {
        return wgpu_h_constants_1.WGPULogLevel_Warn();
    }
    public static  int WGPULogLevel_Info() {
        return wgpu_h_constants_1.WGPULogLevel_Info();
    }
    public static  int WGPULogLevel_Debug() {
        return wgpu_h_constants_1.WGPULogLevel_Debug();
    }
    public static  int WGPULogLevel_Trace() {
        return wgpu_h_constants_1.WGPULogLevel_Trace();
    }
    public static  int WGPULogLevel_Force32() {
        return wgpu_h_constants_1.WGPULogLevel_Force32();
    }
    public static interface WGPULogCallback {

        void apply(int x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  MemorySegment allocate(WGPULogCallback fi) {
            return RuntimeHelper.upcallStub(WGPULogCallback.class, fi, wgpu_h_constants_1.WGPULogCallback$FUNC(), "(ILjdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(WGPULogCallback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static  MethodHandle wgpuDevicePoll$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDevicePoll$MH(),"unresolved symbol: wgpuDevicePoll");
    }
    public static void wgpuDevicePoll ( Addressable device,  byte force_wait) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuDevicePoll$MH(), "unresolved symbol: wgpuDevicePoll");
        try {
            mh$.invokeExact(device.address(), force_wait);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuSetLogCallback$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuSetLogCallback$MH(),"unresolved symbol: wgpuSetLogCallback");
    }
    public static void wgpuSetLogCallback ( Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuSetLogCallback$MH(), "unresolved symbol: wgpuSetLogCallback");
        try {
            mh$.invokeExact(callback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuSetLogLevel$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuSetLogLevel$MH(),"unresolved symbol: wgpuSetLogLevel");
    }
    public static void wgpuSetLogLevel ( int level) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuSetLogLevel$MH(), "unresolved symbol: wgpuSetLogLevel");
        try {
            mh$.invokeExact(level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle wgpuRenderPassEncoderSetPushConstants$MH() {
        return RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderSetPushConstants$MH(),"unresolved symbol: wgpuRenderPassEncoderSetPushConstants");
    }
    public static void wgpuRenderPassEncoderSetPushConstants ( Addressable encoder,  int stages,  int offset,  int sizeBytes,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(wgpu_h_constants_1.wgpuRenderPassEncoderSetPushConstants$MH(), "unresolved symbol: wgpuRenderPassEncoderSetPushConstants");
        try {
            mh$.invokeExact(encoder.address(), stages, offset, sizeBytes, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  int _VCRUNTIME_DISABLED_WARNINGS() {
        return wgpu_h_constants_1._VCRUNTIME_DISABLED_WARNINGS();
    }
    public static  MemoryAddress NULL() {
        return wgpu_h_constants_1.NULL();
    }
    public static  int INT8_MIN() {
        return wgpu_h_constants_1.INT8_MIN();
    }
    public static  int INT16_MIN() {
        return wgpu_h_constants_1.INT16_MIN();
    }
    public static  int INT32_MIN() {
        return wgpu_h_constants_1.INT32_MIN();
    }
    public static  long INT64_MIN() {
        return wgpu_h_constants_1.INT64_MIN();
    }
    public static  byte INT8_MAX() {
        return wgpu_h_constants_1.INT8_MAX();
    }
    public static  short INT16_MAX() {
        return wgpu_h_constants_1.INT16_MAX();
    }
    public static  int INT32_MAX() {
        return wgpu_h_constants_1.INT32_MAX();
    }
    public static  long INT64_MAX() {
        return wgpu_h_constants_1.INT64_MAX();
    }
    public static  byte UINT8_MAX() {
        return wgpu_h_constants_1.UINT8_MAX();
    }
    public static  short UINT16_MAX() {
        return wgpu_h_constants_1.UINT16_MAX();
    }
    public static  int UINT32_MAX() {
        return wgpu_h_constants_1.UINT32_MAX();
    }
    public static  long UINT64_MAX() {
        return wgpu_h_constants_1.UINT64_MAX();
    }
    public static  int INT_LEAST8_MIN() {
        return wgpu_h_constants_1.INT_LEAST8_MIN();
    }
    public static  int INT_LEAST16_MIN() {
        return wgpu_h_constants_1.INT_LEAST16_MIN();
    }
    public static  int INT_LEAST32_MIN() {
        return wgpu_h_constants_1.INT_LEAST32_MIN();
    }
    public static  long INT_LEAST64_MIN() {
        return wgpu_h_constants_1.INT_LEAST64_MIN();
    }
    public static  byte INT_LEAST8_MAX() {
        return wgpu_h_constants_1.INT_LEAST8_MAX();
    }
    public static  short INT_LEAST16_MAX() {
        return wgpu_h_constants_1.INT_LEAST16_MAX();
    }
    public static  int INT_LEAST32_MAX() {
        return wgpu_h_constants_1.INT_LEAST32_MAX();
    }
    public static  long INT_LEAST64_MAX() {
        return wgpu_h_constants_1.INT_LEAST64_MAX();
    }
    public static  byte UINT_LEAST8_MAX() {
        return wgpu_h_constants_1.UINT_LEAST8_MAX();
    }
    public static  short UINT_LEAST16_MAX() {
        return wgpu_h_constants_1.UINT_LEAST16_MAX();
    }
    public static  int UINT_LEAST32_MAX() {
        return wgpu_h_constants_1.UINT_LEAST32_MAX();
    }
    public static  long UINT_LEAST64_MAX() {
        return wgpu_h_constants_1.UINT_LEAST64_MAX();
    }
    public static  int INT_FAST8_MIN() {
        return wgpu_h_constants_1.INT_FAST8_MIN();
    }
    public static  int INT_FAST16_MIN() {
        return wgpu_h_constants_1.INT_FAST16_MIN();
    }
    public static  int INT_FAST32_MIN() {
        return wgpu_h_constants_1.INT_FAST32_MIN();
    }
    public static  long INT_FAST64_MIN() {
        return wgpu_h_constants_1.INT_FAST64_MIN();
    }
    public static  byte INT_FAST8_MAX() {
        return wgpu_h_constants_1.INT_FAST8_MAX();
    }
    public static  int INT_FAST16_MAX() {
        return wgpu_h_constants_1.INT_FAST16_MAX();
    }
    public static  int INT_FAST32_MAX() {
        return wgpu_h_constants_1.INT_FAST32_MAX();
    }
    public static  long INT_FAST64_MAX() {
        return wgpu_h_constants_1.INT_FAST64_MAX();
    }
    public static  byte UINT_FAST8_MAX() {
        return wgpu_h_constants_1.UINT_FAST8_MAX();
    }
    public static  int UINT_FAST16_MAX() {
        return wgpu_h_constants_1.UINT_FAST16_MAX();
    }
    public static  int UINT_FAST32_MAX() {
        return wgpu_h_constants_1.UINT_FAST32_MAX();
    }
    public static  long UINT_FAST64_MAX() {
        return wgpu_h_constants_1.UINT_FAST64_MAX();
    }
    public static  long INTPTR_MIN() {
        return wgpu_h_constants_1.INTPTR_MIN();
    }
    public static  long INTPTR_MAX() {
        return wgpu_h_constants_1.INTPTR_MAX();
    }
    public static  long UINTPTR_MAX() {
        return wgpu_h_constants_1.UINTPTR_MAX();
    }
    public static  long INTMAX_MIN() {
        return wgpu_h_constants_1.INTMAX_MIN();
    }
    public static  long INTMAX_MAX() {
        return wgpu_h_constants_1.INTMAX_MAX();
    }
    public static  long UINTMAX_MAX() {
        return wgpu_h_constants_1.UINTMAX_MAX();
    }
    public static  long PTRDIFF_MIN() {
        return wgpu_h_constants_1.PTRDIFF_MIN();
    }
    public static  long PTRDIFF_MAX() {
        return wgpu_h_constants_1.PTRDIFF_MAX();
    }
    public static  long SIZE_MAX() {
        return wgpu_h_constants_1.SIZE_MAX();
    }
    public static  int SIG_ATOMIC_MIN() {
        return wgpu_h_constants_1.SIG_ATOMIC_MIN();
    }
    public static  int SIG_ATOMIC_MAX() {
        return wgpu_h_constants_1.SIG_ATOMIC_MAX();
    }
    public static  long WGPU_WHOLE_SIZE() {
        return wgpu_h_constants_1.WGPU_WHOLE_SIZE();
    }
    public static  int WGPU_COPY_STRIDE_UNDEFINED() {
        return wgpu_h_constants_1.WGPU_COPY_STRIDE_UNDEFINED();
    }
}


