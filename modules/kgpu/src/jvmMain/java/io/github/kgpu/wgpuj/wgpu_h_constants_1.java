// Generated by jextract

package io.github.kgpu.wgpuj;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;

import jdk.incubator.foreign.*;

import static jdk.incubator.foreign.CLinker.*;
class wgpu_h_constants_1 extends wgpu_h_constants_0 {

    /* package-private */ wgpu_h_constants_1() {}
    static final MemoryLayout WGPUSwapChainDescriptor$presentMode$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUSwapChainDescriptor$presentMode$LAYOUT() { return WGPUSwapChainDescriptor$presentMode$LAYOUT_; }

    static final VarHandle WGPUSwapChainDescriptor$presentMode$VH_ = WGPUSwapChainDescriptor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("presentMode"));
    static final java.lang.invoke.VarHandle WGPUSwapChainDescriptor$presentMode$VH() { return WGPUSwapChainDescriptor$presentMode$VH_; }

    static final MemoryLayout WGPUTextureBindingLayout$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("nextInChain"),
        C_INT.withName("sampleType"),
        C_INT.withName("viewDimension"),
        C_CHAR.withName("multisampled"),
        MemoryLayout.ofPaddingBits(56)
    ).withName("WGPUTextureBindingLayout");
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureBindingLayout$struct$LAYOUT() { return WGPUTextureBindingLayout$struct$LAYOUT_; }

    static final MemoryLayout WGPUTextureBindingLayout$nextInChain$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureBindingLayout$nextInChain$LAYOUT() { return WGPUTextureBindingLayout$nextInChain$LAYOUT_; }

    static final VarHandle WGPUTextureBindingLayout$nextInChain$VH_ = MemoryHandles.asAddressVarHandle(WGPUTextureBindingLayout$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("nextInChain")));
    static final java.lang.invoke.VarHandle WGPUTextureBindingLayout$nextInChain$VH() { return WGPUTextureBindingLayout$nextInChain$VH_; }

    static final MemoryLayout WGPUTextureBindingLayout$sampleType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureBindingLayout$sampleType$LAYOUT() { return WGPUTextureBindingLayout$sampleType$LAYOUT_; }

    static final VarHandle WGPUTextureBindingLayout$sampleType$VH_ = WGPUTextureBindingLayout$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("sampleType"));
    static final java.lang.invoke.VarHandle WGPUTextureBindingLayout$sampleType$VH() { return WGPUTextureBindingLayout$sampleType$VH_; }

    static final MemoryLayout WGPUTextureBindingLayout$viewDimension$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureBindingLayout$viewDimension$LAYOUT() { return WGPUTextureBindingLayout$viewDimension$LAYOUT_; }

    static final VarHandle WGPUTextureBindingLayout$viewDimension$VH_ = WGPUTextureBindingLayout$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("viewDimension"));
    static final java.lang.invoke.VarHandle WGPUTextureBindingLayout$viewDimension$VH() { return WGPUTextureBindingLayout$viewDimension$VH_; }

    static final MemoryLayout WGPUTextureBindingLayout$multisampled$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureBindingLayout$multisampled$LAYOUT() { return WGPUTextureBindingLayout$multisampled$LAYOUT_; }

    static final VarHandle WGPUTextureBindingLayout$multisampled$VH_ = WGPUTextureBindingLayout$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("multisampled"));
    static final java.lang.invoke.VarHandle WGPUTextureBindingLayout$multisampled$VH() { return WGPUTextureBindingLayout$multisampled$VH_; }

    static final MemoryLayout WGPUTextureDataLayout$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("nextInChain"),
        C_LONG_LONG.withName("offset"),
        C_INT.withName("bytesPerRow"),
        C_INT.withName("rowsPerImage")
    ).withName("WGPUTextureDataLayout");
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureDataLayout$struct$LAYOUT() { return WGPUTextureDataLayout$struct$LAYOUT_; }

    static final MemoryLayout WGPUTextureDataLayout$nextInChain$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureDataLayout$nextInChain$LAYOUT() { return WGPUTextureDataLayout$nextInChain$LAYOUT_; }

    static final VarHandle WGPUTextureDataLayout$nextInChain$VH_ = MemoryHandles.asAddressVarHandle(WGPUTextureDataLayout$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("nextInChain")));
    static final java.lang.invoke.VarHandle WGPUTextureDataLayout$nextInChain$VH() { return WGPUTextureDataLayout$nextInChain$VH_; }

    static final MemoryLayout WGPUTextureDataLayout$offset$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureDataLayout$offset$LAYOUT() { return WGPUTextureDataLayout$offset$LAYOUT_; }

    static final VarHandle WGPUTextureDataLayout$offset$VH_ = WGPUTextureDataLayout$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("offset"));
    static final java.lang.invoke.VarHandle WGPUTextureDataLayout$offset$VH() { return WGPUTextureDataLayout$offset$VH_; }

    static final MemoryLayout WGPUTextureDataLayout$bytesPerRow$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureDataLayout$bytesPerRow$LAYOUT() { return WGPUTextureDataLayout$bytesPerRow$LAYOUT_; }

    static final VarHandle WGPUTextureDataLayout$bytesPerRow$VH_ = WGPUTextureDataLayout$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bytesPerRow"));
    static final java.lang.invoke.VarHandle WGPUTextureDataLayout$bytesPerRow$VH() { return WGPUTextureDataLayout$bytesPerRow$VH_; }

    static final MemoryLayout WGPUTextureDataLayout$rowsPerImage$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureDataLayout$rowsPerImage$LAYOUT() { return WGPUTextureDataLayout$rowsPerImage$LAYOUT_; }

    static final VarHandle WGPUTextureDataLayout$rowsPerImage$VH_ = WGPUTextureDataLayout$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("rowsPerImage"));
    static final java.lang.invoke.VarHandle WGPUTextureDataLayout$rowsPerImage$VH() { return WGPUTextureDataLayout$rowsPerImage$VH_; }

    static final MemoryLayout WGPUTextureViewDescriptor$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("nextInChain"),
        C_POINTER.withName("label"),
        C_INT.withName("format"),
        C_INT.withName("dimension"),
        C_INT.withName("baseMipLevel"),
        C_INT.withName("mipLevelCount"),
        C_INT.withName("baseArrayLayer"),
        C_INT.withName("arrayLayerCount"),
        C_INT.withName("aspect"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("WGPUTextureViewDescriptor");
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureViewDescriptor$struct$LAYOUT() { return WGPUTextureViewDescriptor$struct$LAYOUT_; }

    static final MemoryLayout WGPUTextureViewDescriptor$nextInChain$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureViewDescriptor$nextInChain$LAYOUT() { return WGPUTextureViewDescriptor$nextInChain$LAYOUT_; }

    static final VarHandle WGPUTextureViewDescriptor$nextInChain$VH_ = MemoryHandles.asAddressVarHandle(WGPUTextureViewDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("nextInChain")));
    static final java.lang.invoke.VarHandle WGPUTextureViewDescriptor$nextInChain$VH() { return WGPUTextureViewDescriptor$nextInChain$VH_; }

    static final MemoryLayout WGPUTextureViewDescriptor$label$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureViewDescriptor$label$LAYOUT() { return WGPUTextureViewDescriptor$label$LAYOUT_; }

    static final VarHandle WGPUTextureViewDescriptor$label$VH_ = MemoryHandles.asAddressVarHandle(WGPUTextureViewDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("label")));
    static final java.lang.invoke.VarHandle WGPUTextureViewDescriptor$label$VH() { return WGPUTextureViewDescriptor$label$VH_; }

    static final MemoryLayout WGPUTextureViewDescriptor$format$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureViewDescriptor$format$LAYOUT() { return WGPUTextureViewDescriptor$format$LAYOUT_; }

    static final VarHandle WGPUTextureViewDescriptor$format$VH_ = WGPUTextureViewDescriptor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("format"));
    static final java.lang.invoke.VarHandle WGPUTextureViewDescriptor$format$VH() { return WGPUTextureViewDescriptor$format$VH_; }

    static final MemoryLayout WGPUTextureViewDescriptor$dimension$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureViewDescriptor$dimension$LAYOUT() { return WGPUTextureViewDescriptor$dimension$LAYOUT_; }

    static final VarHandle WGPUTextureViewDescriptor$dimension$VH_ = WGPUTextureViewDescriptor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dimension"));
    static final java.lang.invoke.VarHandle WGPUTextureViewDescriptor$dimension$VH() { return WGPUTextureViewDescriptor$dimension$VH_; }

    static final MemoryLayout WGPUTextureViewDescriptor$baseMipLevel$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureViewDescriptor$baseMipLevel$LAYOUT() { return WGPUTextureViewDescriptor$baseMipLevel$LAYOUT_; }

    static final VarHandle WGPUTextureViewDescriptor$baseMipLevel$VH_ = WGPUTextureViewDescriptor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("baseMipLevel"));
    static final java.lang.invoke.VarHandle WGPUTextureViewDescriptor$baseMipLevel$VH() { return WGPUTextureViewDescriptor$baseMipLevel$VH_; }

    static final MemoryLayout WGPUTextureViewDescriptor$mipLevelCount$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureViewDescriptor$mipLevelCount$LAYOUT() { return WGPUTextureViewDescriptor$mipLevelCount$LAYOUT_; }

    static final VarHandle WGPUTextureViewDescriptor$mipLevelCount$VH_ = WGPUTextureViewDescriptor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("mipLevelCount"));
    static final java.lang.invoke.VarHandle WGPUTextureViewDescriptor$mipLevelCount$VH() { return WGPUTextureViewDescriptor$mipLevelCount$VH_; }

    static final MemoryLayout WGPUTextureViewDescriptor$baseArrayLayer$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureViewDescriptor$baseArrayLayer$LAYOUT() { return WGPUTextureViewDescriptor$baseArrayLayer$LAYOUT_; }

    static final VarHandle WGPUTextureViewDescriptor$baseArrayLayer$VH_ = WGPUTextureViewDescriptor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("baseArrayLayer"));
    static final java.lang.invoke.VarHandle WGPUTextureViewDescriptor$baseArrayLayer$VH() { return WGPUTextureViewDescriptor$baseArrayLayer$VH_; }

    static final MemoryLayout WGPUTextureViewDescriptor$arrayLayerCount$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureViewDescriptor$arrayLayerCount$LAYOUT() { return WGPUTextureViewDescriptor$arrayLayerCount$LAYOUT_; }

    static final VarHandle WGPUTextureViewDescriptor$arrayLayerCount$VH_ = WGPUTextureViewDescriptor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("arrayLayerCount"));
    static final java.lang.invoke.VarHandle WGPUTextureViewDescriptor$arrayLayerCount$VH() { return WGPUTextureViewDescriptor$arrayLayerCount$VH_; }

    static final MemoryLayout WGPUTextureViewDescriptor$aspect$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureViewDescriptor$aspect$LAYOUT() { return WGPUTextureViewDescriptor$aspect$LAYOUT_; }

    static final VarHandle WGPUTextureViewDescriptor$aspect$VH_ = WGPUTextureViewDescriptor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("aspect"));
    static final java.lang.invoke.VarHandle WGPUTextureViewDescriptor$aspect$VH() { return WGPUTextureViewDescriptor$aspect$VH_; }

    static final MemoryLayout WGPUVertexAttribute$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("format"),
        MemoryLayout.ofPaddingBits(32),
        C_LONG_LONG.withName("offset"),
        C_INT.withName("shaderLocation"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("WGPUVertexAttribute");
    static final jdk.incubator.foreign.MemoryLayout WGPUVertexAttribute$struct$LAYOUT() { return WGPUVertexAttribute$struct$LAYOUT_; }

    static final MemoryLayout WGPUVertexAttribute$format$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUVertexAttribute$format$LAYOUT() { return WGPUVertexAttribute$format$LAYOUT_; }

    static final VarHandle WGPUVertexAttribute$format$VH_ = WGPUVertexAttribute$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("format"));
    static final java.lang.invoke.VarHandle WGPUVertexAttribute$format$VH() { return WGPUVertexAttribute$format$VH_; }

    static final MemoryLayout WGPUVertexAttribute$offset$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout WGPUVertexAttribute$offset$LAYOUT() { return WGPUVertexAttribute$offset$LAYOUT_; }

    static final VarHandle WGPUVertexAttribute$offset$VH_ = WGPUVertexAttribute$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("offset"));
    static final java.lang.invoke.VarHandle WGPUVertexAttribute$offset$VH() { return WGPUVertexAttribute$offset$VH_; }

    static final MemoryLayout WGPUVertexAttribute$shaderLocation$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUVertexAttribute$shaderLocation$LAYOUT() { return WGPUVertexAttribute$shaderLocation$LAYOUT_; }

    static final VarHandle WGPUVertexAttribute$shaderLocation$VH_ = WGPUVertexAttribute$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("shaderLocation"));
    static final java.lang.invoke.VarHandle WGPUVertexAttribute$shaderLocation$VH() { return WGPUVertexAttribute$shaderLocation$VH_; }

    static final MemoryLayout WGPUBindGroupDescriptor$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("nextInChain"),
        C_POINTER.withName("label"),
        C_POINTER.withName("layout"),
        C_INT.withName("entryCount"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("entries")
    ).withName("WGPUBindGroupDescriptor");
    static final jdk.incubator.foreign.MemoryLayout WGPUBindGroupDescriptor$struct$LAYOUT() { return WGPUBindGroupDescriptor$struct$LAYOUT_; }

    static final MemoryLayout WGPUBindGroupDescriptor$nextInChain$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUBindGroupDescriptor$nextInChain$LAYOUT() { return WGPUBindGroupDescriptor$nextInChain$LAYOUT_; }

    static final VarHandle WGPUBindGroupDescriptor$nextInChain$VH_ = MemoryHandles.asAddressVarHandle(WGPUBindGroupDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("nextInChain")));
    static final java.lang.invoke.VarHandle WGPUBindGroupDescriptor$nextInChain$VH() { return WGPUBindGroupDescriptor$nextInChain$VH_; }

    static final MemoryLayout WGPUBindGroupDescriptor$label$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUBindGroupDescriptor$label$LAYOUT() { return WGPUBindGroupDescriptor$label$LAYOUT_; }

    static final VarHandle WGPUBindGroupDescriptor$label$VH_ = MemoryHandles.asAddressVarHandle(WGPUBindGroupDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("label")));
    static final java.lang.invoke.VarHandle WGPUBindGroupDescriptor$label$VH() { return WGPUBindGroupDescriptor$label$VH_; }

    static final MemoryLayout WGPUBindGroupDescriptor$layout$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUBindGroupDescriptor$layout$LAYOUT() { return WGPUBindGroupDescriptor$layout$LAYOUT_; }

    static final VarHandle WGPUBindGroupDescriptor$layout$VH_ = MemoryHandles.asAddressVarHandle(WGPUBindGroupDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("layout")));
    static final java.lang.invoke.VarHandle WGPUBindGroupDescriptor$layout$VH() { return WGPUBindGroupDescriptor$layout$VH_; }

    static final MemoryLayout WGPUBindGroupDescriptor$entryCount$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUBindGroupDescriptor$entryCount$LAYOUT() { return WGPUBindGroupDescriptor$entryCount$LAYOUT_; }

    static final VarHandle WGPUBindGroupDescriptor$entryCount$VH_ = WGPUBindGroupDescriptor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("entryCount"));
    static final java.lang.invoke.VarHandle WGPUBindGroupDescriptor$entryCount$VH() { return WGPUBindGroupDescriptor$entryCount$VH_; }

    static final MemoryLayout WGPUBindGroupDescriptor$entries$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUBindGroupDescriptor$entries$LAYOUT() { return WGPUBindGroupDescriptor$entries$LAYOUT_; }

    static final VarHandle WGPUBindGroupDescriptor$entries$VH_ = MemoryHandles.asAddressVarHandle(WGPUBindGroupDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("entries")));
    static final java.lang.invoke.VarHandle WGPUBindGroupDescriptor$entries$VH() { return WGPUBindGroupDescriptor$entries$VH_; }

    static final MemoryLayout WGPUBindGroupLayoutEntry$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("nextInChain"),
        C_INT.withName("binding"),
        C_INT.withName("visibility"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("nextInChain"),
            C_INT.withName("type"),
            C_CHAR.withName("hasDynamicOffset"),
            MemoryLayout.ofPaddingBits(24),
            C_LONG_LONG.withName("minBindingSize")
        ).withName("buffer"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("nextInChain"),
            C_INT.withName("type"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("sampler"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("nextInChain"),
            C_INT.withName("sampleType"),
            C_INT.withName("viewDimension"),
            C_CHAR.withName("multisampled"),
            MemoryLayout.ofPaddingBits(56)
        ).withName("texture"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("nextInChain"),
            C_INT.withName("access"),
            C_INT.withName("format"),
            C_INT.withName("viewDimension"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("storageTexture")
    ).withName("WGPUBindGroupLayoutEntry");
    static final jdk.incubator.foreign.MemoryLayout WGPUBindGroupLayoutEntry$struct$LAYOUT() { return WGPUBindGroupLayoutEntry$struct$LAYOUT_; }

    static final MemoryLayout WGPUBindGroupLayoutEntry$nextInChain$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUBindGroupLayoutEntry$nextInChain$LAYOUT() { return WGPUBindGroupLayoutEntry$nextInChain$LAYOUT_; }

    static final VarHandle WGPUBindGroupLayoutEntry$nextInChain$VH_ = MemoryHandles.asAddressVarHandle(WGPUBindGroupLayoutEntry$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("nextInChain")));
    static final java.lang.invoke.VarHandle WGPUBindGroupLayoutEntry$nextInChain$VH() { return WGPUBindGroupLayoutEntry$nextInChain$VH_; }

    static final MemoryLayout WGPUBindGroupLayoutEntry$binding$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUBindGroupLayoutEntry$binding$LAYOUT() { return WGPUBindGroupLayoutEntry$binding$LAYOUT_; }

    static final VarHandle WGPUBindGroupLayoutEntry$binding$VH_ = WGPUBindGroupLayoutEntry$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("binding"));
    static final java.lang.invoke.VarHandle WGPUBindGroupLayoutEntry$binding$VH() { return WGPUBindGroupLayoutEntry$binding$VH_; }

    static final MemoryLayout WGPUBindGroupLayoutEntry$visibility$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUBindGroupLayoutEntry$visibility$LAYOUT() { return WGPUBindGroupLayoutEntry$visibility$LAYOUT_; }

    static final VarHandle WGPUBindGroupLayoutEntry$visibility$VH_ = WGPUBindGroupLayoutEntry$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("visibility"));
    static final java.lang.invoke.VarHandle WGPUBindGroupLayoutEntry$visibility$VH() { return WGPUBindGroupLayoutEntry$visibility$VH_; }

    static final MemoryLayout WGPUBlendState$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("srcFactor"),
            C_INT.withName("dstFactor"),
            C_INT.withName("operation")
        ).withName("color"),
        MemoryLayout.ofStruct(
            C_INT.withName("srcFactor"),
            C_INT.withName("dstFactor"),
            C_INT.withName("operation")
        ).withName("alpha")
    ).withName("WGPUBlendState");
    static final jdk.incubator.foreign.MemoryLayout WGPUBlendState$struct$LAYOUT() { return WGPUBlendState$struct$LAYOUT_; }

    static final MemoryLayout WGPUComputePipelineDescriptor$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("nextInChain"),
        C_POINTER.withName("label"),
        C_POINTER.withName("layout"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("nextInChain"),
            C_POINTER.withName("module"),
            C_POINTER.withName("entryPoint")
        ).withName("computeStage")
    ).withName("WGPUComputePipelineDescriptor");
    static final jdk.incubator.foreign.MemoryLayout WGPUComputePipelineDescriptor$struct$LAYOUT() { return WGPUComputePipelineDescriptor$struct$LAYOUT_; }

    static final MemoryLayout WGPUComputePipelineDescriptor$nextInChain$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUComputePipelineDescriptor$nextInChain$LAYOUT() { return WGPUComputePipelineDescriptor$nextInChain$LAYOUT_; }

    static final VarHandle WGPUComputePipelineDescriptor$nextInChain$VH_ = MemoryHandles.asAddressVarHandle(WGPUComputePipelineDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("nextInChain")));
    static final java.lang.invoke.VarHandle WGPUComputePipelineDescriptor$nextInChain$VH() { return WGPUComputePipelineDescriptor$nextInChain$VH_; }

    static final MemoryLayout WGPUComputePipelineDescriptor$label$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUComputePipelineDescriptor$label$LAYOUT() { return WGPUComputePipelineDescriptor$label$LAYOUT_; }

    static final VarHandle WGPUComputePipelineDescriptor$label$VH_ = MemoryHandles.asAddressVarHandle(WGPUComputePipelineDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("label")));
    static final java.lang.invoke.VarHandle WGPUComputePipelineDescriptor$label$VH() { return WGPUComputePipelineDescriptor$label$VH_; }

    static final MemoryLayout WGPUComputePipelineDescriptor$layout$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUComputePipelineDescriptor$layout$LAYOUT() { return WGPUComputePipelineDescriptor$layout$LAYOUT_; }

    static final VarHandle WGPUComputePipelineDescriptor$layout$VH_ = MemoryHandles.asAddressVarHandle(WGPUComputePipelineDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("layout")));
    static final java.lang.invoke.VarHandle WGPUComputePipelineDescriptor$layout$VH() { return WGPUComputePipelineDescriptor$layout$VH_; }

    static final MemoryLayout WGPUDepthStencilState$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("nextInChain"),
        C_INT.withName("format"),
        C_CHAR.withName("depthWriteEnabled"),
        MemoryLayout.ofPaddingBits(24),
        C_INT.withName("depthCompare"),
        MemoryLayout.ofStruct(
            C_INT.withName("compare"),
            C_INT.withName("failOp"),
            C_INT.withName("depthFailOp"),
            C_INT.withName("passOp")
        ).withName("stencilFront"),
        MemoryLayout.ofStruct(
            C_INT.withName("compare"),
            C_INT.withName("failOp"),
            C_INT.withName("depthFailOp"),
            C_INT.withName("passOp")
        ).withName("stencilBack"),
        C_INT.withName("stencilReadMask"),
        C_INT.withName("stencilWriteMask"),
        C_INT.withName("depthBias"),
        C_FLOAT.withName("depthBiasSlopeScale"),
        C_FLOAT.withName("depthBiasClamp")
    ).withName("WGPUDepthStencilState");
    static final jdk.incubator.foreign.MemoryLayout WGPUDepthStencilState$struct$LAYOUT() { return WGPUDepthStencilState$struct$LAYOUT_; }

    static final MemoryLayout WGPUDepthStencilState$nextInChain$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUDepthStencilState$nextInChain$LAYOUT() { return WGPUDepthStencilState$nextInChain$LAYOUT_; }

    static final VarHandle WGPUDepthStencilState$nextInChain$VH_ = MemoryHandles.asAddressVarHandle(WGPUDepthStencilState$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("nextInChain")));
    static final java.lang.invoke.VarHandle WGPUDepthStencilState$nextInChain$VH() { return WGPUDepthStencilState$nextInChain$VH_; }

    static final MemoryLayout WGPUDepthStencilState$format$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUDepthStencilState$format$LAYOUT() { return WGPUDepthStencilState$format$LAYOUT_; }

    static final VarHandle WGPUDepthStencilState$format$VH_ = WGPUDepthStencilState$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("format"));
    static final java.lang.invoke.VarHandle WGPUDepthStencilState$format$VH() { return WGPUDepthStencilState$format$VH_; }

    static final MemoryLayout WGPUDepthStencilState$depthWriteEnabled$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout WGPUDepthStencilState$depthWriteEnabled$LAYOUT() { return WGPUDepthStencilState$depthWriteEnabled$LAYOUT_; }

    static final VarHandle WGPUDepthStencilState$depthWriteEnabled$VH_ = WGPUDepthStencilState$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("depthWriteEnabled"));
    static final java.lang.invoke.VarHandle WGPUDepthStencilState$depthWriteEnabled$VH() { return WGPUDepthStencilState$depthWriteEnabled$VH_; }

    static final MemoryLayout WGPUDepthStencilState$depthCompare$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUDepthStencilState$depthCompare$LAYOUT() { return WGPUDepthStencilState$depthCompare$LAYOUT_; }

    static final VarHandle WGPUDepthStencilState$depthCompare$VH_ = WGPUDepthStencilState$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("depthCompare"));
    static final java.lang.invoke.VarHandle WGPUDepthStencilState$depthCompare$VH() { return WGPUDepthStencilState$depthCompare$VH_; }

    static final MemoryLayout WGPUDepthStencilState$stencilReadMask$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUDepthStencilState$stencilReadMask$LAYOUT() { return WGPUDepthStencilState$stencilReadMask$LAYOUT_; }

    static final VarHandle WGPUDepthStencilState$stencilReadMask$VH_ = WGPUDepthStencilState$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("stencilReadMask"));
    static final java.lang.invoke.VarHandle WGPUDepthStencilState$stencilReadMask$VH() { return WGPUDepthStencilState$stencilReadMask$VH_; }

    static final MemoryLayout WGPUDepthStencilState$stencilWriteMask$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUDepthStencilState$stencilWriteMask$LAYOUT() { return WGPUDepthStencilState$stencilWriteMask$LAYOUT_; }

    static final VarHandle WGPUDepthStencilState$stencilWriteMask$VH_ = WGPUDepthStencilState$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("stencilWriteMask"));
    static final java.lang.invoke.VarHandle WGPUDepthStencilState$stencilWriteMask$VH() { return WGPUDepthStencilState$stencilWriteMask$VH_; }

    static final MemoryLayout WGPUDepthStencilState$depthBias$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUDepthStencilState$depthBias$LAYOUT() { return WGPUDepthStencilState$depthBias$LAYOUT_; }

    static final VarHandle WGPUDepthStencilState$depthBias$VH_ = WGPUDepthStencilState$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("depthBias"));
    static final java.lang.invoke.VarHandle WGPUDepthStencilState$depthBias$VH() { return WGPUDepthStencilState$depthBias$VH_; }

    static final MemoryLayout WGPUDepthStencilState$depthBiasSlopeScale$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout WGPUDepthStencilState$depthBiasSlopeScale$LAYOUT() { return WGPUDepthStencilState$depthBiasSlopeScale$LAYOUT_; }

    static final VarHandle WGPUDepthStencilState$depthBiasSlopeScale$VH_ = WGPUDepthStencilState$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("depthBiasSlopeScale"));
    static final java.lang.invoke.VarHandle WGPUDepthStencilState$depthBiasSlopeScale$VH() { return WGPUDepthStencilState$depthBiasSlopeScale$VH_; }

    static final MemoryLayout WGPUDepthStencilState$depthBiasClamp$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout WGPUDepthStencilState$depthBiasClamp$LAYOUT() { return WGPUDepthStencilState$depthBiasClamp$LAYOUT_; }

    static final VarHandle WGPUDepthStencilState$depthBiasClamp$VH_ = WGPUDepthStencilState$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("depthBiasClamp"));
    static final java.lang.invoke.VarHandle WGPUDepthStencilState$depthBiasClamp$VH() { return WGPUDepthStencilState$depthBiasClamp$VH_; }

    static final MemoryLayout WGPUImageCopyBuffer$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("nextInChain"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("nextInChain"),
            C_LONG_LONG.withName("offset"),
            C_INT.withName("bytesPerRow"),
            C_INT.withName("rowsPerImage")
        ).withName("layout"),
        C_POINTER.withName("buffer")
    ).withName("WGPUImageCopyBuffer");
    static final jdk.incubator.foreign.MemoryLayout WGPUImageCopyBuffer$struct$LAYOUT() { return WGPUImageCopyBuffer$struct$LAYOUT_; }

    static final MemoryLayout WGPUImageCopyBuffer$nextInChain$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUImageCopyBuffer$nextInChain$LAYOUT() { return WGPUImageCopyBuffer$nextInChain$LAYOUT_; }

    static final VarHandle WGPUImageCopyBuffer$nextInChain$VH_ = MemoryHandles.asAddressVarHandle(WGPUImageCopyBuffer$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("nextInChain")));
    static final java.lang.invoke.VarHandle WGPUImageCopyBuffer$nextInChain$VH() { return WGPUImageCopyBuffer$nextInChain$VH_; }

    static final MemoryLayout WGPUImageCopyBuffer$buffer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUImageCopyBuffer$buffer$LAYOUT() { return WGPUImageCopyBuffer$buffer$LAYOUT_; }

    static final VarHandle WGPUImageCopyBuffer$buffer$VH_ = MemoryHandles.asAddressVarHandle(WGPUImageCopyBuffer$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("buffer")));
    static final java.lang.invoke.VarHandle WGPUImageCopyBuffer$buffer$VH() { return WGPUImageCopyBuffer$buffer$VH_; }

    static final MemoryLayout WGPUImageCopyTexture$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("nextInChain"),
        C_POINTER.withName("texture"),
        C_INT.withName("mipLevel"),
        MemoryLayout.ofStruct(
            C_INT.withName("x"),
            C_INT.withName("y"),
            C_INT.withName("z")
        ).withName("origin"),
        C_INT.withName("aspect"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("WGPUImageCopyTexture");
    static final jdk.incubator.foreign.MemoryLayout WGPUImageCopyTexture$struct$LAYOUT() { return WGPUImageCopyTexture$struct$LAYOUT_; }

    static final MemoryLayout WGPUImageCopyTexture$nextInChain$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUImageCopyTexture$nextInChain$LAYOUT() { return WGPUImageCopyTexture$nextInChain$LAYOUT_; }

    static final VarHandle WGPUImageCopyTexture$nextInChain$VH_ = MemoryHandles.asAddressVarHandle(WGPUImageCopyTexture$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("nextInChain")));
    static final java.lang.invoke.VarHandle WGPUImageCopyTexture$nextInChain$VH() { return WGPUImageCopyTexture$nextInChain$VH_; }

    static final MemoryLayout WGPUImageCopyTexture$texture$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUImageCopyTexture$texture$LAYOUT() { return WGPUImageCopyTexture$texture$LAYOUT_; }

    static final VarHandle WGPUImageCopyTexture$texture$VH_ = MemoryHandles.asAddressVarHandle(WGPUImageCopyTexture$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("texture")));
    static final java.lang.invoke.VarHandle WGPUImageCopyTexture$texture$VH() { return WGPUImageCopyTexture$texture$VH_; }

    static final MemoryLayout WGPUImageCopyTexture$mipLevel$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUImageCopyTexture$mipLevel$LAYOUT() { return WGPUImageCopyTexture$mipLevel$LAYOUT_; }

    static final VarHandle WGPUImageCopyTexture$mipLevel$VH_ = WGPUImageCopyTexture$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("mipLevel"));
    static final java.lang.invoke.VarHandle WGPUImageCopyTexture$mipLevel$VH() { return WGPUImageCopyTexture$mipLevel$VH_; }

    static final MemoryLayout WGPUImageCopyTexture$aspect$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUImageCopyTexture$aspect$LAYOUT() { return WGPUImageCopyTexture$aspect$LAYOUT_; }

    static final VarHandle WGPUImageCopyTexture$aspect$VH_ = WGPUImageCopyTexture$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("aspect"));
    static final java.lang.invoke.VarHandle WGPUImageCopyTexture$aspect$VH() { return WGPUImageCopyTexture$aspect$VH_; }

    static final MemoryLayout WGPURenderPassColorAttachmentDescriptor$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("attachment"),
        C_POINTER.withName("resolveTarget"),
        C_INT.withName("loadOp"),
        C_INT.withName("storeOp"),
        MemoryLayout.ofStruct(
            C_DOUBLE.withName("r"),
            C_DOUBLE.withName("g"),
            C_DOUBLE.withName("b"),
            C_DOUBLE.withName("a")
        ).withName("clearColor")
    ).withName("WGPURenderPassColorAttachmentDescriptor");
    static final jdk.incubator.foreign.MemoryLayout WGPURenderPassColorAttachmentDescriptor$struct$LAYOUT() { return WGPURenderPassColorAttachmentDescriptor$struct$LAYOUT_; }

    static final MemoryLayout WGPURenderPassColorAttachmentDescriptor$attachment$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPURenderPassColorAttachmentDescriptor$attachment$LAYOUT() { return WGPURenderPassColorAttachmentDescriptor$attachment$LAYOUT_; }

    static final VarHandle WGPURenderPassColorAttachmentDescriptor$attachment$VH_ = MemoryHandles.asAddressVarHandle(WGPURenderPassColorAttachmentDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("attachment")));
    static final java.lang.invoke.VarHandle WGPURenderPassColorAttachmentDescriptor$attachment$VH() { return WGPURenderPassColorAttachmentDescriptor$attachment$VH_; }

    static final MemoryLayout WGPURenderPassColorAttachmentDescriptor$resolveTarget$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPURenderPassColorAttachmentDescriptor$resolveTarget$LAYOUT() { return WGPURenderPassColorAttachmentDescriptor$resolveTarget$LAYOUT_; }

    static final VarHandle WGPURenderPassColorAttachmentDescriptor$resolveTarget$VH_ = MemoryHandles.asAddressVarHandle(WGPURenderPassColorAttachmentDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("resolveTarget")));
    static final java.lang.invoke.VarHandle WGPURenderPassColorAttachmentDescriptor$resolveTarget$VH() { return WGPURenderPassColorAttachmentDescriptor$resolveTarget$VH_; }

    static final MemoryLayout WGPURenderPassColorAttachmentDescriptor$loadOp$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPURenderPassColorAttachmentDescriptor$loadOp$LAYOUT() { return WGPURenderPassColorAttachmentDescriptor$loadOp$LAYOUT_; }

    static final VarHandle WGPURenderPassColorAttachmentDescriptor$loadOp$VH_ = WGPURenderPassColorAttachmentDescriptor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("loadOp"));
    static final java.lang.invoke.VarHandle WGPURenderPassColorAttachmentDescriptor$loadOp$VH() { return WGPURenderPassColorAttachmentDescriptor$loadOp$VH_; }

    static final MemoryLayout WGPURenderPassColorAttachmentDescriptor$storeOp$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPURenderPassColorAttachmentDescriptor$storeOp$LAYOUT() { return WGPURenderPassColorAttachmentDescriptor$storeOp$LAYOUT_; }

    static final VarHandle WGPURenderPassColorAttachmentDescriptor$storeOp$VH_ = WGPURenderPassColorAttachmentDescriptor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("storeOp"));
    static final java.lang.invoke.VarHandle WGPURenderPassColorAttachmentDescriptor$storeOp$VH() { return WGPURenderPassColorAttachmentDescriptor$storeOp$VH_; }

    static final MemoryLayout WGPUTextureDescriptor$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("nextInChain"),
        C_POINTER.withName("label"),
        C_INT.withName("usage"),
        C_INT.withName("dimension"),
        MemoryLayout.ofStruct(
            C_INT.withName("width"),
            C_INT.withName("height"),
            C_INT.withName("depth")
        ).withName("size"),
        C_INT.withName("format"),
        C_INT.withName("mipLevelCount"),
        C_INT.withName("sampleCount")
    ).withName("WGPUTextureDescriptor");
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureDescriptor$struct$LAYOUT() { return WGPUTextureDescriptor$struct$LAYOUT_; }

    static final MemoryLayout WGPUTextureDescriptor$nextInChain$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureDescriptor$nextInChain$LAYOUT() { return WGPUTextureDescriptor$nextInChain$LAYOUT_; }

    static final VarHandle WGPUTextureDescriptor$nextInChain$VH_ = MemoryHandles.asAddressVarHandle(WGPUTextureDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("nextInChain")));
    static final java.lang.invoke.VarHandle WGPUTextureDescriptor$nextInChain$VH() { return WGPUTextureDescriptor$nextInChain$VH_; }

    static final MemoryLayout WGPUTextureDescriptor$label$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureDescriptor$label$LAYOUT() { return WGPUTextureDescriptor$label$LAYOUT_; }

    static final VarHandle WGPUTextureDescriptor$label$VH_ = MemoryHandles.asAddressVarHandle(WGPUTextureDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("label")));
    static final java.lang.invoke.VarHandle WGPUTextureDescriptor$label$VH() { return WGPUTextureDescriptor$label$VH_; }

    static final MemoryLayout WGPUTextureDescriptor$usage$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureDescriptor$usage$LAYOUT() { return WGPUTextureDescriptor$usage$LAYOUT_; }

    static final VarHandle WGPUTextureDescriptor$usage$VH_ = WGPUTextureDescriptor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("usage"));
    static final java.lang.invoke.VarHandle WGPUTextureDescriptor$usage$VH() { return WGPUTextureDescriptor$usage$VH_; }

    static final MemoryLayout WGPUTextureDescriptor$dimension$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureDescriptor$dimension$LAYOUT() { return WGPUTextureDescriptor$dimension$LAYOUT_; }

    static final VarHandle WGPUTextureDescriptor$dimension$VH_ = WGPUTextureDescriptor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dimension"));
    static final java.lang.invoke.VarHandle WGPUTextureDescriptor$dimension$VH() { return WGPUTextureDescriptor$dimension$VH_; }

    static final MemoryLayout WGPUTextureDescriptor$format$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureDescriptor$format$LAYOUT() { return WGPUTextureDescriptor$format$LAYOUT_; }

    static final VarHandle WGPUTextureDescriptor$format$VH_ = WGPUTextureDescriptor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("format"));
    static final java.lang.invoke.VarHandle WGPUTextureDescriptor$format$VH() { return WGPUTextureDescriptor$format$VH_; }

    static final MemoryLayout WGPUTextureDescriptor$mipLevelCount$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureDescriptor$mipLevelCount$LAYOUT() { return WGPUTextureDescriptor$mipLevelCount$LAYOUT_; }

    static final VarHandle WGPUTextureDescriptor$mipLevelCount$VH_ = WGPUTextureDescriptor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("mipLevelCount"));
    static final java.lang.invoke.VarHandle WGPUTextureDescriptor$mipLevelCount$VH() { return WGPUTextureDescriptor$mipLevelCount$VH_; }

    static final MemoryLayout WGPUTextureDescriptor$sampleCount$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUTextureDescriptor$sampleCount$LAYOUT() { return WGPUTextureDescriptor$sampleCount$LAYOUT_; }

    static final VarHandle WGPUTextureDescriptor$sampleCount$VH_ = WGPUTextureDescriptor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("sampleCount"));
    static final java.lang.invoke.VarHandle WGPUTextureDescriptor$sampleCount$VH() { return WGPUTextureDescriptor$sampleCount$VH_; }

    static final MemoryLayout WGPUVertexBufferLayout$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG_LONG.withName("arrayStride"),
        C_INT.withName("stepMode"),
        C_INT.withName("attributeCount"),
        C_POINTER.withName("attributes")
    ).withName("WGPUVertexBufferLayout");
    static final jdk.incubator.foreign.MemoryLayout WGPUVertexBufferLayout$struct$LAYOUT() { return WGPUVertexBufferLayout$struct$LAYOUT_; }

    static final MemoryLayout WGPUVertexBufferLayout$arrayStride$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout WGPUVertexBufferLayout$arrayStride$LAYOUT() { return WGPUVertexBufferLayout$arrayStride$LAYOUT_; }

    static final VarHandle WGPUVertexBufferLayout$arrayStride$VH_ = WGPUVertexBufferLayout$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("arrayStride"));
    static final java.lang.invoke.VarHandle WGPUVertexBufferLayout$arrayStride$VH() { return WGPUVertexBufferLayout$arrayStride$VH_; }

    static final MemoryLayout WGPUVertexBufferLayout$stepMode$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUVertexBufferLayout$stepMode$LAYOUT() { return WGPUVertexBufferLayout$stepMode$LAYOUT_; }

    static final VarHandle WGPUVertexBufferLayout$stepMode$VH_ = WGPUVertexBufferLayout$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("stepMode"));
    static final java.lang.invoke.VarHandle WGPUVertexBufferLayout$stepMode$VH() { return WGPUVertexBufferLayout$stepMode$VH_; }

    static final MemoryLayout WGPUVertexBufferLayout$attributeCount$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUVertexBufferLayout$attributeCount$LAYOUT() { return WGPUVertexBufferLayout$attributeCount$LAYOUT_; }

    static final VarHandle WGPUVertexBufferLayout$attributeCount$VH_ = WGPUVertexBufferLayout$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("attributeCount"));
    static final java.lang.invoke.VarHandle WGPUVertexBufferLayout$attributeCount$VH() { return WGPUVertexBufferLayout$attributeCount$VH_; }

    static final MemoryLayout WGPUVertexBufferLayout$attributes$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUVertexBufferLayout$attributes$LAYOUT() { return WGPUVertexBufferLayout$attributes$LAYOUT_; }

    static final VarHandle WGPUVertexBufferLayout$attributes$VH_ = MemoryHandles.asAddressVarHandle(WGPUVertexBufferLayout$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("attributes")));
    static final java.lang.invoke.VarHandle WGPUVertexBufferLayout$attributes$VH() { return WGPUVertexBufferLayout$attributes$VH_; }

    static final MemoryLayout WGPUBindGroupLayoutDescriptor$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("nextInChain"),
        C_POINTER.withName("label"),
        C_INT.withName("entryCount"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("entries")
    ).withName("WGPUBindGroupLayoutDescriptor");
    static final jdk.incubator.foreign.MemoryLayout WGPUBindGroupLayoutDescriptor$struct$LAYOUT() { return WGPUBindGroupLayoutDescriptor$struct$LAYOUT_; }

    static final MemoryLayout WGPUBindGroupLayoutDescriptor$nextInChain$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUBindGroupLayoutDescriptor$nextInChain$LAYOUT() { return WGPUBindGroupLayoutDescriptor$nextInChain$LAYOUT_; }

    static final VarHandle WGPUBindGroupLayoutDescriptor$nextInChain$VH_ = MemoryHandles.asAddressVarHandle(WGPUBindGroupLayoutDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("nextInChain")));
    static final java.lang.invoke.VarHandle WGPUBindGroupLayoutDescriptor$nextInChain$VH() { return WGPUBindGroupLayoutDescriptor$nextInChain$VH_; }

    static final MemoryLayout WGPUBindGroupLayoutDescriptor$label$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUBindGroupLayoutDescriptor$label$LAYOUT() { return WGPUBindGroupLayoutDescriptor$label$LAYOUT_; }

    static final VarHandle WGPUBindGroupLayoutDescriptor$label$VH_ = MemoryHandles.asAddressVarHandle(WGPUBindGroupLayoutDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("label")));
    static final java.lang.invoke.VarHandle WGPUBindGroupLayoutDescriptor$label$VH() { return WGPUBindGroupLayoutDescriptor$label$VH_; }

    static final MemoryLayout WGPUBindGroupLayoutDescriptor$entryCount$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUBindGroupLayoutDescriptor$entryCount$LAYOUT() { return WGPUBindGroupLayoutDescriptor$entryCount$LAYOUT_; }

    static final VarHandle WGPUBindGroupLayoutDescriptor$entryCount$VH_ = WGPUBindGroupLayoutDescriptor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("entryCount"));
    static final java.lang.invoke.VarHandle WGPUBindGroupLayoutDescriptor$entryCount$VH() { return WGPUBindGroupLayoutDescriptor$entryCount$VH_; }

    static final MemoryLayout WGPUBindGroupLayoutDescriptor$entries$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUBindGroupLayoutDescriptor$entries$LAYOUT() { return WGPUBindGroupLayoutDescriptor$entries$LAYOUT_; }

    static final VarHandle WGPUBindGroupLayoutDescriptor$entries$VH_ = MemoryHandles.asAddressVarHandle(WGPUBindGroupLayoutDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("entries")));
    static final java.lang.invoke.VarHandle WGPUBindGroupLayoutDescriptor$entries$VH() { return WGPUBindGroupLayoutDescriptor$entries$VH_; }

    static final MemoryLayout WGPUColorTargetState$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("nextInChain"),
        C_INT.withName("format"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("blend"),
        C_INT.withName("writeMask"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("WGPUColorTargetState");
    static final jdk.incubator.foreign.MemoryLayout WGPUColorTargetState$struct$LAYOUT() { return WGPUColorTargetState$struct$LAYOUT_; }

    static final MemoryLayout WGPUColorTargetState$nextInChain$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUColorTargetState$nextInChain$LAYOUT() { return WGPUColorTargetState$nextInChain$LAYOUT_; }

    static final VarHandle WGPUColorTargetState$nextInChain$VH_ = MemoryHandles.asAddressVarHandle(WGPUColorTargetState$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("nextInChain")));
    static final java.lang.invoke.VarHandle WGPUColorTargetState$nextInChain$VH() { return WGPUColorTargetState$nextInChain$VH_; }

    static final MemoryLayout WGPUColorTargetState$format$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUColorTargetState$format$LAYOUT() { return WGPUColorTargetState$format$LAYOUT_; }

    static final VarHandle WGPUColorTargetState$format$VH_ = WGPUColorTargetState$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("format"));
    static final java.lang.invoke.VarHandle WGPUColorTargetState$format$VH() { return WGPUColorTargetState$format$VH_; }

    static final MemoryLayout WGPUColorTargetState$blend$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUColorTargetState$blend$LAYOUT() { return WGPUColorTargetState$blend$LAYOUT_; }

    static final VarHandle WGPUColorTargetState$blend$VH_ = MemoryHandles.asAddressVarHandle(WGPUColorTargetState$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("blend")));
    static final java.lang.invoke.VarHandle WGPUColorTargetState$blend$VH() { return WGPUColorTargetState$blend$VH_; }

    static final MemoryLayout WGPUColorTargetState$writeMask$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUColorTargetState$writeMask$LAYOUT() { return WGPUColorTargetState$writeMask$LAYOUT_; }

    static final VarHandle WGPUColorTargetState$writeMask$VH_ = WGPUColorTargetState$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("writeMask"));
    static final java.lang.invoke.VarHandle WGPUColorTargetState$writeMask$VH() { return WGPUColorTargetState$writeMask$VH_; }

    static final MemoryLayout WGPURenderPassDescriptor$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("nextInChain"),
        C_POINTER.withName("label"),
        C_INT.withName("colorAttachmentCount"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("colorAttachments"),
        C_POINTER.withName("depthStencilAttachment"),
        C_POINTER.withName("occlusionQuerySet")
    ).withName("WGPURenderPassDescriptor");
    static final jdk.incubator.foreign.MemoryLayout WGPURenderPassDescriptor$struct$LAYOUT() { return WGPURenderPassDescriptor$struct$LAYOUT_; }

    static final MemoryLayout WGPURenderPassDescriptor$nextInChain$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPURenderPassDescriptor$nextInChain$LAYOUT() { return WGPURenderPassDescriptor$nextInChain$LAYOUT_; }

    static final VarHandle WGPURenderPassDescriptor$nextInChain$VH_ = MemoryHandles.asAddressVarHandle(WGPURenderPassDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("nextInChain")));
    static final java.lang.invoke.VarHandle WGPURenderPassDescriptor$nextInChain$VH() { return WGPURenderPassDescriptor$nextInChain$VH_; }

    static final MemoryLayout WGPURenderPassDescriptor$label$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPURenderPassDescriptor$label$LAYOUT() { return WGPURenderPassDescriptor$label$LAYOUT_; }

    static final VarHandle WGPURenderPassDescriptor$label$VH_ = MemoryHandles.asAddressVarHandle(WGPURenderPassDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("label")));
    static final java.lang.invoke.VarHandle WGPURenderPassDescriptor$label$VH() { return WGPURenderPassDescriptor$label$VH_; }

    static final MemoryLayout WGPURenderPassDescriptor$colorAttachmentCount$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPURenderPassDescriptor$colorAttachmentCount$LAYOUT() { return WGPURenderPassDescriptor$colorAttachmentCount$LAYOUT_; }

    static final VarHandle WGPURenderPassDescriptor$colorAttachmentCount$VH_ = WGPURenderPassDescriptor$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("colorAttachmentCount"));
    static final java.lang.invoke.VarHandle WGPURenderPassDescriptor$colorAttachmentCount$VH() { return WGPURenderPassDescriptor$colorAttachmentCount$VH_; }

    static final MemoryLayout WGPURenderPassDescriptor$colorAttachments$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPURenderPassDescriptor$colorAttachments$LAYOUT() { return WGPURenderPassDescriptor$colorAttachments$LAYOUT_; }

    static final VarHandle WGPURenderPassDescriptor$colorAttachments$VH_ = MemoryHandles.asAddressVarHandle(WGPURenderPassDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("colorAttachments")));
    static final java.lang.invoke.VarHandle WGPURenderPassDescriptor$colorAttachments$VH() { return WGPURenderPassDescriptor$colorAttachments$VH_; }

    static final MemoryLayout WGPURenderPassDescriptor$depthStencilAttachment$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPURenderPassDescriptor$depthStencilAttachment$LAYOUT() { return WGPURenderPassDescriptor$depthStencilAttachment$LAYOUT_; }

    static final VarHandle WGPURenderPassDescriptor$depthStencilAttachment$VH_ = MemoryHandles.asAddressVarHandle(WGPURenderPassDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("depthStencilAttachment")));
    static final java.lang.invoke.VarHandle WGPURenderPassDescriptor$depthStencilAttachment$VH() { return WGPURenderPassDescriptor$depthStencilAttachment$VH_; }

    static final MemoryLayout WGPURenderPassDescriptor$occlusionQuerySet$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPURenderPassDescriptor$occlusionQuerySet$LAYOUT() { return WGPURenderPassDescriptor$occlusionQuerySet$LAYOUT_; }

    static final VarHandle WGPURenderPassDescriptor$occlusionQuerySet$VH_ = MemoryHandles.asAddressVarHandle(WGPURenderPassDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("occlusionQuerySet")));
    static final java.lang.invoke.VarHandle WGPURenderPassDescriptor$occlusionQuerySet$VH() { return WGPURenderPassDescriptor$occlusionQuerySet$VH_; }

    static final MemoryLayout WGPUVertexState$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("nextInChain"),
        C_POINTER.withName("module"),
        C_POINTER.withName("entryPoint"),
        C_INT.withName("bufferCount"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("buffers")
    ).withName("WGPUVertexState");
    static final jdk.incubator.foreign.MemoryLayout WGPUVertexState$struct$LAYOUT() { return WGPUVertexState$struct$LAYOUT_; }

    static final MemoryLayout WGPUVertexState$nextInChain$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUVertexState$nextInChain$LAYOUT() { return WGPUVertexState$nextInChain$LAYOUT_; }

    static final VarHandle WGPUVertexState$nextInChain$VH_ = MemoryHandles.asAddressVarHandle(WGPUVertexState$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("nextInChain")));
    static final java.lang.invoke.VarHandle WGPUVertexState$nextInChain$VH() { return WGPUVertexState$nextInChain$VH_; }

    static final MemoryLayout WGPUVertexState$module$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUVertexState$module$LAYOUT() { return WGPUVertexState$module$LAYOUT_; }

    static final VarHandle WGPUVertexState$module$VH_ = MemoryHandles.asAddressVarHandle(WGPUVertexState$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("module")));
    static final java.lang.invoke.VarHandle WGPUVertexState$module$VH() { return WGPUVertexState$module$VH_; }

    static final MemoryLayout WGPUVertexState$entryPoint$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUVertexState$entryPoint$LAYOUT() { return WGPUVertexState$entryPoint$LAYOUT_; }

    static final VarHandle WGPUVertexState$entryPoint$VH_ = MemoryHandles.asAddressVarHandle(WGPUVertexState$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("entryPoint")));
    static final java.lang.invoke.VarHandle WGPUVertexState$entryPoint$VH() { return WGPUVertexState$entryPoint$VH_; }

    static final MemoryLayout WGPUVertexState$bufferCount$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUVertexState$bufferCount$LAYOUT() { return WGPUVertexState$bufferCount$LAYOUT_; }

    static final VarHandle WGPUVertexState$bufferCount$VH_ = WGPUVertexState$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bufferCount"));
    static final java.lang.invoke.VarHandle WGPUVertexState$bufferCount$VH() { return WGPUVertexState$bufferCount$VH_; }

    static final MemoryLayout WGPUVertexState$buffers$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUVertexState$buffers$LAYOUT() { return WGPUVertexState$buffers$LAYOUT_; }

    static final VarHandle WGPUVertexState$buffers$VH_ = MemoryHandles.asAddressVarHandle(WGPUVertexState$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("buffers")));
    static final java.lang.invoke.VarHandle WGPUVertexState$buffers$VH() { return WGPUVertexState$buffers$VH_; }

    static final MemoryLayout WGPUFragmentState$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("nextInChain"),
        C_POINTER.withName("module"),
        C_POINTER.withName("entryPoint"),
        C_INT.withName("targetCount"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("targets")
    ).withName("WGPUFragmentState");
    static final jdk.incubator.foreign.MemoryLayout WGPUFragmentState$struct$LAYOUT() { return WGPUFragmentState$struct$LAYOUT_; }

    static final MemoryLayout WGPUFragmentState$nextInChain$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUFragmentState$nextInChain$LAYOUT() { return WGPUFragmentState$nextInChain$LAYOUT_; }

    static final VarHandle WGPUFragmentState$nextInChain$VH_ = MemoryHandles.asAddressVarHandle(WGPUFragmentState$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("nextInChain")));
    static final java.lang.invoke.VarHandle WGPUFragmentState$nextInChain$VH() { return WGPUFragmentState$nextInChain$VH_; }

    static final MemoryLayout WGPUFragmentState$module$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUFragmentState$module$LAYOUT() { return WGPUFragmentState$module$LAYOUT_; }

    static final VarHandle WGPUFragmentState$module$VH_ = MemoryHandles.asAddressVarHandle(WGPUFragmentState$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("module")));
    static final java.lang.invoke.VarHandle WGPUFragmentState$module$VH() { return WGPUFragmentState$module$VH_; }

    static final MemoryLayout WGPUFragmentState$entryPoint$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUFragmentState$entryPoint$LAYOUT() { return WGPUFragmentState$entryPoint$LAYOUT_; }

    static final VarHandle WGPUFragmentState$entryPoint$VH_ = MemoryHandles.asAddressVarHandle(WGPUFragmentState$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("entryPoint")));
    static final java.lang.invoke.VarHandle WGPUFragmentState$entryPoint$VH() { return WGPUFragmentState$entryPoint$VH_; }

    static final MemoryLayout WGPUFragmentState$targetCount$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUFragmentState$targetCount$LAYOUT() { return WGPUFragmentState$targetCount$LAYOUT_; }

    static final VarHandle WGPUFragmentState$targetCount$VH_ = WGPUFragmentState$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("targetCount"));
    static final java.lang.invoke.VarHandle WGPUFragmentState$targetCount$VH() { return WGPUFragmentState$targetCount$VH_; }

    static final MemoryLayout WGPUFragmentState$targets$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUFragmentState$targets$LAYOUT() { return WGPUFragmentState$targets$LAYOUT_; }

    static final VarHandle WGPUFragmentState$targets$VH_ = MemoryHandles.asAddressVarHandle(WGPUFragmentState$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("targets")));
    static final java.lang.invoke.VarHandle WGPUFragmentState$targets$VH() { return WGPUFragmentState$targets$VH_; }

    static final MemoryLayout WGPURenderPipelineDescriptor$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("nextInChain"),
        C_POINTER.withName("label"),
        C_POINTER.withName("layout"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("nextInChain"),
            C_POINTER.withName("module"),
            C_POINTER.withName("entryPoint"),
            C_INT.withName("bufferCount"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("buffers")
        ).withName("vertex"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("nextInChain"),
            C_INT.withName("topology"),
            C_INT.withName("stripIndexFormat"),
            C_INT.withName("frontFace"),
            C_INT.withName("cullMode")
        ).withName("primitive"),
        C_POINTER.withName("depthStencil"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("nextInChain"),
            C_INT.withName("count"),
            C_INT.withName("mask"),
            C_CHAR.withName("alphaToCoverageEnabled"),
            MemoryLayout.ofPaddingBits(56)
        ).withName("multisample"),
        C_POINTER.withName("fragment")
    ).withName("WGPURenderPipelineDescriptor");
    static final jdk.incubator.foreign.MemoryLayout WGPURenderPipelineDescriptor$struct$LAYOUT() { return WGPURenderPipelineDescriptor$struct$LAYOUT_; }

    static final MemoryLayout WGPURenderPipelineDescriptor$nextInChain$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPURenderPipelineDescriptor$nextInChain$LAYOUT() { return WGPURenderPipelineDescriptor$nextInChain$LAYOUT_; }

    static final VarHandle WGPURenderPipelineDescriptor$nextInChain$VH_ = MemoryHandles.asAddressVarHandle(WGPURenderPipelineDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("nextInChain")));
    static final java.lang.invoke.VarHandle WGPURenderPipelineDescriptor$nextInChain$VH() { return WGPURenderPipelineDescriptor$nextInChain$VH_; }

    static final MemoryLayout WGPURenderPipelineDescriptor$label$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPURenderPipelineDescriptor$label$LAYOUT() { return WGPURenderPipelineDescriptor$label$LAYOUT_; }

    static final VarHandle WGPURenderPipelineDescriptor$label$VH_ = MemoryHandles.asAddressVarHandle(WGPURenderPipelineDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("label")));
    static final java.lang.invoke.VarHandle WGPURenderPipelineDescriptor$label$VH() { return WGPURenderPipelineDescriptor$label$VH_; }

    static final MemoryLayout WGPURenderPipelineDescriptor$layout$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPURenderPipelineDescriptor$layout$LAYOUT() { return WGPURenderPipelineDescriptor$layout$LAYOUT_; }

    static final VarHandle WGPURenderPipelineDescriptor$layout$VH_ = MemoryHandles.asAddressVarHandle(WGPURenderPipelineDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("layout")));
    static final java.lang.invoke.VarHandle WGPURenderPipelineDescriptor$layout$VH() { return WGPURenderPipelineDescriptor$layout$VH_; }

    static final MemoryLayout WGPURenderPipelineDescriptor$depthStencil$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPURenderPipelineDescriptor$depthStencil$LAYOUT() { return WGPURenderPipelineDescriptor$depthStencil$LAYOUT_; }

    static final VarHandle WGPURenderPipelineDescriptor$depthStencil$VH_ = MemoryHandles.asAddressVarHandle(WGPURenderPipelineDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("depthStencil")));
    static final java.lang.invoke.VarHandle WGPURenderPipelineDescriptor$depthStencil$VH() { return WGPURenderPipelineDescriptor$depthStencil$VH_; }

    static final MemoryLayout WGPURenderPipelineDescriptor$fragment$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPURenderPipelineDescriptor$fragment$LAYOUT() { return WGPURenderPipelineDescriptor$fragment$LAYOUT_; }

    static final VarHandle WGPURenderPipelineDescriptor$fragment$VH_ = MemoryHandles.asAddressVarHandle(WGPURenderPipelineDescriptor$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("fragment")));
    static final java.lang.invoke.VarHandle WGPURenderPipelineDescriptor$fragment$VH() { return WGPURenderPipelineDescriptor$fragment$VH_; }

    static final FunctionDescriptor WGPUBufferMapCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUBufferMapCallback$FUNC() { return WGPUBufferMapCallback$FUNC_; }

    static final FunctionDescriptor WGPUCreateComputePipelineAsyncCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUCreateComputePipelineAsyncCallback$FUNC() { return WGPUCreateComputePipelineAsyncCallback$FUNC_; }

    static final FunctionDescriptor WGPUCreateRenderPipelineAsyncCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUCreateRenderPipelineAsyncCallback$FUNC() { return WGPUCreateRenderPipelineAsyncCallback$FUNC_; }

    static final FunctionDescriptor WGPUDeviceLostCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUDeviceLostCallback$FUNC() { return WGPUDeviceLostCallback$FUNC_; }

    static final FunctionDescriptor WGPUErrorCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUErrorCallback$FUNC() { return WGPUErrorCallback$FUNC_; }

    static final FunctionDescriptor WGPUQueueWorkDoneCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUQueueWorkDoneCallback$FUNC() { return WGPUQueueWorkDoneCallback$FUNC_; }

    static final FunctionDescriptor WGPURequestAdapterCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPURequestAdapterCallback$FUNC() { return WGPURequestAdapterCallback$FUNC_; }

    static final FunctionDescriptor WGPURequestDeviceCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPURequestDeviceCallback$FUNC() { return WGPURequestDeviceCallback$FUNC_; }

    static final FunctionDescriptor WGPUSurfaceGetPreferredFormatCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUSurfaceGetPreferredFormatCallback$FUNC() { return WGPUSurfaceGetPreferredFormatCallback$FUNC_; }

    static final FunctionDescriptor WGPUProc$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProc$FUNC() { return WGPUProc$FUNC_; }

    static final FunctionDescriptor WGPUProcCreateInstance$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcCreateInstance$FUNC() { return WGPUProcCreateInstance$FUNC_; }

    static final FunctionDescriptor WGPUProcGetProcAddress$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcGetProcAddress$FUNC() { return WGPUProcGetProcAddress$FUNC_; }

    static final FunctionDescriptor WGPUProcAdapterGetProperties$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcAdapterGetProperties$FUNC() { return WGPUProcAdapterGetProperties$FUNC_; }

    static final FunctionDescriptor WGPUProcAdapterRequestDevice$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcAdapterRequestDevice$FUNC() { return WGPUProcAdapterRequestDevice$FUNC_; }

    static final FunctionDescriptor WGPUProcBufferDestroy$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcBufferDestroy$FUNC() { return WGPUProcBufferDestroy$FUNC_; }

    static final FunctionDescriptor WGPUProcBufferGetConstMappedRange$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcBufferGetConstMappedRange$FUNC() { return WGPUProcBufferGetConstMappedRange$FUNC_; }

    static final FunctionDescriptor WGPUProcBufferGetMappedRange$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcBufferGetMappedRange$FUNC() { return WGPUProcBufferGetMappedRange$FUNC_; }

    static final FunctionDescriptor WGPUProcBufferMapAsync$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_LONG_LONG,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcBufferMapAsync$FUNC() { return WGPUProcBufferMapAsync$FUNC_; }

    static final FunctionDescriptor WGPUProcBufferUnmap$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcBufferUnmap$FUNC() { return WGPUProcBufferUnmap$FUNC_; }

    static final FunctionDescriptor WGPUProcCommandEncoderBeginComputePass$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcCommandEncoderBeginComputePass$FUNC() { return WGPUProcCommandEncoderBeginComputePass$FUNC_; }

    static final FunctionDescriptor WGPUProcCommandEncoderBeginRenderPass$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcCommandEncoderBeginRenderPass$FUNC() { return WGPUProcCommandEncoderBeginRenderPass$FUNC_; }

    static final FunctionDescriptor WGPUProcCommandEncoderCopyBufferToBuffer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_LONG_LONG,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcCommandEncoderCopyBufferToBuffer$FUNC() { return WGPUProcCommandEncoderCopyBufferToBuffer$FUNC_; }

    static final FunctionDescriptor WGPUProcCommandEncoderCopyBufferToTexture$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcCommandEncoderCopyBufferToTexture$FUNC() { return WGPUProcCommandEncoderCopyBufferToTexture$FUNC_; }

    static final FunctionDescriptor WGPUProcCommandEncoderCopyTextureToBuffer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcCommandEncoderCopyTextureToBuffer$FUNC() { return WGPUProcCommandEncoderCopyTextureToBuffer$FUNC_; }

    static final FunctionDescriptor WGPUProcCommandEncoderCopyTextureToTexture$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcCommandEncoderCopyTextureToTexture$FUNC() { return WGPUProcCommandEncoderCopyTextureToTexture$FUNC_; }

    static final FunctionDescriptor WGPUProcCommandEncoderFinish$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcCommandEncoderFinish$FUNC() { return WGPUProcCommandEncoderFinish$FUNC_; }

    static final FunctionDescriptor WGPUProcCommandEncoderInsertDebugMarker$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcCommandEncoderInsertDebugMarker$FUNC() { return WGPUProcCommandEncoderInsertDebugMarker$FUNC_; }

    static final FunctionDescriptor WGPUProcCommandEncoderPopDebugGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcCommandEncoderPopDebugGroup$FUNC() { return WGPUProcCommandEncoderPopDebugGroup$FUNC_; }

    static final FunctionDescriptor WGPUProcCommandEncoderPushDebugGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcCommandEncoderPushDebugGroup$FUNC() { return WGPUProcCommandEncoderPushDebugGroup$FUNC_; }

    static final FunctionDescriptor WGPUProcCommandEncoderResolveQuerySet$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcCommandEncoderResolveQuerySet$FUNC() { return WGPUProcCommandEncoderResolveQuerySet$FUNC_; }

    static final FunctionDescriptor WGPUProcCommandEncoderWriteTimestamp$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcCommandEncoderWriteTimestamp$FUNC() { return WGPUProcCommandEncoderWriteTimestamp$FUNC_; }

    static final FunctionDescriptor WGPUProcComputePassEncoderBeginPipelineStatisticsQuery$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcComputePassEncoderBeginPipelineStatisticsQuery$FUNC() { return WGPUProcComputePassEncoderBeginPipelineStatisticsQuery$FUNC_; }

    static final FunctionDescriptor WGPUProcComputePassEncoderDispatch$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcComputePassEncoderDispatch$FUNC() { return WGPUProcComputePassEncoderDispatch$FUNC_; }

    static final FunctionDescriptor WGPUProcComputePassEncoderDispatchIndirect$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcComputePassEncoderDispatchIndirect$FUNC() { return WGPUProcComputePassEncoderDispatchIndirect$FUNC_; }

    static final FunctionDescriptor WGPUProcComputePassEncoderEndPass$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcComputePassEncoderEndPass$FUNC() { return WGPUProcComputePassEncoderEndPass$FUNC_; }

    static final FunctionDescriptor WGPUProcComputePassEncoderEndPipelineStatisticsQuery$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcComputePassEncoderEndPipelineStatisticsQuery$FUNC() { return WGPUProcComputePassEncoderEndPipelineStatisticsQuery$FUNC_; }

    static final FunctionDescriptor WGPUProcComputePassEncoderInsertDebugMarker$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcComputePassEncoderInsertDebugMarker$FUNC() { return WGPUProcComputePassEncoderInsertDebugMarker$FUNC_; }

    static final FunctionDescriptor WGPUProcComputePassEncoderPopDebugGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcComputePassEncoderPopDebugGroup$FUNC() { return WGPUProcComputePassEncoderPopDebugGroup$FUNC_; }

    static final FunctionDescriptor WGPUProcComputePassEncoderPushDebugGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcComputePassEncoderPushDebugGroup$FUNC() { return WGPUProcComputePassEncoderPushDebugGroup$FUNC_; }

    static final FunctionDescriptor WGPUProcComputePassEncoderSetBindGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcComputePassEncoderSetBindGroup$FUNC() { return WGPUProcComputePassEncoderSetBindGroup$FUNC_; }

    static final FunctionDescriptor WGPUProcComputePassEncoderSetPipeline$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcComputePassEncoderSetPipeline$FUNC() { return WGPUProcComputePassEncoderSetPipeline$FUNC_; }

    static final FunctionDescriptor WGPUProcComputePassEncoderWriteTimestamp$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcComputePassEncoderWriteTimestamp$FUNC() { return WGPUProcComputePassEncoderWriteTimestamp$FUNC_; }

    static final FunctionDescriptor WGPUProcComputePipelineGetBindGroupLayout$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcComputePipelineGetBindGroupLayout$FUNC() { return WGPUProcComputePipelineGetBindGroupLayout$FUNC_; }

    static final FunctionDescriptor WGPUProcDeviceCreateBindGroup$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDeviceCreateBindGroup$FUNC() { return WGPUProcDeviceCreateBindGroup$FUNC_; }

    static final FunctionDescriptor WGPUProcDeviceCreateBindGroupLayout$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDeviceCreateBindGroupLayout$FUNC() { return WGPUProcDeviceCreateBindGroupLayout$FUNC_; }

    static final FunctionDescriptor WGPUProcDeviceCreateBuffer$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDeviceCreateBuffer$FUNC() { return WGPUProcDeviceCreateBuffer$FUNC_; }

    static final FunctionDescriptor WGPUProcDeviceCreateCommandEncoder$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDeviceCreateCommandEncoder$FUNC() { return WGPUProcDeviceCreateCommandEncoder$FUNC_; }

    static final FunctionDescriptor WGPUProcDeviceCreateComputePipeline$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDeviceCreateComputePipeline$FUNC() { return WGPUProcDeviceCreateComputePipeline$FUNC_; }

    static final FunctionDescriptor WGPUProcDeviceCreateComputePipelineAsync$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDeviceCreateComputePipelineAsync$FUNC() { return WGPUProcDeviceCreateComputePipelineAsync$FUNC_; }

    static final FunctionDescriptor WGPUProcDeviceCreatePipelineLayout$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDeviceCreatePipelineLayout$FUNC() { return WGPUProcDeviceCreatePipelineLayout$FUNC_; }

    static final FunctionDescriptor WGPUProcDeviceCreateQuerySet$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDeviceCreateQuerySet$FUNC() { return WGPUProcDeviceCreateQuerySet$FUNC_; }

    static final FunctionDescriptor WGPUProcDeviceCreateRenderBundleEncoder$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDeviceCreateRenderBundleEncoder$FUNC() { return WGPUProcDeviceCreateRenderBundleEncoder$FUNC_; }

    static final FunctionDescriptor WGPUProcDeviceCreateRenderPipeline$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDeviceCreateRenderPipeline$FUNC() { return WGPUProcDeviceCreateRenderPipeline$FUNC_; }

    static final FunctionDescriptor WGPUProcDeviceCreateRenderPipelineAsync$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDeviceCreateRenderPipelineAsync$FUNC() { return WGPUProcDeviceCreateRenderPipelineAsync$FUNC_; }

    static final FunctionDescriptor WGPUProcDeviceCreateSampler$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDeviceCreateSampler$FUNC() { return WGPUProcDeviceCreateSampler$FUNC_; }

    static final FunctionDescriptor WGPUProcDeviceCreateShaderModule$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDeviceCreateShaderModule$FUNC() { return WGPUProcDeviceCreateShaderModule$FUNC_; }

    static final FunctionDescriptor WGPUProcDeviceCreateSwapChain$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDeviceCreateSwapChain$FUNC() { return WGPUProcDeviceCreateSwapChain$FUNC_; }

    static final FunctionDescriptor WGPUProcDeviceCreateTexture$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDeviceCreateTexture$FUNC() { return WGPUProcDeviceCreateTexture$FUNC_; }

    static final FunctionDescriptor WGPUProcDeviceGetQueue$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDeviceGetQueue$FUNC() { return WGPUProcDeviceGetQueue$FUNC_; }

    static final FunctionDescriptor WGPUProcDevicePopErrorScope$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDevicePopErrorScope$FUNC() { return WGPUProcDevicePopErrorScope$FUNC_; }

    static final FunctionDescriptor WGPUProcDevicePushErrorScope$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDevicePushErrorScope$FUNC() { return WGPUProcDevicePushErrorScope$FUNC_; }

    static final FunctionDescriptor WGPUProcDeviceSetDeviceLostCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDeviceSetDeviceLostCallback$FUNC() { return WGPUProcDeviceSetDeviceLostCallback$FUNC_; }

    static final FunctionDescriptor WGPUProcDeviceSetUncapturedErrorCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcDeviceSetUncapturedErrorCallback$FUNC() { return WGPUProcDeviceSetUncapturedErrorCallback$FUNC_; }

    static final FunctionDescriptor WGPUProcInstanceCreateSurface$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcInstanceCreateSurface$FUNC() { return WGPUProcInstanceCreateSurface$FUNC_; }

    static final FunctionDescriptor WGPUProcInstanceProcessEvents$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcInstanceProcessEvents$FUNC() { return WGPUProcInstanceProcessEvents$FUNC_; }

    static final FunctionDescriptor WGPUProcInstanceRequestAdapter$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcInstanceRequestAdapter$FUNC() { return WGPUProcInstanceRequestAdapter$FUNC_; }

    static final FunctionDescriptor WGPUProcQuerySetDestroy$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcQuerySetDestroy$FUNC() { return WGPUProcQuerySetDestroy$FUNC_; }

    static final FunctionDescriptor WGPUProcQueueOnSubmittedWorkDone$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcQueueOnSubmittedWorkDone$FUNC() { return WGPUProcQueueOnSubmittedWorkDone$FUNC_; }

    static final FunctionDescriptor WGPUProcQueueSubmit$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcQueueSubmit$FUNC() { return WGPUProcQueueSubmit$FUNC_; }

    static final FunctionDescriptor WGPUProcQueueWriteBuffer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcQueueWriteBuffer$FUNC() { return WGPUProcQueueWriteBuffer$FUNC_; }

    static final FunctionDescriptor WGPUProcQueueWriteTexture$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcQueueWriteTexture$FUNC() { return WGPUProcQueueWriteTexture$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderBundleEncoderDraw$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderBundleEncoderDraw$FUNC() { return WGPUProcRenderBundleEncoderDraw$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderBundleEncoderDrawIndexed$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderBundleEncoderDrawIndexed$FUNC() { return WGPUProcRenderBundleEncoderDrawIndexed$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderBundleEncoderDrawIndexedIndirect$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderBundleEncoderDrawIndexedIndirect$FUNC() { return WGPUProcRenderBundleEncoderDrawIndexedIndirect$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderBundleEncoderDrawIndirect$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderBundleEncoderDrawIndirect$FUNC() { return WGPUProcRenderBundleEncoderDrawIndirect$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderBundleEncoderFinish$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderBundleEncoderFinish$FUNC() { return WGPUProcRenderBundleEncoderFinish$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderBundleEncoderInsertDebugMarker$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderBundleEncoderInsertDebugMarker$FUNC() { return WGPUProcRenderBundleEncoderInsertDebugMarker$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderBundleEncoderPopDebugGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderBundleEncoderPopDebugGroup$FUNC() { return WGPUProcRenderBundleEncoderPopDebugGroup$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderBundleEncoderPushDebugGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderBundleEncoderPushDebugGroup$FUNC() { return WGPUProcRenderBundleEncoderPushDebugGroup$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderBundleEncoderSetBindGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderBundleEncoderSetBindGroup$FUNC() { return WGPUProcRenderBundleEncoderSetBindGroup$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderBundleEncoderSetIndexBuffer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONG_LONG,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderBundleEncoderSetIndexBuffer$FUNC() { return WGPUProcRenderBundleEncoderSetIndexBuffer$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderBundleEncoderSetPipeline$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderBundleEncoderSetPipeline$FUNC() { return WGPUProcRenderBundleEncoderSetPipeline$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderBundleEncoderSetVertexBuffer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONG_LONG,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderBundleEncoderSetVertexBuffer$FUNC() { return WGPUProcRenderBundleEncoderSetVertexBuffer$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderBeginOcclusionQuery$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderBeginOcclusionQuery$FUNC() { return WGPUProcRenderPassEncoderBeginOcclusionQuery$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery$FUNC() { return WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderDraw$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderDraw$FUNC() { return WGPUProcRenderPassEncoderDraw$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderDrawIndexed$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderDrawIndexed$FUNC() { return WGPUProcRenderPassEncoderDrawIndexed$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderDrawIndexedIndirect$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderDrawIndexedIndirect$FUNC() { return WGPUProcRenderPassEncoderDrawIndexedIndirect$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderDrawIndirect$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderDrawIndirect$FUNC() { return WGPUProcRenderPassEncoderDrawIndirect$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderEndOcclusionQuery$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderEndOcclusionQuery$FUNC() { return WGPUProcRenderPassEncoderEndOcclusionQuery$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderEndPass$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderEndPass$FUNC() { return WGPUProcRenderPassEncoderEndPass$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderEndPipelineStatisticsQuery$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderEndPipelineStatisticsQuery$FUNC() { return WGPUProcRenderPassEncoderEndPipelineStatisticsQuery$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderExecuteBundles$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderExecuteBundles$FUNC() { return WGPUProcRenderPassEncoderExecuteBundles$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderInsertDebugMarker$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderInsertDebugMarker$FUNC() { return WGPUProcRenderPassEncoderInsertDebugMarker$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderPopDebugGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderPopDebugGroup$FUNC() { return WGPUProcRenderPassEncoderPopDebugGroup$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderPushDebugGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderPushDebugGroup$FUNC() { return WGPUProcRenderPassEncoderPushDebugGroup$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderSetBindGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderSetBindGroup$FUNC() { return WGPUProcRenderPassEncoderSetBindGroup$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderSetBlendColor$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderSetBlendColor$FUNC() { return WGPUProcRenderPassEncoderSetBlendColor$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderSetIndexBuffer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONG_LONG,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderSetIndexBuffer$FUNC() { return WGPUProcRenderPassEncoderSetIndexBuffer$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderSetPipeline$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderSetPipeline$FUNC() { return WGPUProcRenderPassEncoderSetPipeline$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderSetScissorRect$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderSetScissorRect$FUNC() { return WGPUProcRenderPassEncoderSetScissorRect$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderSetStencilReference$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderSetStencilReference$FUNC() { return WGPUProcRenderPassEncoderSetStencilReference$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderSetVertexBuffer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONG_LONG,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderSetVertexBuffer$FUNC() { return WGPUProcRenderPassEncoderSetVertexBuffer$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderSetViewport$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_FLOAT,
        C_FLOAT,
        C_FLOAT,
        C_FLOAT,
        C_FLOAT,
        C_FLOAT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderSetViewport$FUNC() { return WGPUProcRenderPassEncoderSetViewport$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPassEncoderWriteTimestamp$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPassEncoderWriteTimestamp$FUNC() { return WGPUProcRenderPassEncoderWriteTimestamp$FUNC_; }

    static final FunctionDescriptor WGPUProcRenderPipelineGetBindGroupLayout$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcRenderPipelineGetBindGroupLayout$FUNC() { return WGPUProcRenderPipelineGetBindGroupLayout$FUNC_; }

    static final FunctionDescriptor WGPUProcSurfaceGetPreferredFormat$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcSurfaceGetPreferredFormat$FUNC() { return WGPUProcSurfaceGetPreferredFormat$FUNC_; }

    static final FunctionDescriptor WGPUProcSwapChainGetCurrentTextureView$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcSwapChainGetCurrentTextureView$FUNC() { return WGPUProcSwapChainGetCurrentTextureView$FUNC_; }

    static final FunctionDescriptor WGPUProcSwapChainPresent$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcSwapChainPresent$FUNC() { return WGPUProcSwapChainPresent$FUNC_; }

    static final FunctionDescriptor WGPUProcTextureCreateView$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcTextureCreateView$FUNC() { return WGPUProcTextureCreateView$FUNC_; }

    static final FunctionDescriptor WGPUProcTextureDestroy$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPUProcTextureDestroy$FUNC() { return WGPUProcTextureDestroy$FUNC_; }

    static final FunctionDescriptor wgpuCreateInstance$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuCreateInstance$FUNC() { return wgpuCreateInstance$FUNC_; }

    static final MethodHandle wgpuCreateInstance$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuCreateInstance",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuCreateInstance$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuCreateInstance$MH() { return wgpuCreateInstance$MH_; }

    static final FunctionDescriptor wgpuGetProcAddress$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuGetProcAddress$FUNC() { return wgpuGetProcAddress$FUNC_; }

    static final MethodHandle wgpuGetProcAddress$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuGetProcAddress",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuGetProcAddress$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuGetProcAddress$MH() { return wgpuGetProcAddress$MH_; }

    static final FunctionDescriptor wgpuAdapterGetProperties$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuAdapterGetProperties$FUNC() { return wgpuAdapterGetProperties$FUNC_; }

    static final MethodHandle wgpuAdapterGetProperties$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuAdapterGetProperties",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuAdapterGetProperties$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuAdapterGetProperties$MH() { return wgpuAdapterGetProperties$MH_; }

    static final FunctionDescriptor wgpuAdapterRequestDevice$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuAdapterRequestDevice$FUNC() { return wgpuAdapterRequestDevice$FUNC_; }

    static final MethodHandle wgpuAdapterRequestDevice$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuAdapterRequestDevice",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuAdapterRequestDevice$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuAdapterRequestDevice$MH() { return wgpuAdapterRequestDevice$MH_; }

    static final FunctionDescriptor wgpuBufferDestroy$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuBufferDestroy$FUNC() { return wgpuBufferDestroy$FUNC_; }

    static final MethodHandle wgpuBufferDestroy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuBufferDestroy",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuBufferDestroy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuBufferDestroy$MH() { return wgpuBufferDestroy$MH_; }

    static final FunctionDescriptor wgpuBufferGetConstMappedRange$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuBufferGetConstMappedRange$FUNC() { return wgpuBufferGetConstMappedRange$FUNC_; }

    static final MethodHandle wgpuBufferGetConstMappedRange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuBufferGetConstMappedRange",
        "(Ljdk/incubator/foreign/MemoryAddress;JJ)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuBufferGetConstMappedRange$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuBufferGetConstMappedRange$MH() { return wgpuBufferGetConstMappedRange$MH_; }

    static final FunctionDescriptor wgpuBufferGetMappedRange$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuBufferGetMappedRange$FUNC() { return wgpuBufferGetMappedRange$FUNC_; }

    static final MethodHandle wgpuBufferGetMappedRange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuBufferGetMappedRange",
        "(Ljdk/incubator/foreign/MemoryAddress;JJ)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuBufferGetMappedRange$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuBufferGetMappedRange$MH() { return wgpuBufferGetMappedRange$MH_; }

    static final FunctionDescriptor wgpuBufferMapAsync$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_LONG_LONG,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuBufferMapAsync$FUNC() { return wgpuBufferMapAsync$FUNC_; }

    static final MethodHandle wgpuBufferMapAsync$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuBufferMapAsync",
        "(Ljdk/incubator/foreign/MemoryAddress;IJJLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuBufferMapAsync$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuBufferMapAsync$MH() { return wgpuBufferMapAsync$MH_; }

    static final FunctionDescriptor wgpuBufferUnmap$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuBufferUnmap$FUNC() { return wgpuBufferUnmap$FUNC_; }

    static final MethodHandle wgpuBufferUnmap$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuBufferUnmap",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuBufferUnmap$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuBufferUnmap$MH() { return wgpuBufferUnmap$MH_; }

    static final FunctionDescriptor wgpuCommandEncoderBeginComputePass$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuCommandEncoderBeginComputePass$FUNC() { return wgpuCommandEncoderBeginComputePass$FUNC_; }

    static final MethodHandle wgpuCommandEncoderBeginComputePass$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuCommandEncoderBeginComputePass",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuCommandEncoderBeginComputePass$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuCommandEncoderBeginComputePass$MH() { return wgpuCommandEncoderBeginComputePass$MH_; }

    static final FunctionDescriptor wgpuCommandEncoderBeginRenderPass$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuCommandEncoderBeginRenderPass$FUNC() { return wgpuCommandEncoderBeginRenderPass$FUNC_; }

    static final MethodHandle wgpuCommandEncoderBeginRenderPass$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuCommandEncoderBeginRenderPass",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuCommandEncoderBeginRenderPass$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuCommandEncoderBeginRenderPass$MH() { return wgpuCommandEncoderBeginRenderPass$MH_; }

    static final FunctionDescriptor wgpuCommandEncoderCopyBufferToBuffer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_LONG_LONG,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuCommandEncoderCopyBufferToBuffer$FUNC() { return wgpuCommandEncoderCopyBufferToBuffer$FUNC_; }

    static final MethodHandle wgpuCommandEncoderCopyBufferToBuffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuCommandEncoderCopyBufferToBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;JJ)V",
        wgpuCommandEncoderCopyBufferToBuffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuCommandEncoderCopyBufferToBuffer$MH() { return wgpuCommandEncoderCopyBufferToBuffer$MH_; }

    static final FunctionDescriptor wgpuCommandEncoderCopyBufferToTexture$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuCommandEncoderCopyBufferToTexture$FUNC() { return wgpuCommandEncoderCopyBufferToTexture$FUNC_; }

    static final MethodHandle wgpuCommandEncoderCopyBufferToTexture$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuCommandEncoderCopyBufferToTexture",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuCommandEncoderCopyBufferToTexture$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuCommandEncoderCopyBufferToTexture$MH() { return wgpuCommandEncoderCopyBufferToTexture$MH_; }

    static final FunctionDescriptor wgpuCommandEncoderCopyTextureToBuffer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuCommandEncoderCopyTextureToBuffer$FUNC() { return wgpuCommandEncoderCopyTextureToBuffer$FUNC_; }

    static final MethodHandle wgpuCommandEncoderCopyTextureToBuffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuCommandEncoderCopyTextureToBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuCommandEncoderCopyTextureToBuffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuCommandEncoderCopyTextureToBuffer$MH() { return wgpuCommandEncoderCopyTextureToBuffer$MH_; }

    static final FunctionDescriptor wgpuCommandEncoderCopyTextureToTexture$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuCommandEncoderCopyTextureToTexture$FUNC() { return wgpuCommandEncoderCopyTextureToTexture$FUNC_; }

    static final MethodHandle wgpuCommandEncoderCopyTextureToTexture$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuCommandEncoderCopyTextureToTexture",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuCommandEncoderCopyTextureToTexture$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuCommandEncoderCopyTextureToTexture$MH() { return wgpuCommandEncoderCopyTextureToTexture$MH_; }

    static final FunctionDescriptor wgpuCommandEncoderFinish$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuCommandEncoderFinish$FUNC() { return wgpuCommandEncoderFinish$FUNC_; }

    static final MethodHandle wgpuCommandEncoderFinish$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuCommandEncoderFinish",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuCommandEncoderFinish$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuCommandEncoderFinish$MH() { return wgpuCommandEncoderFinish$MH_; }

    static final FunctionDescriptor wgpuCommandEncoderInsertDebugMarker$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuCommandEncoderInsertDebugMarker$FUNC() { return wgpuCommandEncoderInsertDebugMarker$FUNC_; }

    static final MethodHandle wgpuCommandEncoderInsertDebugMarker$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuCommandEncoderInsertDebugMarker",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuCommandEncoderInsertDebugMarker$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuCommandEncoderInsertDebugMarker$MH() { return wgpuCommandEncoderInsertDebugMarker$MH_; }

    static final FunctionDescriptor wgpuCommandEncoderPopDebugGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuCommandEncoderPopDebugGroup$FUNC() { return wgpuCommandEncoderPopDebugGroup$FUNC_; }

    static final MethodHandle wgpuCommandEncoderPopDebugGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuCommandEncoderPopDebugGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuCommandEncoderPopDebugGroup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuCommandEncoderPopDebugGroup$MH() { return wgpuCommandEncoderPopDebugGroup$MH_; }

    static final FunctionDescriptor wgpuCommandEncoderPushDebugGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuCommandEncoderPushDebugGroup$FUNC() { return wgpuCommandEncoderPushDebugGroup$FUNC_; }

    static final MethodHandle wgpuCommandEncoderPushDebugGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuCommandEncoderPushDebugGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuCommandEncoderPushDebugGroup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuCommandEncoderPushDebugGroup$MH() { return wgpuCommandEncoderPushDebugGroup$MH_; }

    static final FunctionDescriptor wgpuCommandEncoderResolveQuerySet$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuCommandEncoderResolveQuerySet$FUNC() { return wgpuCommandEncoderResolveQuerySet$FUNC_; }

    static final MethodHandle wgpuCommandEncoderResolveQuerySet$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuCommandEncoderResolveQuerySet",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;J)V",
        wgpuCommandEncoderResolveQuerySet$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuCommandEncoderResolveQuerySet$MH() { return wgpuCommandEncoderResolveQuerySet$MH_; }

    static final FunctionDescriptor wgpuCommandEncoderWriteTimestamp$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuCommandEncoderWriteTimestamp$FUNC() { return wgpuCommandEncoderWriteTimestamp$FUNC_; }

    static final MethodHandle wgpuCommandEncoderWriteTimestamp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuCommandEncoderWriteTimestamp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        wgpuCommandEncoderWriteTimestamp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuCommandEncoderWriteTimestamp$MH() { return wgpuCommandEncoderWriteTimestamp$MH_; }

    static final FunctionDescriptor wgpuComputePassEncoderBeginPipelineStatisticsQuery$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuComputePassEncoderBeginPipelineStatisticsQuery$FUNC() { return wgpuComputePassEncoderBeginPipelineStatisticsQuery$FUNC_; }

    static final MethodHandle wgpuComputePassEncoderBeginPipelineStatisticsQuery$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuComputePassEncoderBeginPipelineStatisticsQuery",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        wgpuComputePassEncoderBeginPipelineStatisticsQuery$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuComputePassEncoderBeginPipelineStatisticsQuery$MH() { return wgpuComputePassEncoderBeginPipelineStatisticsQuery$MH_; }

    static final FunctionDescriptor wgpuComputePassEncoderDispatch$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuComputePassEncoderDispatch$FUNC() { return wgpuComputePassEncoderDispatch$FUNC_; }

    static final MethodHandle wgpuComputePassEncoderDispatch$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuComputePassEncoderDispatch",
        "(Ljdk/incubator/foreign/MemoryAddress;III)V",
        wgpuComputePassEncoderDispatch$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuComputePassEncoderDispatch$MH() { return wgpuComputePassEncoderDispatch$MH_; }

    static final FunctionDescriptor wgpuComputePassEncoderDispatchIndirect$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuComputePassEncoderDispatchIndirect$FUNC() { return wgpuComputePassEncoderDispatchIndirect$FUNC_; }

    static final MethodHandle wgpuComputePassEncoderDispatchIndirect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuComputePassEncoderDispatchIndirect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)V",
        wgpuComputePassEncoderDispatchIndirect$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuComputePassEncoderDispatchIndirect$MH() { return wgpuComputePassEncoderDispatchIndirect$MH_; }

    static final FunctionDescriptor wgpuComputePassEncoderEndPass$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuComputePassEncoderEndPass$FUNC() { return wgpuComputePassEncoderEndPass$FUNC_; }

    static final MethodHandle wgpuComputePassEncoderEndPass$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuComputePassEncoderEndPass",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuComputePassEncoderEndPass$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuComputePassEncoderEndPass$MH() { return wgpuComputePassEncoderEndPass$MH_; }

    static final FunctionDescriptor wgpuComputePassEncoderEndPipelineStatisticsQuery$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuComputePassEncoderEndPipelineStatisticsQuery$FUNC() { return wgpuComputePassEncoderEndPipelineStatisticsQuery$FUNC_; }

    static final MethodHandle wgpuComputePassEncoderEndPipelineStatisticsQuery$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuComputePassEncoderEndPipelineStatisticsQuery",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuComputePassEncoderEndPipelineStatisticsQuery$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuComputePassEncoderEndPipelineStatisticsQuery$MH() { return wgpuComputePassEncoderEndPipelineStatisticsQuery$MH_; }

    static final FunctionDescriptor wgpuComputePassEncoderInsertDebugMarker$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuComputePassEncoderInsertDebugMarker$FUNC() { return wgpuComputePassEncoderInsertDebugMarker$FUNC_; }

    static final MethodHandle wgpuComputePassEncoderInsertDebugMarker$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuComputePassEncoderInsertDebugMarker",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuComputePassEncoderInsertDebugMarker$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuComputePassEncoderInsertDebugMarker$MH() { return wgpuComputePassEncoderInsertDebugMarker$MH_; }

    static final FunctionDescriptor wgpuComputePassEncoderPopDebugGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuComputePassEncoderPopDebugGroup$FUNC() { return wgpuComputePassEncoderPopDebugGroup$FUNC_; }

    static final MethodHandle wgpuComputePassEncoderPopDebugGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuComputePassEncoderPopDebugGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuComputePassEncoderPopDebugGroup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuComputePassEncoderPopDebugGroup$MH() { return wgpuComputePassEncoderPopDebugGroup$MH_; }

    static final FunctionDescriptor wgpuComputePassEncoderPushDebugGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuComputePassEncoderPushDebugGroup$FUNC() { return wgpuComputePassEncoderPushDebugGroup$FUNC_; }

    static final MethodHandle wgpuComputePassEncoderPushDebugGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuComputePassEncoderPushDebugGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuComputePassEncoderPushDebugGroup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuComputePassEncoderPushDebugGroup$MH() { return wgpuComputePassEncoderPushDebugGroup$MH_; }

    static final FunctionDescriptor wgpuComputePassEncoderSetBindGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuComputePassEncoderSetBindGroup$FUNC() { return wgpuComputePassEncoderSetBindGroup$FUNC_; }

    static final MethodHandle wgpuComputePassEncoderSetBindGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuComputePassEncoderSetBindGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V",
        wgpuComputePassEncoderSetBindGroup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuComputePassEncoderSetBindGroup$MH() { return wgpuComputePassEncoderSetBindGroup$MH_; }

    static final FunctionDescriptor wgpuComputePassEncoderSetPipeline$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuComputePassEncoderSetPipeline$FUNC() { return wgpuComputePassEncoderSetPipeline$FUNC_; }

    static final MethodHandle wgpuComputePassEncoderSetPipeline$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuComputePassEncoderSetPipeline",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuComputePassEncoderSetPipeline$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuComputePassEncoderSetPipeline$MH() { return wgpuComputePassEncoderSetPipeline$MH_; }

    static final FunctionDescriptor wgpuComputePassEncoderWriteTimestamp$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuComputePassEncoderWriteTimestamp$FUNC() { return wgpuComputePassEncoderWriteTimestamp$FUNC_; }

    static final MethodHandle wgpuComputePassEncoderWriteTimestamp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuComputePassEncoderWriteTimestamp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        wgpuComputePassEncoderWriteTimestamp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuComputePassEncoderWriteTimestamp$MH() { return wgpuComputePassEncoderWriteTimestamp$MH_; }

    static final FunctionDescriptor wgpuComputePipelineGetBindGroupLayout$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuComputePipelineGetBindGroupLayout$FUNC() { return wgpuComputePipelineGetBindGroupLayout$FUNC_; }

    static final MethodHandle wgpuComputePipelineGetBindGroupLayout$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuComputePipelineGetBindGroupLayout",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuComputePipelineGetBindGroupLayout$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuComputePipelineGetBindGroupLayout$MH() { return wgpuComputePipelineGetBindGroupLayout$MH_; }

    static final FunctionDescriptor wgpuDeviceCreateBindGroup$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDeviceCreateBindGroup$FUNC() { return wgpuDeviceCreateBindGroup$FUNC_; }

    static final MethodHandle wgpuDeviceCreateBindGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDeviceCreateBindGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuDeviceCreateBindGroup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDeviceCreateBindGroup$MH() { return wgpuDeviceCreateBindGroup$MH_; }

    static final FunctionDescriptor wgpuDeviceCreateBindGroupLayout$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDeviceCreateBindGroupLayout$FUNC() { return wgpuDeviceCreateBindGroupLayout$FUNC_; }

    static final MethodHandle wgpuDeviceCreateBindGroupLayout$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDeviceCreateBindGroupLayout",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuDeviceCreateBindGroupLayout$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDeviceCreateBindGroupLayout$MH() { return wgpuDeviceCreateBindGroupLayout$MH_; }

    static final FunctionDescriptor wgpuDeviceCreateBuffer$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDeviceCreateBuffer$FUNC() { return wgpuDeviceCreateBuffer$FUNC_; }

    static final MethodHandle wgpuDeviceCreateBuffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDeviceCreateBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuDeviceCreateBuffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDeviceCreateBuffer$MH() { return wgpuDeviceCreateBuffer$MH_; }

    static final FunctionDescriptor wgpuDeviceCreateCommandEncoder$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDeviceCreateCommandEncoder$FUNC() { return wgpuDeviceCreateCommandEncoder$FUNC_; }

    static final MethodHandle wgpuDeviceCreateCommandEncoder$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDeviceCreateCommandEncoder",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuDeviceCreateCommandEncoder$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDeviceCreateCommandEncoder$MH() { return wgpuDeviceCreateCommandEncoder$MH_; }

    static final FunctionDescriptor wgpuDeviceCreateComputePipeline$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDeviceCreateComputePipeline$FUNC() { return wgpuDeviceCreateComputePipeline$FUNC_; }

    static final MethodHandle wgpuDeviceCreateComputePipeline$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDeviceCreateComputePipeline",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuDeviceCreateComputePipeline$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDeviceCreateComputePipeline$MH() { return wgpuDeviceCreateComputePipeline$MH_; }

    static final FunctionDescriptor wgpuDeviceCreateComputePipelineAsync$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDeviceCreateComputePipelineAsync$FUNC() { return wgpuDeviceCreateComputePipelineAsync$FUNC_; }

    static final MethodHandle wgpuDeviceCreateComputePipelineAsync$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDeviceCreateComputePipelineAsync",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuDeviceCreateComputePipelineAsync$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDeviceCreateComputePipelineAsync$MH() { return wgpuDeviceCreateComputePipelineAsync$MH_; }

    static final FunctionDescriptor wgpuDeviceCreatePipelineLayout$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDeviceCreatePipelineLayout$FUNC() { return wgpuDeviceCreatePipelineLayout$FUNC_; }

    static final MethodHandle wgpuDeviceCreatePipelineLayout$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDeviceCreatePipelineLayout",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuDeviceCreatePipelineLayout$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDeviceCreatePipelineLayout$MH() { return wgpuDeviceCreatePipelineLayout$MH_; }

    static final FunctionDescriptor wgpuDeviceCreateQuerySet$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDeviceCreateQuerySet$FUNC() { return wgpuDeviceCreateQuerySet$FUNC_; }

    static final MethodHandle wgpuDeviceCreateQuerySet$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDeviceCreateQuerySet",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuDeviceCreateQuerySet$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDeviceCreateQuerySet$MH() { return wgpuDeviceCreateQuerySet$MH_; }

    static final FunctionDescriptor wgpuDeviceCreateRenderBundleEncoder$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDeviceCreateRenderBundleEncoder$FUNC() { return wgpuDeviceCreateRenderBundleEncoder$FUNC_; }

    static final MethodHandle wgpuDeviceCreateRenderBundleEncoder$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDeviceCreateRenderBundleEncoder",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuDeviceCreateRenderBundleEncoder$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDeviceCreateRenderBundleEncoder$MH() { return wgpuDeviceCreateRenderBundleEncoder$MH_; }

    static final FunctionDescriptor wgpuDeviceCreateRenderPipeline$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDeviceCreateRenderPipeline$FUNC() { return wgpuDeviceCreateRenderPipeline$FUNC_; }

    static final MethodHandle wgpuDeviceCreateRenderPipeline$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDeviceCreateRenderPipeline",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuDeviceCreateRenderPipeline$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDeviceCreateRenderPipeline$MH() { return wgpuDeviceCreateRenderPipeline$MH_; }

    static final FunctionDescriptor wgpuDeviceCreateRenderPipelineAsync$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDeviceCreateRenderPipelineAsync$FUNC() { return wgpuDeviceCreateRenderPipelineAsync$FUNC_; }

    static final MethodHandle wgpuDeviceCreateRenderPipelineAsync$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDeviceCreateRenderPipelineAsync",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuDeviceCreateRenderPipelineAsync$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDeviceCreateRenderPipelineAsync$MH() { return wgpuDeviceCreateRenderPipelineAsync$MH_; }

    static final FunctionDescriptor wgpuDeviceCreateSampler$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDeviceCreateSampler$FUNC() { return wgpuDeviceCreateSampler$FUNC_; }

    static final MethodHandle wgpuDeviceCreateSampler$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDeviceCreateSampler",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuDeviceCreateSampler$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDeviceCreateSampler$MH() { return wgpuDeviceCreateSampler$MH_; }

    static final FunctionDescriptor wgpuDeviceCreateShaderModule$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDeviceCreateShaderModule$FUNC() { return wgpuDeviceCreateShaderModule$FUNC_; }

    static final MethodHandle wgpuDeviceCreateShaderModule$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDeviceCreateShaderModule",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuDeviceCreateShaderModule$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDeviceCreateShaderModule$MH() { return wgpuDeviceCreateShaderModule$MH_; }

    static final FunctionDescriptor wgpuDeviceCreateSwapChain$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDeviceCreateSwapChain$FUNC() { return wgpuDeviceCreateSwapChain$FUNC_; }

    static final MethodHandle wgpuDeviceCreateSwapChain$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDeviceCreateSwapChain",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuDeviceCreateSwapChain$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDeviceCreateSwapChain$MH() { return wgpuDeviceCreateSwapChain$MH_; }

    static final FunctionDescriptor wgpuDeviceCreateTexture$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDeviceCreateTexture$FUNC() { return wgpuDeviceCreateTexture$FUNC_; }

    static final MethodHandle wgpuDeviceCreateTexture$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDeviceCreateTexture",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuDeviceCreateTexture$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDeviceCreateTexture$MH() { return wgpuDeviceCreateTexture$MH_; }

    static final FunctionDescriptor wgpuDeviceGetQueue$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDeviceGetQueue$FUNC() { return wgpuDeviceGetQueue$FUNC_; }

    static final MethodHandle wgpuDeviceGetQueue$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDeviceGetQueue",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuDeviceGetQueue$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDeviceGetQueue$MH() { return wgpuDeviceGetQueue$MH_; }

    static final FunctionDescriptor wgpuDevicePopErrorScope$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDevicePopErrorScope$FUNC() { return wgpuDevicePopErrorScope$FUNC_; }

    static final MethodHandle wgpuDevicePopErrorScope$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDevicePopErrorScope",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)B",
        wgpuDevicePopErrorScope$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDevicePopErrorScope$MH() { return wgpuDevicePopErrorScope$MH_; }

    static final FunctionDescriptor wgpuDevicePushErrorScope$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDevicePushErrorScope$FUNC() { return wgpuDevicePushErrorScope$FUNC_; }

    static final MethodHandle wgpuDevicePushErrorScope$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDevicePushErrorScope",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        wgpuDevicePushErrorScope$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDevicePushErrorScope$MH() { return wgpuDevicePushErrorScope$MH_; }

    static final FunctionDescriptor wgpuDeviceSetDeviceLostCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDeviceSetDeviceLostCallback$FUNC() { return wgpuDeviceSetDeviceLostCallback$FUNC_; }

    static final MethodHandle wgpuDeviceSetDeviceLostCallback$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDeviceSetDeviceLostCallback",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuDeviceSetDeviceLostCallback$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDeviceSetDeviceLostCallback$MH() { return wgpuDeviceSetDeviceLostCallback$MH_; }

    static final FunctionDescriptor wgpuDeviceSetUncapturedErrorCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDeviceSetUncapturedErrorCallback$FUNC() { return wgpuDeviceSetUncapturedErrorCallback$FUNC_; }

    static final MethodHandle wgpuDeviceSetUncapturedErrorCallback$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDeviceSetUncapturedErrorCallback",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuDeviceSetUncapturedErrorCallback$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDeviceSetUncapturedErrorCallback$MH() { return wgpuDeviceSetUncapturedErrorCallback$MH_; }

    static final FunctionDescriptor wgpuInstanceCreateSurface$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuInstanceCreateSurface$FUNC() { return wgpuInstanceCreateSurface$FUNC_; }

    static final MethodHandle wgpuInstanceCreateSurface$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuInstanceCreateSurface",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuInstanceCreateSurface$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuInstanceCreateSurface$MH() { return wgpuInstanceCreateSurface$MH_; }

    static final FunctionDescriptor wgpuInstanceProcessEvents$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuInstanceProcessEvents$FUNC() { return wgpuInstanceProcessEvents$FUNC_; }

    static final MethodHandle wgpuInstanceProcessEvents$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuInstanceProcessEvents",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuInstanceProcessEvents$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuInstanceProcessEvents$MH() { return wgpuInstanceProcessEvents$MH_; }

    static final FunctionDescriptor wgpuInstanceRequestAdapter$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuInstanceRequestAdapter$FUNC() { return wgpuInstanceRequestAdapter$FUNC_; }

    static final MethodHandle wgpuInstanceRequestAdapter$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuInstanceRequestAdapter",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuInstanceRequestAdapter$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuInstanceRequestAdapter$MH() { return wgpuInstanceRequestAdapter$MH_; }

    static final FunctionDescriptor wgpuQuerySetDestroy$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuQuerySetDestroy$FUNC() { return wgpuQuerySetDestroy$FUNC_; }

    static final MethodHandle wgpuQuerySetDestroy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuQuerySetDestroy",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuQuerySetDestroy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuQuerySetDestroy$MH() { return wgpuQuerySetDestroy$MH_; }

    static final FunctionDescriptor wgpuQueueOnSubmittedWorkDone$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuQueueOnSubmittedWorkDone$FUNC() { return wgpuQueueOnSubmittedWorkDone$FUNC_; }

    static final MethodHandle wgpuQueueOnSubmittedWorkDone$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuQueueOnSubmittedWorkDone",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuQueueOnSubmittedWorkDone$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuQueueOnSubmittedWorkDone$MH() { return wgpuQueueOnSubmittedWorkDone$MH_; }

    static final FunctionDescriptor wgpuQueueSubmit$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuQueueSubmit$FUNC() { return wgpuQueueSubmit$FUNC_; }

    static final MethodHandle wgpuQueueSubmit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuQueueSubmit",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V",
        wgpuQueueSubmit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuQueueSubmit$MH() { return wgpuQueueSubmit$MH_; }

    static final FunctionDescriptor wgpuQueueWriteBuffer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuQueueWriteBuffer$FUNC() { return wgpuQueueWriteBuffer$FUNC_; }

    static final MethodHandle wgpuQueueWriteBuffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuQueueWriteBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;J)V",
        wgpuQueueWriteBuffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuQueueWriteBuffer$MH() { return wgpuQueueWriteBuffer$MH_; }

    static final FunctionDescriptor wgpuQueueWriteTexture$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuQueueWriteTexture$FUNC() { return wgpuQueueWriteTexture$FUNC_; }

    static final MethodHandle wgpuQueueWriteTexture$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuQueueWriteTexture",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuQueueWriteTexture$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuQueueWriteTexture$MH() { return wgpuQueueWriteTexture$MH_; }

    static final FunctionDescriptor wgpuRenderBundleEncoderDraw$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderBundleEncoderDraw$FUNC() { return wgpuRenderBundleEncoderDraw$FUNC_; }

    static final MethodHandle wgpuRenderBundleEncoderDraw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderBundleEncoderDraw",
        "(Ljdk/incubator/foreign/MemoryAddress;IIII)V",
        wgpuRenderBundleEncoderDraw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderBundleEncoderDraw$MH() { return wgpuRenderBundleEncoderDraw$MH_; }

    static final FunctionDescriptor wgpuRenderBundleEncoderDrawIndexed$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderBundleEncoderDrawIndexed$FUNC() { return wgpuRenderBundleEncoderDrawIndexed$FUNC_; }

    static final MethodHandle wgpuRenderBundleEncoderDrawIndexed$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderBundleEncoderDrawIndexed",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIII)V",
        wgpuRenderBundleEncoderDrawIndexed$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderBundleEncoderDrawIndexed$MH() { return wgpuRenderBundleEncoderDrawIndexed$MH_; }

    static final FunctionDescriptor wgpuRenderBundleEncoderDrawIndexedIndirect$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderBundleEncoderDrawIndexedIndirect$FUNC() { return wgpuRenderBundleEncoderDrawIndexedIndirect$FUNC_; }

    static final MethodHandle wgpuRenderBundleEncoderDrawIndexedIndirect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderBundleEncoderDrawIndexedIndirect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)V",
        wgpuRenderBundleEncoderDrawIndexedIndirect$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderBundleEncoderDrawIndexedIndirect$MH() { return wgpuRenderBundleEncoderDrawIndexedIndirect$MH_; }

    static final FunctionDescriptor wgpuRenderBundleEncoderDrawIndirect$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderBundleEncoderDrawIndirect$FUNC() { return wgpuRenderBundleEncoderDrawIndirect$FUNC_; }

    static final MethodHandle wgpuRenderBundleEncoderDrawIndirect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderBundleEncoderDrawIndirect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)V",
        wgpuRenderBundleEncoderDrawIndirect$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderBundleEncoderDrawIndirect$MH() { return wgpuRenderBundleEncoderDrawIndirect$MH_; }

    static final FunctionDescriptor wgpuRenderBundleEncoderFinish$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderBundleEncoderFinish$FUNC() { return wgpuRenderBundleEncoderFinish$FUNC_; }

    static final MethodHandle wgpuRenderBundleEncoderFinish$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderBundleEncoderFinish",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuRenderBundleEncoderFinish$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderBundleEncoderFinish$MH() { return wgpuRenderBundleEncoderFinish$MH_; }

    static final FunctionDescriptor wgpuRenderBundleEncoderInsertDebugMarker$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderBundleEncoderInsertDebugMarker$FUNC() { return wgpuRenderBundleEncoderInsertDebugMarker$FUNC_; }

    static final MethodHandle wgpuRenderBundleEncoderInsertDebugMarker$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderBundleEncoderInsertDebugMarker",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuRenderBundleEncoderInsertDebugMarker$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderBundleEncoderInsertDebugMarker$MH() { return wgpuRenderBundleEncoderInsertDebugMarker$MH_; }

    static final FunctionDescriptor wgpuRenderBundleEncoderPopDebugGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderBundleEncoderPopDebugGroup$FUNC() { return wgpuRenderBundleEncoderPopDebugGroup$FUNC_; }

    static final MethodHandle wgpuRenderBundleEncoderPopDebugGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderBundleEncoderPopDebugGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuRenderBundleEncoderPopDebugGroup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderBundleEncoderPopDebugGroup$MH() { return wgpuRenderBundleEncoderPopDebugGroup$MH_; }

    static final FunctionDescriptor wgpuRenderBundleEncoderPushDebugGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderBundleEncoderPushDebugGroup$FUNC() { return wgpuRenderBundleEncoderPushDebugGroup$FUNC_; }

    static final MethodHandle wgpuRenderBundleEncoderPushDebugGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderBundleEncoderPushDebugGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuRenderBundleEncoderPushDebugGroup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderBundleEncoderPushDebugGroup$MH() { return wgpuRenderBundleEncoderPushDebugGroup$MH_; }

    static final FunctionDescriptor wgpuRenderBundleEncoderSetBindGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderBundleEncoderSetBindGroup$FUNC() { return wgpuRenderBundleEncoderSetBindGroup$FUNC_; }

    static final MethodHandle wgpuRenderBundleEncoderSetBindGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderBundleEncoderSetBindGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V",
        wgpuRenderBundleEncoderSetBindGroup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderBundleEncoderSetBindGroup$MH() { return wgpuRenderBundleEncoderSetBindGroup$MH_; }

    static final FunctionDescriptor wgpuRenderBundleEncoderSetIndexBuffer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONG_LONG,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderBundleEncoderSetIndexBuffer$FUNC() { return wgpuRenderBundleEncoderSetIndexBuffer$FUNC_; }

    static final MethodHandle wgpuRenderBundleEncoderSetIndexBuffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderBundleEncoderSetIndexBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJJ)V",
        wgpuRenderBundleEncoderSetIndexBuffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderBundleEncoderSetIndexBuffer$MH() { return wgpuRenderBundleEncoderSetIndexBuffer$MH_; }

    static final FunctionDescriptor wgpuRenderBundleEncoderSetPipeline$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderBundleEncoderSetPipeline$FUNC() { return wgpuRenderBundleEncoderSetPipeline$FUNC_; }

    static final MethodHandle wgpuRenderBundleEncoderSetPipeline$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderBundleEncoderSetPipeline",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuRenderBundleEncoderSetPipeline$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderBundleEncoderSetPipeline$MH() { return wgpuRenderBundleEncoderSetPipeline$MH_; }

    static final FunctionDescriptor wgpuRenderBundleEncoderSetVertexBuffer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONG_LONG,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderBundleEncoderSetVertexBuffer$FUNC() { return wgpuRenderBundleEncoderSetVertexBuffer$FUNC_; }

    static final MethodHandle wgpuRenderBundleEncoderSetVertexBuffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderBundleEncoderSetVertexBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;JJ)V",
        wgpuRenderBundleEncoderSetVertexBuffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderBundleEncoderSetVertexBuffer$MH() { return wgpuRenderBundleEncoderSetVertexBuffer$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderBeginOcclusionQuery$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderBeginOcclusionQuery$FUNC() { return wgpuRenderPassEncoderBeginOcclusionQuery$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderBeginOcclusionQuery$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderBeginOcclusionQuery",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        wgpuRenderPassEncoderBeginOcclusionQuery$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderBeginOcclusionQuery$MH() { return wgpuRenderPassEncoderBeginOcclusionQuery$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderBeginPipelineStatisticsQuery$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderBeginPipelineStatisticsQuery$FUNC() { return wgpuRenderPassEncoderBeginPipelineStatisticsQuery$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderBeginPipelineStatisticsQuery$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderBeginPipelineStatisticsQuery",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        wgpuRenderPassEncoderBeginPipelineStatisticsQuery$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderBeginPipelineStatisticsQuery$MH() { return wgpuRenderPassEncoderBeginPipelineStatisticsQuery$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderDraw$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderDraw$FUNC() { return wgpuRenderPassEncoderDraw$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderDraw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderDraw",
        "(Ljdk/incubator/foreign/MemoryAddress;IIII)V",
        wgpuRenderPassEncoderDraw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderDraw$MH() { return wgpuRenderPassEncoderDraw$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderDrawIndexed$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderDrawIndexed$FUNC() { return wgpuRenderPassEncoderDrawIndexed$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderDrawIndexed$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderDrawIndexed",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIII)V",
        wgpuRenderPassEncoderDrawIndexed$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderDrawIndexed$MH() { return wgpuRenderPassEncoderDrawIndexed$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderDrawIndexedIndirect$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderDrawIndexedIndirect$FUNC() { return wgpuRenderPassEncoderDrawIndexedIndirect$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderDrawIndexedIndirect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderDrawIndexedIndirect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)V",
        wgpuRenderPassEncoderDrawIndexedIndirect$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderDrawIndexedIndirect$MH() { return wgpuRenderPassEncoderDrawIndexedIndirect$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderDrawIndirect$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderDrawIndirect$FUNC() { return wgpuRenderPassEncoderDrawIndirect$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderDrawIndirect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderDrawIndirect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)V",
        wgpuRenderPassEncoderDrawIndirect$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderDrawIndirect$MH() { return wgpuRenderPassEncoderDrawIndirect$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderEndOcclusionQuery$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderEndOcclusionQuery$FUNC() { return wgpuRenderPassEncoderEndOcclusionQuery$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderEndOcclusionQuery$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderEndOcclusionQuery",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuRenderPassEncoderEndOcclusionQuery$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderEndOcclusionQuery$MH() { return wgpuRenderPassEncoderEndOcclusionQuery$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderEndPass$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderEndPass$FUNC() { return wgpuRenderPassEncoderEndPass$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderEndPass$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderEndPass",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuRenderPassEncoderEndPass$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderEndPass$MH() { return wgpuRenderPassEncoderEndPass$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderEndPipelineStatisticsQuery$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderEndPipelineStatisticsQuery$FUNC() { return wgpuRenderPassEncoderEndPipelineStatisticsQuery$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderEndPipelineStatisticsQuery$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderEndPipelineStatisticsQuery",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuRenderPassEncoderEndPipelineStatisticsQuery$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderEndPipelineStatisticsQuery$MH() { return wgpuRenderPassEncoderEndPipelineStatisticsQuery$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderExecuteBundles$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderExecuteBundles$FUNC() { return wgpuRenderPassEncoderExecuteBundles$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderExecuteBundles$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderExecuteBundles",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V",
        wgpuRenderPassEncoderExecuteBundles$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderExecuteBundles$MH() { return wgpuRenderPassEncoderExecuteBundles$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderInsertDebugMarker$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderInsertDebugMarker$FUNC() { return wgpuRenderPassEncoderInsertDebugMarker$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderInsertDebugMarker$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderInsertDebugMarker",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuRenderPassEncoderInsertDebugMarker$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderInsertDebugMarker$MH() { return wgpuRenderPassEncoderInsertDebugMarker$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderPopDebugGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderPopDebugGroup$FUNC() { return wgpuRenderPassEncoderPopDebugGroup$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderPopDebugGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderPopDebugGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuRenderPassEncoderPopDebugGroup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderPopDebugGroup$MH() { return wgpuRenderPassEncoderPopDebugGroup$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderPushDebugGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderPushDebugGroup$FUNC() { return wgpuRenderPassEncoderPushDebugGroup$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderPushDebugGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderPushDebugGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuRenderPassEncoderPushDebugGroup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderPushDebugGroup$MH() { return wgpuRenderPassEncoderPushDebugGroup$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderSetBindGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderSetBindGroup$FUNC() { return wgpuRenderPassEncoderSetBindGroup$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderSetBindGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderSetBindGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V",
        wgpuRenderPassEncoderSetBindGroup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderSetBindGroup$MH() { return wgpuRenderPassEncoderSetBindGroup$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderSetBlendColor$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderSetBlendColor$FUNC() { return wgpuRenderPassEncoderSetBlendColor$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderSetBlendColor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderSetBlendColor",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuRenderPassEncoderSetBlendColor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderSetBlendColor$MH() { return wgpuRenderPassEncoderSetBlendColor$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderSetIndexBuffer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONG_LONG,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderSetIndexBuffer$FUNC() { return wgpuRenderPassEncoderSetIndexBuffer$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderSetIndexBuffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderSetIndexBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJJ)V",
        wgpuRenderPassEncoderSetIndexBuffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderSetIndexBuffer$MH() { return wgpuRenderPassEncoderSetIndexBuffer$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderSetPipeline$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderSetPipeline$FUNC() { return wgpuRenderPassEncoderSetPipeline$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderSetPipeline$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderSetPipeline",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuRenderPassEncoderSetPipeline$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderSetPipeline$MH() { return wgpuRenderPassEncoderSetPipeline$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderSetScissorRect$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderSetScissorRect$FUNC() { return wgpuRenderPassEncoderSetScissorRect$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderSetScissorRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderSetScissorRect",
        "(Ljdk/incubator/foreign/MemoryAddress;IIII)V",
        wgpuRenderPassEncoderSetScissorRect$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderSetScissorRect$MH() { return wgpuRenderPassEncoderSetScissorRect$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderSetStencilReference$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderSetStencilReference$FUNC() { return wgpuRenderPassEncoderSetStencilReference$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderSetStencilReference$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderSetStencilReference",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        wgpuRenderPassEncoderSetStencilReference$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderSetStencilReference$MH() { return wgpuRenderPassEncoderSetStencilReference$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderSetVertexBuffer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONG_LONG,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderSetVertexBuffer$FUNC() { return wgpuRenderPassEncoderSetVertexBuffer$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderSetVertexBuffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderSetVertexBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;JJ)V",
        wgpuRenderPassEncoderSetVertexBuffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderSetVertexBuffer$MH() { return wgpuRenderPassEncoderSetVertexBuffer$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderSetViewport$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_FLOAT,
        C_FLOAT,
        C_FLOAT,
        C_FLOAT,
        C_FLOAT,
        C_FLOAT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderSetViewport$FUNC() { return wgpuRenderPassEncoderSetViewport$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderSetViewport$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderSetViewport",
        "(Ljdk/incubator/foreign/MemoryAddress;FFFFFF)V",
        wgpuRenderPassEncoderSetViewport$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderSetViewport$MH() { return wgpuRenderPassEncoderSetViewport$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderWriteTimestamp$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderWriteTimestamp$FUNC() { return wgpuRenderPassEncoderWriteTimestamp$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderWriteTimestamp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderWriteTimestamp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        wgpuRenderPassEncoderWriteTimestamp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderWriteTimestamp$MH() { return wgpuRenderPassEncoderWriteTimestamp$MH_; }

    static final FunctionDescriptor wgpuRenderPipelineGetBindGroupLayout$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPipelineGetBindGroupLayout$FUNC() { return wgpuRenderPipelineGetBindGroupLayout$FUNC_; }

    static final MethodHandle wgpuRenderPipelineGetBindGroupLayout$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPipelineGetBindGroupLayout",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuRenderPipelineGetBindGroupLayout$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPipelineGetBindGroupLayout$MH() { return wgpuRenderPipelineGetBindGroupLayout$MH_; }

    static final FunctionDescriptor wgpuSurfaceGetPreferredFormat$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuSurfaceGetPreferredFormat$FUNC() { return wgpuSurfaceGetPreferredFormat$FUNC_; }

    static final MethodHandle wgpuSurfaceGetPreferredFormat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuSurfaceGetPreferredFormat",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuSurfaceGetPreferredFormat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuSurfaceGetPreferredFormat$MH() { return wgpuSurfaceGetPreferredFormat$MH_; }

    static final FunctionDescriptor wgpuSwapChainGetCurrentTextureView$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuSwapChainGetCurrentTextureView$FUNC() { return wgpuSwapChainGetCurrentTextureView$FUNC_; }

    static final MethodHandle wgpuSwapChainGetCurrentTextureView$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuSwapChainGetCurrentTextureView",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuSwapChainGetCurrentTextureView$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuSwapChainGetCurrentTextureView$MH() { return wgpuSwapChainGetCurrentTextureView$MH_; }

    static final FunctionDescriptor wgpuSwapChainPresent$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuSwapChainPresent$FUNC() { return wgpuSwapChainPresent$FUNC_; }

    static final MethodHandle wgpuSwapChainPresent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuSwapChainPresent",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuSwapChainPresent$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuSwapChainPresent$MH() { return wgpuSwapChainPresent$MH_; }

    static final FunctionDescriptor wgpuTextureCreateView$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuTextureCreateView$FUNC() { return wgpuTextureCreateView$FUNC_; }

    static final MethodHandle wgpuTextureCreateView$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuTextureCreateView",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wgpuTextureCreateView$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuTextureCreateView$MH() { return wgpuTextureCreateView$MH_; }

    static final FunctionDescriptor wgpuTextureDestroy$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuTextureDestroy$FUNC() { return wgpuTextureDestroy$FUNC_; }

    static final MethodHandle wgpuTextureDestroy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuTextureDestroy",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuTextureDestroy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuTextureDestroy$MH() { return wgpuTextureDestroy$MH_; }

    static final int WGPUSType_DeviceExtras() { return (int)1610612737L; }

    static final int WGPUNativeSType_Force32() { return (int)2147483647L; }

    static final MemoryLayout WGPUDeviceExtras$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_POINTER.withName("next"),
            C_INT.withName("sType"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("chain"),
        C_INT.withName("maxBindGroups"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("label"),
        C_POINTER.withName("tracePath")
    ).withName("WGPUDeviceExtras");
    static final jdk.incubator.foreign.MemoryLayout WGPUDeviceExtras$struct$LAYOUT() { return WGPUDeviceExtras$struct$LAYOUT_; }

    static final MemoryLayout WGPUDeviceExtras$maxBindGroups$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout WGPUDeviceExtras$maxBindGroups$LAYOUT() { return WGPUDeviceExtras$maxBindGroups$LAYOUT_; }

    static final VarHandle WGPUDeviceExtras$maxBindGroups$VH_ = WGPUDeviceExtras$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("maxBindGroups"));
    static final java.lang.invoke.VarHandle WGPUDeviceExtras$maxBindGroups$VH() { return WGPUDeviceExtras$maxBindGroups$VH_; }

    static final MemoryLayout WGPUDeviceExtras$label$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUDeviceExtras$label$LAYOUT() { return WGPUDeviceExtras$label$LAYOUT_; }

    static final VarHandle WGPUDeviceExtras$label$VH_ = MemoryHandles.asAddressVarHandle(WGPUDeviceExtras$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("label")));
    static final java.lang.invoke.VarHandle WGPUDeviceExtras$label$VH() { return WGPUDeviceExtras$label$VH_; }

    static final MemoryLayout WGPUDeviceExtras$tracePath$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout WGPUDeviceExtras$tracePath$LAYOUT() { return WGPUDeviceExtras$tracePath$LAYOUT_; }

    static final VarHandle WGPUDeviceExtras$tracePath$VH_ = MemoryHandles.asAddressVarHandle(WGPUDeviceExtras$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("tracePath")));
    static final java.lang.invoke.VarHandle WGPUDeviceExtras$tracePath$VH() { return WGPUDeviceExtras$tracePath$VH_; }

    static final int WGPULogLevel_Off() { return (int)0L; }

    static final int WGPULogLevel_Error() { return (int)1L; }

    static final int WGPULogLevel_Warn() { return (int)2L; }

    static final int WGPULogLevel_Info() { return (int)3L; }

    static final int WGPULogLevel_Debug() { return (int)4L; }

    static final int WGPULogLevel_Trace() { return (int)5L; }

    static final int WGPULogLevel_Force32() { return (int)2147483647L; }

    static final FunctionDescriptor WGPULogCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WGPULogCallback$FUNC() { return WGPULogCallback$FUNC_; }

    static final FunctionDescriptor wgpuDevicePoll$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuDevicePoll$FUNC() { return wgpuDevicePoll$FUNC_; }

    static final MethodHandle wgpuDevicePoll$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuDevicePoll",
        "(Ljdk/incubator/foreign/MemoryAddress;B)V",
        wgpuDevicePoll$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuDevicePoll$MH() { return wgpuDevicePoll$MH_; }

    static final FunctionDescriptor wgpuSetLogCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuSetLogCallback$FUNC() { return wgpuSetLogCallback$FUNC_; }

    static final MethodHandle wgpuSetLogCallback$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuSetLogCallback",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        wgpuSetLogCallback$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuSetLogCallback$MH() { return wgpuSetLogCallback$MH_; }

    static final FunctionDescriptor wgpuSetLogLevel$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuSetLogLevel$FUNC() { return wgpuSetLogLevel$FUNC_; }

    static final MethodHandle wgpuSetLogLevel$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuSetLogLevel",
        "(I)V",
        wgpuSetLogLevel$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuSetLogLevel$MH() { return wgpuSetLogLevel$MH_; }

    static final FunctionDescriptor wgpuRenderPassEncoderSetPushConstants$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wgpuRenderPassEncoderSetPushConstants$FUNC() { return wgpuRenderPassEncoderSetPushConstants$FUNC_; }

    static final MethodHandle wgpuRenderPassEncoderSetPushConstants$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wgpuRenderPassEncoderSetPushConstants",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)V",
        wgpuRenderPassEncoderSetPushConstants$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wgpuRenderPassEncoderSetPushConstants$MH() { return wgpuRenderPassEncoderSetPushConstants$MH_; }

    static final int _VCRUNTIME_DISABLED_WARNINGS() { return (int)4514L; }

    static final MemoryAddress NULL$ADDR_CONSTANT_ = MemoryAddress.ofLong(0L);
    static final jdk.incubator.foreign.MemoryAddress NULL() { return NULL$ADDR_CONSTANT_; }

    static final int INT8_MIN() { return (int)-128L; }

    static final int INT16_MIN() { return (int)-32768L; }

    static final int INT32_MIN() { return (int)-2147483648L; }

    static final long INT64_MIN() { return -9223372036854775808L; }

    static final byte INT8_MAX() { return (byte)127L; }

    static final short INT16_MAX() { return (short)32767L; }

    static final int INT32_MAX() { return (int)2147483647L; }

    static final long INT64_MAX() { return 9223372036854775807L; }

    static final byte UINT8_MAX() { return (byte)255L; }

    static final short UINT16_MAX() { return (short)65535L; }

    static final int UINT32_MAX() { return (int)4294967295L; }

    static final long UINT64_MAX() { return -1L; }

    static final int INT_LEAST8_MIN() { return (int)-128L; }

    static final int INT_LEAST16_MIN() { return (int)-32768L; }

    static final int INT_LEAST32_MIN() { return (int)-2147483648L; }

    static final long INT_LEAST64_MIN() { return -9223372036854775808L; }

    static final byte INT_LEAST8_MAX() { return (byte)127L; }

    static final short INT_LEAST16_MAX() { return (short)32767L; }

    static final int INT_LEAST32_MAX() { return (int)2147483647L; }

    static final long INT_LEAST64_MAX() { return 9223372036854775807L; }

    static final byte UINT_LEAST8_MAX() { return (byte)255L; }

    static final short UINT_LEAST16_MAX() { return (short)65535L; }

    static final int UINT_LEAST32_MAX() { return (int)4294967295L; }

    static final long UINT_LEAST64_MAX() { return -1L; }

    static final int INT_FAST8_MIN() { return (int)-128L; }

    static final int INT_FAST16_MIN() { return (int)-2147483648L; }

    static final int INT_FAST32_MIN() { return (int)-2147483648L; }

    static final long INT_FAST64_MIN() { return -9223372036854775808L; }

    static final byte INT_FAST8_MAX() { return (byte)127L; }

    static final int INT_FAST16_MAX() { return (int)2147483647L; }

    static final int INT_FAST32_MAX() { return (int)2147483647L; }

    static final long INT_FAST64_MAX() { return 9223372036854775807L; }

    static final byte UINT_FAST8_MAX() { return (byte)255L; }

    static final int UINT_FAST16_MAX() { return (int)4294967295L; }

    static final int UINT_FAST32_MAX() { return (int)4294967295L; }

    static final long UINT_FAST64_MAX() { return -1L; }

    static final long INTPTR_MIN() { return -9223372036854775808L; }

    static final long INTPTR_MAX() { return 9223372036854775807L; }

    static final long UINTPTR_MAX() { return -1L; }

    static final long INTMAX_MIN() { return -9223372036854775808L; }

    static final long INTMAX_MAX() { return 9223372036854775807L; }

    static final long UINTMAX_MAX() { return -1L; }

    static final long PTRDIFF_MIN() { return -9223372036854775808L; }

    static final long PTRDIFF_MAX() { return 9223372036854775807L; }

    static final long SIZE_MAX() { return -1L; }

    static final int SIG_ATOMIC_MIN() { return (int)-2147483648L; }

    static final int SIG_ATOMIC_MAX() { return (int)2147483647L; }

    static final long WGPU_WHOLE_SIZE() { return -1L; }

    static final int WGPU_COPY_STRIDE_UNDEFINED() { return (int)4294967295L; }

}

