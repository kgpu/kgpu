{"version":3,"sources":["webpack://examples/webpack/universalModuleDefinition","webpack://examples/webpack/bootstrap","webpack://examples/./kotlin-dce/wrapper.js","webpack://examples/./kotlin-dce/arrayUtils.js","webpack://examples/./kotlin-dce/callableReferenceUtils.js","webpack://examples/./kotlin-dce/misc.js","webpack://examples/./kotlin-dce/polyfills.js","webpack://examples/./kotlin-dce/core.js","webpack://examples/./kotlin-dce/markerFunctions.js","webpack://examples/./kotlin-dce/conversions.js","webpack://examples/./kotlin-dce/long.js","webpack://examples/./kotlin-dce/rtti.js","webpack://examples/./kotlin-dce/runtime/arrayUtils.kt","webpack://examples/./kotlin-dce/runtime/Enum.kt","webpack://examples/primitiveCompanionObjects.kt","webpack://examples/./kotlin-dce/generated/_Arrays.kt","webpack://examples/./kotlin-dce/generated/_Ranges.kt","webpack://examples/./kotlin-dce/kotlin/UByte.kt","webpack://examples/./kotlin-dce/kotlin/UInt.kt","webpack://examples/./kotlin-dce/kotlin/UShort.kt","webpack://examples/./kotlin-dce/Ranges.kt","webpack://examples/./kotlin-dce/collections/Collections.kt","webpack://examples/./kotlin-dce/collections/Maps.kt","webpack://examples/./kotlin-dce/collections/Sets.kt","webpack://examples/./kotlin-dce/text/StringNumberConversions.kt","webpack://examples/./kotlin-dce/kotlin/UnsignedUtils.kt","webpack://examples/./kotlin-dce/collections/Sequences.kt","webpack://examples/./kotlin-dce/generated/_Collections.kt","webpack://examples/./kotlin-dce/collections/Iterables.kt","webpack://examples/./kotlin-dce/generated/_Sequences.kt","webpack://examples/./kotlin-dce/util/Preconditions.kt","webpack://examples/./kotlin-dce/generated/_Strings.kt","webpack://examples/./kotlin-dce/kotlin/text/string.kt","webpack://examples/./kotlin-dce/Iterators.kt","webpack://examples/./kotlin-dce/ProgressionIterators.kt","webpack://examples/./kotlin-dce/Progressions.kt","webpack://examples/./kotlin-dce/Collections.kt","webpack://examples/./kotlin-dce/Range.kt","webpack://examples/./kotlin-dce/Unit.kt","webpack://examples/./kotlin-dce/internal/progressionUtil.kt","webpack://examples/./kotlin-dce/kotlin/builtins.kt","webpack://examples/./kotlin-dce/kotlin/coroutines/CoroutineImpl.kt","webpack://examples/./kotlin-dce/util/Standard.kt","webpack://examples/./kotlin-dce/util/Result.kt","webpack://examples/./kotlin-dce/coroutines/Continuation.kt","webpack://examples/./kotlin-dce/kotlin/coroutines/intrinsics/IntrinsicsJs.kt","webpack://examples/./kotlin-dce/kotlin/exceptions.kt","webpack://examples/./kotlin-dce/kotlin/kotlin.kt","webpack://examples/./kotlin-dce/kotlin/text/numberConversions_js-v1.kt","webpack://examples/./kotlin-dce/generated/_ArraysJs.kt","webpack://examples/./kotlin-dce/generated/_CollectionsJs.kt","webpack://examples/./kotlin-dce/kotlin/collections.kt","webpack://examples/./kotlin-dce/kotlin/collections/AbstractMutableCollection.kt","webpack://examples/./kotlin-dce/kotlin/collections/AbstractMutableList.kt","webpack://examples/./kotlin-dce/kotlin/collections/AbstractMutableMap.kt","webpack://examples/./kotlin-dce/kotlin/collections/AbstractMutableSet.kt","webpack://examples/./kotlin-dce/kotlin/collections/ArrayList.kt","webpack://examples/./kotlin-dce/kotlin/collections/ArraySorting.kt","webpack://examples/./kotlin-dce/kotlin/collections/EqualityComparator.kt","webpack://examples/./kotlin-dce/kotlin/Comparator.kt","webpack://examples/./kotlin-dce/kotlin/collections/HashMap.kt","webpack://examples/./kotlin-dce/kotlin/collections/HashSet.kt","webpack://examples/./kotlin-dce/kotlin/collections/InternalHashCodeMap.kt","webpack://examples/./kotlin-dce/kotlin/collections/InternalStringMap.kt","webpack://examples/./kotlin-dce/kotlin/collections/LinkedHashMap.kt","webpack://examples/./kotlin-dce/kotlin/collections/LinkedHashSet.kt","webpack://examples/./kotlin-dce/kotlin/console.kt","webpack://examples/./kotlin-dce/kotlin/coroutines/SafeContinuationJs.kt","webpack://examples/./kotlin-dce/kotlin/dom/EventListener.kt","webpack://examples/./kotlin-dce/kotlin/exceptionUtils.kt","webpack://examples/./kotlin-dce/kotlin/math.kt","webpack://examples/./kotlin-dce/kotlin/numbers_js-v1.kt","webpack://examples/./kotlin-dce/kotlin/numbers.kt","webpack://examples/./kotlin-dce/kotlin/random/PlatformRandom.kt","webpack://examples/./kotlin-dce/kotlin/reflect/KClassImpl.kt","webpack://examples/./kotlin-dce/kotlin/collections/InternalMap.kt","webpack://examples/./kotlin-dce/kotlin/jsOperators.kt","webpack://examples/./kotlin-dce/kotlin/reflect/primitives.kt","webpack://examples/./kotlin-dce/kotlin/reflect/reflection.kt","webpack://examples/./kotlin-dce/kotlin/regexp.kt","webpack://examples/./kotlin-dce/kotlin/text/StringBuilderJs.kt","webpack://examples/./kotlin-dce/kotlin/text/char.kt","webpack://examples/./kotlin-dce/kotlin/text/numberConversions.kt","webpack://examples/./kotlin-dce/kotlin/text/regex.kt","webpack://examples/./kotlin-dce/text/Strings.kt","webpack://examples/./kotlin-dce/generated/_ComparisonsJs.kt","webpack://examples/./kotlin-dce/kotlin/text/stringsCode.kt","webpack://examples/./kotlin-dce/collections/AbstractCollection.kt","webpack://examples/./kotlin-dce/collections/AbstractList.kt","webpack://examples/./kotlin-dce/collections/AbstractMap.kt","webpack://examples/./kotlin-dce/collections/AbstractSet.kt","webpack://examples/./kotlin-dce/collections/IndexedValue.kt","webpack://examples/./kotlin-dce/collections/MapWithDefault.kt","webpack://examples/./kotlin-dce/collections/MutableCollections.kt","webpack://examples/./kotlin-dce/collections/SequenceBuilder.kt","webpack://examples/./kotlin-dce/comparisons/Comparisons.kt","webpack://examples/./kotlin-dce/coroutines/ContinuationInterceptor.kt","webpack://examples/./kotlin-dce/coroutines/CoroutineContext.kt","webpack://examples/./kotlin-dce/coroutines/CoroutineContextImpl.kt","webpack://examples/./kotlin-dce/coroutines/intrinsics/Intrinsics.kt","webpack://examples/./kotlin-dce/random/Random.kt","webpack://examples/./kotlin-dce/random/XorWowRandom.kt","webpack://examples/./kotlin-dce/ranges/Ranges.kt","webpack://examples/./kotlin-dce/text/Appendable.kt","webpack://examples/./kotlin-dce/text/Char.kt","webpack://examples/./kotlin-dce/text/Indent.kt","webpack://examples/./kotlin-dce/text/regex/MatchResult.kt","webpack://examples/./kotlin-dce/util/Lazy.kt","webpack://examples/./kotlin-dce/util/Tuples.kt","webpack://examples/./kotlin-dce/kotlin/UByteArray.kt","webpack://examples/./kotlin-dce/kotlin/ULong.kt","webpack://examples/./kotlin-dce/experimental/bitwiseOperations.kt","webpack://examples/./kotlin-dce/kotlin/UIntRange.kt","webpack://examples/./kotlin-dce/kotlin/UIterators.kt","webpack://examples/./kotlin-dce/kotlin/ULongRange.kt","webpack://examples/./kotlin-dce/kotlin/UProgressionUtil.kt","webpack://examples/./kotlin-dce/kotlin/UStrings.kt","webpack://examples/./kotlin-dce/generated/_Maps.kt","webpack://examples/./kotlin-dce/generated/_Sets.kt","webpack://examples/./kotlin-dce/generated/_UArrays.kt","webpack://examples/./kotlin-dce/kotlin/throwableExtensions.kt","webpack://examples/./kotlin-dce/kotlin/MathH.kt","webpack://examples/./kotlin-dce/kotlin/coroutines/js/internal/EmptyContinuation.kt","webpack://examples/./kotlin-dce/kotlin/text/utf8Encoding.kt","webpack://examples/./kotlin-dce/util/DeepRecursive.kt","webpack://examples//home/runner/work/kgpu/kgpu/build/js/node_modules/process/browser.js","webpack://examples/../../../../../common/src/Delay.kt","webpack://examples/../../../../../common/src/EventLoop.common.kt","webpack://examples/./kotlin-dce/text/StringBuilder.kt","webpack://examples/../../../../../common/src/flow/SharedFlow.kt","webpack://examples/../../../../../common/src/internal/LockFreeTaskQueue.kt","webpack://examples/../../../../../js/src/JSDispatcher.kt","webpack://examples/../../../../../common/src/AbstractCoroutine.kt","webpack://examples/../../../../../common/src/Builders.common.kt","webpack://examples/../../../../../common/src/CancellableContinuation.kt","webpack://examples/../../../../../common/src/CancellableContinuationImpl.kt","webpack://examples/../../../../../atomicfu/src/commonMain/kotlin/kotlinx/atomicfu/AtomicFU.common.kt","webpack://examples/../../../../../common/src/CompletableDeferred.kt","webpack://examples/../../../../../common/src/CompletionState.kt","webpack://examples/../../../../../common/src/CoroutineDispatcher.kt","webpack://examples/../../../../../common/src/CoroutineExceptionHandler.kt","webpack://examples/../../../../../common/src/CompletionHandler.common.kt","webpack://examples/../../../../../common/src/CoroutineName.kt","webpack://examples/../../../../../common/src/CoroutineScope.kt","webpack://examples/../../../../../common/src/CoroutineStart.kt","webpack://examples/../../../../../common/src/Job.kt","webpack://examples/../../../../../common/src/JobSupport.kt","webpack://examples/../../../../../common/src/MainCoroutineDispatcher.kt","webpack://examples/../../../../../common/src/NonCancellable.kt","webpack://examples/../../../../../common/src/Supervisor.kt","webpack://examples/../../../../../common/src/channels/AbstractChannel.kt","webpack://examples/../../../../../js/src/internal/LinkedList.kt","webpack://examples/../../../../../common/src/Timeout.kt","webpack://examples/../../../../../common/src/channels/Channel.kt","webpack://examples/../../../../../common/src/channels/ArrayBroadcastChannel.kt","webpack://examples/../../../../../common/src/channels/ArrayChannel.kt","webpack://examples/../../../../../common/src/internal/InlineList.kt","webpack://examples/../../../../../common/src/channels/Broadcast.kt","webpack://examples/../../../../../common/src/channels/ChannelCoroutine.kt","webpack://examples/../../../../../common/src/channels/Channels.common.kt","webpack://examples/../../../../../common/src/channels/ConflatedChannel.kt","webpack://examples/../../../../../common/src/channels/Produce.kt","webpack://examples/../../../../../common/src/flow/Builders.kt","webpack://examples/../../../../../common/src/channels/ConflatedBroadcastChannel.kt","webpack://examples/../../../../../common/src/channels/LinkedListChannel.kt","webpack://examples/../../../../../common/src/channels/RendezvousChannel.kt","webpack://examples/../../../../../common/src/flow/internal/SafeCollector.common.kt","webpack://examples/../../../../../common/src/flow/terminal/Reduce.kt","webpack://examples/../../../../../common/src/internal/DispatchedContinuation.kt","webpack://examples/../../../../../common/src/internal/ThreadSafeHeap.kt","webpack://examples/../../../../../common/src/selects/Select.kt","webpack://examples/../../../../../common/src/flow/Channels.kt","webpack://examples/../../../../../common/src/flow/internal/Merge.kt","webpack://examples/../../../../../common/src/flow/operators/Zip.kt","webpack://examples/../../../../../common/src/internal/ConcurrentLinkedList.kt","webpack://examples/../../../../../common/src/internal/DispatchedTask.kt","webpack://examples/../../../../../common/src/internal/OnUndeliveredElement.kt","webpack://examples/../../../../../common/src/internal/Scopes.kt","webpack://examples/../../../../../common/src/intrinsics/Undispatched.kt","webpack://examples/../../../../../js/src/Runnable.kt","webpack://examples/../../../../../common/src/sync/Semaphore.kt","webpack://examples/../../../../../common/src/flow/operators/Limit.kt","webpack://examples/../../../../../common/src/flow/terminal/Collection.kt","webpack://examples/../../../../../common/src/flow/terminal/Collect.kt","webpack://examples/../../../../../common/src/flow/terminal/Count.kt","webpack://examples/../../../../../common/src/internal/ArrayQueue.kt","webpack://examples/../../../../../common/src/internal/Atomic.kt","webpack://examples/../../../../../common/src/internal/LocalAtomics.common.kt","webpack://examples/../../../../../common/src/intrinsics/Cancellable.kt","webpack://examples/../../../../../common/src/sync/Mutex.kt","webpack://examples/../../../../../js/src/CompletionHandler.kt","webpack://examples/../../../../../js/src/CoroutineContext.kt","webpack://examples/./kotlin-dce/kotlin/jsTypeOf.kt","webpack://examples/../../../../../js/src/CoroutineExceptionHandlerImpl.kt","webpack://examples/../../../../../js/src/Debug.kt","webpack://examples/../../../../../js/src/Dispatchers.kt","webpack://examples/../../../../../js/src/EventLoop.kt","webpack://examples/../../../../../js/src/Promise.kt","webpack://examples/../../../../../js/src/Window.kt","webpack://examples/../../../../../js/src/flow/internal/SafeCollector.kt","webpack://examples/../../../../../js/src/internal/CopyOnWriteList.kt","webpack://examples/../../../../../js/src/Exceptions.kt","webpack://examples/../../../../../js/src/flow/internal/FlowExceptions.kt","webpack://examples/../../../../../js/src/internal/Concurrent.kt","webpack://examples/../../../../../js/src/internal/LocalAtomics.kt","webpack://examples/../../../../../js/src/internal/ProbesSupport.kt","webpack://examples/../../../../../js/src/internal/StackTraceRecovery.kt","webpack://examples/../../../../../common/src/flow/internal/FlowCoroutine.kt","webpack://examples/(webpack)/buildin/global.js","webpack://examples/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/ArrayDeque.kt","webpack://examples/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/ArrayList.kt","webpack://examples/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/CaseInsensitiveStringMap.kt","webpack://examples/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/CopyOnWriteFrozenMap.kt","webpack://examples/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/GenericSubList.kt","webpack://examples/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/IntMap.kt","webpack://examples/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/internal/internal.kt","webpack://examples/./kotlin-dce/util/HashCode.kt","webpack://examples/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/IteratorExt.kt","webpack://examples/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/ListReader.kt","webpack://examples/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/Pool.kt","webpack://examples/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/RingBuffer.kt","webpack://examples/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/Stack.kt","webpack://examples/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/_Delegates.kt","webpack://examples/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/_Extensions.kt","webpack://examples/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/_GenericSort.kt","webpack://examples/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/fakemutable/FakeMutable.kt","webpack://examples/../../../../../kds/src/jsMain/kotlin/com/soywiz/kds/atomic/KdsAtomicRef.kt","webpack://examples/../../../../../kds/src/jsMain/kotlin/com/soywiz/kds/Js.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/TimeSpan.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/deflate/Deflate.kt","webpack://examples/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/ArrayFill.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/lzma/Lzma.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/lzma/SevenZip.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/zip/Zip.kt","webpack://examples/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/Numbers.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/concurrent/atomic/KorAtomic.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/Vfs.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/IsoVfs.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/stream/SyncStream.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/async/AsyncByteArrayDeque.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/async/AsyncCloseable.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/async/AsyncExt.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/async/AsyncQueue.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/async/ChannelExt.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/async/Signal.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/async/runBlockingNoSuspensions.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/CompressionMethod.kt","webpack://examples/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/iterators/_FastArrayIterators.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/util/BitReader.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/deflate/GZIP.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/deflate/ZLib.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/util/Huffman.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/util/SlidingWindow.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/dynamic/KDynamic.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/dynamic/mapper/ObjectMapper.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/PathInfo.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/VfsFile.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/JailVfs.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/LocalVfs.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/lang/Exceptions.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/MapLikeStorageVfs.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/MemoryVfs.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/NodeVfs.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/UniversalVfs.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/UrlVfs.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/ZipVfs.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/internal/BytesExt.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/internal/TempBytes.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/lang/ThreadLocal.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/lang/Charset.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/lang/Closeable.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/lang/StringExt.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/net/AsyncSocketFactory.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/net/MimeType.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/net/QueryString.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/net/URL.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/net/http/Http.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/net/http/HttpClient.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/net/http/HttpServer.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/serialization/json/Json.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/StrReader.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/Indenter.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/serialization/xml/Xml.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/stream/AsyncStream.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/stream/FastByteArrayInputStream.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/ByteArrayExt.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/CharExt.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/ExpectException.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/NumberExt.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/NumberParser.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/OS.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/RangeExt.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/StringExt.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/checksum/Adler32.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/checksum/CRC32.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/checksum/SimpleChecksum.kt","webpack://examples/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/i18n/Language.kt","webpack://examples/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/KorioLocalStorageJsVfs.kt","webpack://examples/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/KorioNativeJs.kt","webpack://examples/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/compression/deflate/DeflateJs.kt","webpack://examples/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/dynamic/DynamicInternal.kt","webpack://examples/./kotlin-dce/org.w3c/org.w3c.dom.kt","webpack://examples/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/file/std/LocalVfsJs.kt","webpack://examples/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/lang/ClassExtJs.kt","webpack://examples/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/lang/EnvironmentJs.kt","webpack://examples/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/lang/ExceptionsJs.kt","webpack://examples/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/lang/NativeThreadLocal.kt","webpack://examples/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/lang/UTF8.kt","webpack://examples/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/net/asyncSocketFactoryJs.kt","webpack://examples/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/net/http/HttpFactoryJs.kt","webpack://examples/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/util/PlatformJs.kt","webpack://examples/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/util/i18n/LanguageJs.kt","webpack://examples/./kotlin-dce/org.w3c/org.w3c.xhr.kt","webpack://examples/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/Bits.kt","webpack://examples/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/KmemGC.kt","webpack://examples/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/ArrayCopy.kt","webpack://examples/../../../../../kmem/src/jsMain/kotlin/com/soywiz/kmem/ArrayFillJs.kt","webpack://examples/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/Arrays.kt","webpack://examples/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/Buffer.kt","webpack://examples/../../../../../kmem/src/jsMain/kotlin/com/soywiz/kmem/BufferJs.kt","webpack://examples/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/ByteArrayBuilder.kt","webpack://examples/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/ByteArrayReadWrite.kt","webpack://examples/../../../../../kmem/src/jsMain/kotlin/com/soywiz/kmem/KmemGCJs.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/Date.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DateException.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DateFormat.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DateTime.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DateTimeSpan.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/MonthSpan.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DateTimeTz.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DayOfWeek.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/ISO8601.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/KlockLocale.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/Measure.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/Month.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/PatternDateFormat.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/internal/MicroStrReader.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/PatternTimeFormat.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/PerformanceCounter.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/Time.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/TimeFormat.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/TimezoneNames.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/TimezoneOffset.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/Year.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/YearMonth.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/hr/HRTimeSpan.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/internal/MapExt.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/internal/NiceStr.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/internal/SpinLock.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/internal/TimeZoneParser.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/internal/internal.kt","webpack://examples/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/locale/ExtendedTimezoneNames.kt","webpack://examples/../../../../../klock/src/jsMain/kotlin/com/soywiz/klock/internal/AtomicsPlat.kt","webpack://examples/../../../../../klock/src/jsMain/kotlin/com/soywiz/klock/internal/KlockInternal.kt","webpack://examples/../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/Hasher.kt","webpack://examples/../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/MD5.kt","webpack://examples/../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/SHA.kt","webpack://examples/../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/encoding/Base64.kt","webpack://examples/../../../../../krypto/src/commonMain/kotlin/com/soywiz/krypto/encoding/Hex.kt","webpack://examples/../../../../../krypto/src/jsMain/kotlin/com/soywiz/krypto/SecureRandomJs.kt","webpack://examples//home/runner/work/kgpu/kgpu/examples/src/commonMain/kotlin/ComputeExample.kt","webpack://examples//home/runner/work/kgpu/kgpu/examples/src/commonMain/kotlin/EarthExample.kt","webpack://examples/./kotlin/kotlin/math.kt","webpack://examples//home/runner/work/kgpu/kgpu/examples/src/commonMain/kotlin/ShapeExamples.kt","webpack://examples//home/runner/work/kgpu/kgpu/examples/src/commonMain/kotlin/boid/BoidExample.kt","webpack://examples//home/runner/work/kgpu/kgpu/examples/src/commonMain/kotlin/compute/ComputeCompare.kt","webpack://examples//home/runner/work/kgpu/kgpu/examples/src/commonMain/kotlin/msaa/ShapesMsaa.kt","webpack://examples//home/runner/work/kgpu/kgpu/examples/src/commonMain/kotlin/ExampleUtils.kt","webpack://examples//home/runner/work/kgpu/kgpu/examples/src/commonMain/kotlin/TextureExample.kt","webpack://examples//home/runner/work/kgpu/kgpu/examples/src/commonMain/kotlin/WindowEvents.kt","webpack://examples/./kotlin/runtime/arrayUtils.kt","webpack://examples//home/runner/work/kgpu/kgpu/examples/src/jsMain/kotlin/WebExamples.kt","webpack://examples//home/runner/work/kgpu/kgpu/modules/kgpu/src/commonMain/kotlin/io/github/kgpu/Kgpu.kt","webpack://examples//home/runner/work/kgpu/kgpu/modules/kgpu/src/commonMain/kotlin/io/github/kgpu/KgpuWindow.kt","webpack://examples//home/runner/work/kgpu/kgpu/modules/kgpu/src/commonMain/kotlin/io/github/kgpu/Util.kt","webpack://examples//home/runner/work/kgpu/kgpu/modules/kgpu/src/jsMain/kotlin/io/github/kgpu/JsKgpu.kt","webpack://examples//home/runner/work/kgpu/kgpu/modules/kgpu/src/jsMain/kotlin/io/github/kgpu/JsWindow.kt","webpack://examples//home/runner/work/kgpu/kgpu/modules/kgpu/src/jsMain/kotlin/io/github/kgpu/internal/ArrayBufferUtils.kt","webpack://examples//home/runner/work/kgpu/kgpu/modules/kshader/src/jsMain/kotlin/io.github.kgpu.kshader/JsKShader.kt","webpack://examples//home/runner/work/kgpu/kgpu/modules/kshader/src/jsMain/kotlin/io.github.kgpu.kshader/glslang.kt","webpack://examples//home/runner/work/kgpu/kgpu/modules/kcgmath/src/commonMain/kotlin/io.github.kgpu.kcgmath/MathUtils.kt","webpack://examples//home/runner/work/kgpu/kgpu/modules/kcgmath/src/commonMain/kotlin/io.github.kgpu.kcgmath/Matrix.kt","webpack://examples//home/runner/work/kgpu/kgpu/modules/kcgmath/src/commonMain/kotlin/io.github.kgpu.kcgmath/Vec.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/TtfFont.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/DXT.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/GIF.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/ICO.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmap.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmap1.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmap32.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmap4.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmap8.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/BitmapIndexed.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/BitmapChannel.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/BitmapSlice.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmaps.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/RGBA.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/NativeImage.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/BGRA.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/ColorFormat.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/Colors.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/RGB.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/RGBA_16.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/YCbCr.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/BitmapFont.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/DefaultTtfFont.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/Font.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/FontRegistry.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/Context2d.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/GlyphPath.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/Metrics.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/NativeSystemFontProvider.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/SystemFont.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/BMP.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/VectorFont.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/DDS.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/ImageData.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/ImageFormat.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/ImageFormats.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/ImageFrame.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/ImageInfo.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/KRA.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/KorioExt.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/NativeImageFormatProvider.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/PNG.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/renderer/Renderer.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/PSD.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/RegisteredImageFormats.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/SVG.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/TGA.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/internal/ClampExt.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/internal/MathExt.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/paint/Filler.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/paint/Paint.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/text/TextAlignment.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/text/TextRenderer.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/shape/Shape2d.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/bezier/Bezier.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/Bitmap32Context2d.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/CompositeOperation.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/VectorPath.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/CycleMethod.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Matrix.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/GraphicsPath.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/LineScaleMode.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/Shape.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/ShapeRasterizerMethod.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/StrokeInfo.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/format/SVG.kt","webpack://examples/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/rasterizer/Rasterizer.kt","webpack://examples/../../../../../korim/src/jsMain/kotlin/com/soywiz/korim/format/HtmlCanvas.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/segment/IntSegmentSet.kt","webpack://examples/../../../../../korim/src/jsMain/kotlin/com/soywiz/korim/format/HtmlImage.kt","webpack://examples/./kotlin-dce/org.w3c/org.khronos.webgl.kt","webpack://examples/../../../../../korim/src/jsMain/kotlin/com/soywiz/korim/format/NativeImageFormatProviderJs.kt","webpack://examples/./kotlin-dce/org.w3c/org.w3c.files.kt","webpack://examples/../../../../../korim/src/jsMain/kotlin/com/soywiz/korim/font/NativeSystemFontProviderFallback.kt","webpack://examples//home/runner/work/kgpu/kgpu/build/js/node_modules/buffer/index.js","webpack://examples//home/runner/work/kgpu/kgpu/build/js/node_modules/base64-js/index.js","webpack://examples//home/runner/work/kgpu/kgpu/build/js/node_modules/ieee754/index.js","webpack://examples//home/runner/work/kgpu/kgpu/build/js/node_modules/isarray/index.js","webpack://examples/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/FastMap.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/math/Math.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Anchor.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Angle.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/BoundsBuilder.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Matrix3D.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Point.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/PointArrayList.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Rectangle.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Size.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Vector3D.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/Edge.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/LineCap.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/LineJoin.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/PolygonScanline.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/StrokeToFill.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/VectorBuilder.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/Winding.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/internal/Internal.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/interpolation/Interpolation.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/math/ArrayExt.kt","webpack://examples/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/interpolation/Easing.kt"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Kotlin","_","isBooleanArray","a","Array","isArray","Int8Array","$type$","isByteArray","isShortArray","Int16Array","isCharArray","Uint16Array","isIntArray","Int32Array","isFloatArray","Float32Array","isDoubleArray","Float64Array","isLongArray","isArrayish","ArrayBuffer","isView","arrayToString","toString","String","fromCharCode","map","e","join","arrayEquals","b","length","equals","arrayHashCode","arr","result","hashCode","getCallableRef","f","callableName","getPropertyCallableRef","set","setter","obj","cache","$metadata$","implementedInterface","getPropertyRefMetadata","mutable","immutable","constructor","getPropertyRefClass","propertyRefClassMetadataCache","paramCount","buf","bufFloat64","bufFloat32","bufInt32","lowIndex","highIndex","kotlin","reflect","KMutableProperty0","KProperty0","KMutableProperty1","KProperty1","getObjectHashCode","hash","Math","random","throwMarkerError","Error","imul","toShort","toByte","toChar","numberToLong","Long","fromNumber","numberToInt","toInt","doubleToInt","numberToShort","numberToByte","numberToDouble","numberToChar","toBoxedChar","BoxedChar","unboxChar","obj1","obj2","objType","numberHashCode","Number","str","code","charCodeAt","getStringHashCode","identityHashCode","this","low_","low","high_","high","IntCache_","fromInt","cachedObj","isNaN","ZERO","TWO_PWR_63_DBL_","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL_","fromBits","lowBits","highBits","fromString","radix","opt_radix","charAt","substring","indexOf","radixToPower","pow","size","min","parseInt","power","multiply","add","TWO_PWR_16_DBL_","TWO_PWR_24_DBL_","TWO_PWR_31_DBL_","TWO_PWR_48_DBL_","TWO_PWR_64_DBL_","ONE","NEG_ONE","TWO_PWR_24_","toNumber","getLowBitsUnsigned","isZero","isNegative","equalsLong","radixLong","div","rem","subtract","remDiv","digits","getHighBits","getLowBits","getNumBitsAbs","val","bit","isOdd","other","notEqualsLong","lessThan","compare","lessThanOrEqual","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","b00","approx","shiftRight","shiftLeft","res","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","and","or","xor","numBits","shiftRightUnsigned","compareTo_11rb$","inc","dec","valueOf","unaryPlus","unaryMinus","inv","rangeTo","ranges","LongRange","defineInlineFunction","fun","wrapFunction","apply","arguments","suspendCall","coroutineResult","coroutineReceiver","setCoroutineResult","compareTo","typeA","doubleCompareTo","primitiveCompareTo","ia","imulEmulated","doubleToRawBits","doubleFromBits","floatToRawBits","floatFromBits","ensureNotNull","x","throwNPE","startsWith","searchString","position","lastIndexOf","endsWith","subjectString","undefined","lastIndex","sign","trunc","NaN","taylor_2_bound","sqrt","taylor_n_bound","upper_taylor_2_bound","upper_taylor_n_bound","sinh","abs","y","exp","y1","isFinite","cosh","tanh","Infinity","asinh","acosh","atanh","log1p","x2","x3","expm1","hypot","log10","LOG10E","LOG2E","clz32","asUint","__proto__","fill","TypeError","O","len","start","relativeStart","k","end","relativeEnd","finalValue","normalizeOffset","offset","typedArraySlice","begin","subarray","arrays","TypedArray","slice","Function","self","array","callback","totalOrderComparator","sort","compareFunction","Kind","callGetter","thisObject","klass","propertyName","propertyDescriptor","getOwnPropertyDescriptor","getPrototypeOf","isType","proto","kind","OBJECT","klassMetadata","INTERFACE","isInheritanceFromInterface","ctor","iface","metadata","interfaces","superPrototype","superConstructor","isNumber","isChar","isComparable","type","Comparable","isCharSequence","CharSequence","ordinal","initValue","fillArrayVal","init","element","index","NoSuchElementException","IntRange","destination","item","toCollection","emptyList","listOf","asCollection","list","emptySet","setOf","separator","prefix","postfix","limit","truncated","transform","buffer","count","isEmpty","checkIndexOverflow","iterator","hasNext","last","next","single","j","collectionSizeOrDefault","optimizeReadOnlyList","optimizeReadOnlySet","to","first","step","EMPTY","minimumValue","maximumValue","CharIterator","IntIterator","LongIterator","getProgressionLastElement","endInclusive","NotImplementedError","nextByte","nextChar","nextShort","nextInt","nextLong","nextFloat","nextDouble","nextBoolean","CharProgressionIterator","CharProgression","rangeStart","rangeEnd","IntProgressionIterator","IntProgression","LongProgressionIterator","LongProgression","CharRange","mod","differenceModulo","BooleanIterator","ByteIterator","ShortIterator","FloatIterator","DoubleIterator","context","current","v","currentResult","isFailure","currentException","exceptionOrNull","doResume","outcome","exception","completion","Result","createFailure","intercepted","CoroutineImpl","receiver","cause","message","Exception","RuntimeException","src","dst","srcLen","dstLen","source","newSize","defaultValue","checkRadix","ArrayList","fromIndex","toIndex","sortArray","comparator","midPoint","reverseIndex","tmp","toArray","copyToArrayImpl","collection","push","pair","collectionsSort","naturalOrder","copyToArray","throwIndexOverflow","expectedSize","AbstractCollection","AbstractMutableCollection","AbstractMutableList","AbstractMap","AbstractMutableSet","initialCapacity","elements","getStableSortingIsSupported","comparison","mergeSort","_stableSortingIsSupported","median","left","leftIndex","rightIndex","right","leftValue","rightValue","target","checkIsMutable","remove","modified","it","_index","changed","times","hasPrevious","newValue","oldValue","entries","clear","from","iter","entry","modCount","splice","concat","pop","value1","value2","internalMap","equality","InternalHashCodeMap","loadFactor","createJsMap","keys","original","BaseOutput","BufferedOutput","initialResult","ClassCastException","NEGATIVE_INFINITY","toRawBits","bits","POSITIVE_INFINITY","isInfinite","hi26","INV_2_26","low27","INV_2_53","KClassImpl","jClass","createEntrySet","chainOrEntry","chain","isChain","chainSize","keyIndex","itemIndex","state","lastEntry","_head","_tail","node","old","newEntry","build","println","outputStream","write","messageString","flush","console","cur","event","simpleName","jsClass","PrimitiveKClassImpl","functionClasses","arity","getKClassM","getKClass1","jClasses","ErrorKClass","stringClass","SimpleKClassImpl","kClass","content","matches","MIN_HIGH_SURROGATE","MAX_HIGH_SURROGATE","MIN_LOW_SURROGATE","MAX_LOW_SURROGATE","toLowerCase","char","pattern","options","RegExp","match","IndexOutOfBoundsException","startIndex","endIndex","reversed","isLowSurrogate","isHighSurrogate","concatToString","string","toInsert","newLength","destinationOffset","dstIndex","stringCsq","reset","exec","input","test","findNext","Regex","replace","replacement","lastStart","sb","foundMatch","range","nonGlobalOptions","subSequence","literal","AbstractList","ignoreCase","n1","n2","s1","s2","toUpperCase","regionMatches","suffix","regex","regionMatchesImpl","thisOffset","otherOffset","MatchGroup","previous","nextIndex","otherIterator","elem","elemOther","AbstractSet","ourValue","ArrayAsCollection","ArithmeticException","safeToConvertToSet","values","contains","isVarargs","pairs","putAll","emptyMap","asList","convertToSetForSetOperationWith","toHashSet","filterInPlace","predicate","predicateResultToRemove","writeIndex","readIndex","removeIndex","SequenceBuilderIterator","nextStep","block","SequenceScope","sequence","throwOnFailure","GeneratorSequence","seedFunction","nextFunction","FlatteningSequence","itemIterator","nextItemIterator","emptySequence","SubSequence","TakeSequence","nextItem","nextState","safe","getOrThrow","acc","removed","interceptor","CombinedContext","baseKey","operation","initial","newLeft","Random","defaultPlatformRandom","accumulator","until","checkRangeBounds","fastLog2","bitCount","nLow","nHigh","rnd","doubleFromParts","r1","nextDown","steps","remainder","vr","seed","boundsErrorMessage","seed1","seed2","newIndent","lines","isBlank","line","isWhitespace","firstChar","limitBeforeMul","digitOf","digit","limitForMaxRadix","NumberFormatException","padChar","chars","indices","indexOfAny","charArrayOf","lastIndexOfAny","currentStartIndex","DelimitedRangesSequence","currentIndex","strings","findAnyOf","second","delimiters","currentOffset","delimiter","isLimited","splitToSequence","lineSequence","v0","takeUpperBits","nextSearchIndex","groupValues","initializer","isInitialized","InitializedLazyImpl","Pair","that","UByte","UByteIterator","UInt","uintCompare","data","ulongCompare","uintDivide","ulongDivide","uintRemainder","ulongRemainder","storage","UIntProgression","UIntRange","uintToDouble","UIntProgressionIterator","UIntIterator","ULong","nextUByte","nextUInt","nextULong","ULongProgression","ulongToDouble","ulongToString","ULongProgressionIterator","ULongIterator","ac","bc","UShort","uradix","beforeAdding","v1","v2","divisor","dividend","quotient","base","toMutableList","joinTo","sum","resultSize","sortWith","addAll","toIntExactOrNull","fillFrom","booleanArrayIterator","byteArrayIterator","shortArrayIterator","charArrayIterator","intArrayIterator","longArrayIterator","floatArrayIterator","doubleArrayIterator","captureStackTrace","instance","stack","UnsafeLazyImpl","rangeSize","subrange","arrayCopyResize","output","delegate","EventListenerHandler","handler","NullPointerException","round","intClass","doubleClass","booleanClass","functionClass","booleanArrayClass","charArrayClass","byteArrayClass","shortArrayClass","intArrayClass","longArrayClass","floatArrayClass","doubleArrayClass","arrayClass","anyClass","throwableClass","toIntOrNull","numberFormatError","toLongOrNull","oldChar","newChar","_suppressed","suppressed","mapOf","optimizeReadOnlyMap","toMutableMap","toSet","createCoroutineUnintercepted","replaceIndent","startFound","padStart","missingDelimiterValue","rangesDelimitedBy","isNode","NodeJsOutput","BufferedOutputToConsoleLog","Comparator","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","noop","nextTick","args","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","g","arrayCopy","answer","coerceAtLeast","mapCapacity","capacity","compareValues","selector","sortedWith","toDouble","toDoubleOrNull","trimIndent","Kgpu","adapter","requestDeviceAsync","BufferDescriptor","BufferUtils","BindGroupLayoutDescriptor","BindGroupDescriptor","bindGroupLayout","BindGroupEntry","PipelineLayoutDescriptor","KShader","COLLATZ_SHADER","ComputePipelineDescriptor","ProgrammableStageDescriptor","shader","createCommandEncoder","cmdEncoder","beginComputePass","computePass","computePipeline","endPass","getDefaultQueue","finish","ByteUtils","getBytes","setExampleStatus","joinToString","windowSize","height","MathUtils","aspectRatio","viewMatrix","modelMatrix","clone","invert","transpose","device","label","matrix","toBytes","isOutOfDate","getCurrentTextureView","RenderPassColorAttachmentDescriptor","swapChainTexture","Color","BLACK","RenderPassDescriptor","colorAttachment","renderPassEncoder","cmdBuffer","present","RenderPipelineDescriptor","pipelineLayout","vertexModule","fragModule","RasterizationStateDescriptor","ColorStateDescriptor","BlendDescriptor","VertexStateDescriptor","VertexBufferLayoutDescriptor","VertexAttributeDescriptor","Sphere","earth","generateIndices","generateVertices","loadImage","Vec3","UNIT_Z","vertex","frag","TextureDescriptor","Extent3D","width","textureDesc","BufferCopyView","textureBuffer","TextureCopyView","texture","destroy","SamplerDescriptor","textureView","sampler","transformationMatrixBuffer","normalMatrixBuffer","modelMatrixBuffer","createRenderPipeline","fragShader","pipelineDesc","SwapChainDescriptor","swapChain","swapChainDescriptor","angleXY","angleZ","PIf","chunk","radius","vertices","pos","z","normalize","sliceIndex","nextSliceIndex","readBitmap","resourcesVfs","image","toBMP32","IMAGE_FORMAT","WHITE","cullMode","indexFormat","UNIT_Y","projMatrix","CUBE","FRAG","toFloats","descriptor","matrixBuffer","TRIANGLE","button","TEXTURE_FORMAT","cpuMatrix","gpuMatrix","cpuTotal","gpuTotal","createAttachmentTexture","Window","kgpuWindow","URL","location","href","searchParams","launch","GlobalScope","document","getElementById","id","createStatusElement","innerHTML","msg","createElement","style","resolve","VERTEX","COMPUTE","boidData","boidBuffers","boidBindGroups","computePipelineLayout","computeShader","computePipelineDesc","renderPipelineLayout","generateMatrix","computeCPU","time","computeGPU","gpuResult","compareResults","resultY","indexA","indexB","resultIndex","flushExampleStatus","timeExecution","ComputationResult","bufferA","bufferB","SHADER_SOURCE","computationTime","runCubeExample","runTextureExample","runEarthExample","hideCanvas","runComputeExample","runMsaaTriangle","runComputeCompareExample","runWindowEventExample","runBoidExample","runTriangleExample","Date","getTime","Promise","promise","shift","ctrl","alt","usage","floatArray","bytes","byteArray","floats","byteI","ints","intArray","shortArray","update","func","requestAnimationFrame","Adapter","frontFace","jsType","srcFactor","dstFactor","format","stepMode","viewDimension","textureComponentType","storageTextureFormat","bindGroupLayouts","dimension","OUTPUT_ATTACHMENT","resolveTarget","storeOp","attachment","clearColor","resource","intoBindingResource","layout","Origin3D","addressModeU","addressModeV","addressModeW","magFilter","minFilter","mipmapFilter","getContext","WindowSize","addEventListener","onKeyDown","toKeyEvent","keyEvent","onKeyTyped","EventListener","onKeyUp","mouseEvent","onMouseClick","toClickEvent","onMouseRelease","getBoundingClientRect","mouseX","clientX","rect","mouseY","clientY","top","onMouseMove","ClickEvent","shiftKey","ctrlKey","altKey","keyCode","KeyEvent","requestDevice","Device","toTypedArray","Uint32Array","createShaderModule","desc","createPipelineLayout","Texture","createTexture","CommandEncoder","Queue","defaultQueue","Buffer","createBuffer","BindGroupLayout","createBindGroupLayout","mappedAtCreation","Uint8Array","getMappedRange","unmap","BindGroup","createBindGroup","Sampler","createSampler","createComputePipeline","RenderPassEncoder","beginRenderPass","CommandBuffer","copyBufferToTexture","copySize","ComputePassEncoder","sourceOffset","copyBufferToBuffer","copyTextureToBuffer","dest","setPipeline","pipeline","firstVertex","firstInstance","draw","vertexCount","instanceCount","setVertexBuffer","slot","baseVertex","drawIndexed","indexCount","setIndexBuffer","setBindGroup","bindGroup","dispatch","TextureView","createView","getCurrentTexture","cmdBuffers","submit","dataOffset","arrayBuffer","writeBuffer","BufferData","mapAsync","GPUMapMode","READ","onResize","SwapChain","configureSwapChain","pageX","pageY","bottom","visibility","multisampled","getGlslang","toByteArray","compileGLSL","script","setAttribute","scriptSrc","body","deg","rad","Matrix4","M00","M10","M20","M30","M01","M11","M21","M31","M02","M12","M22","M32","M03","M13","M23","M33","scalar","column","row","columnStart","outputs","IDENTITY","zNear","zFar","fov","h","aspect","eye","center","up","direction","newUp","angleX","angleY","cosX","sinX","cosY","nm02","sinY","nm12","nm22","nm32","nm00","cosZ","nm01","sinZ","nm10","nm11","nm20","nm21","nm30","nm31","temp","swap","det","nm03","nm13","nm23","nm33","builder","mag","coerceIn","cosTheta","lengthSquared","trim","sin","cos","acos","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","RangeError","arg","encodingOrOffset","allocUnsafe","byteOffset","byteLength","fromArrayLike","fromArrayBuffer","encoding","isEncoding","actual","isBuffer","checked","copy","fromObject","assertSize","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","bidirectionalIndexOf","arrayIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","parsed","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","fromByteArray","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","global","foo","typedArraySupport","poolSize","_augment","species","configurable","allocUnsafeSlow","_isBuffer","swap16","swap32","swap64","inspect","thisStart","thisEnd","thisCopy","targetCopy","includes","toJSON","_arr","ret","out","toHex","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","INVALID_BASE64_RE","leadSurrogate","stringtrim","base64clean","b64","lens","getLens","validLen","placeHoldersLen","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","num","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","rt","tan","atan2","atan","trimEnd"],"mappings":"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AT1I,0CAoBkC,mBAA0C6W,GAAA,WAC5E,oBAA2BtX,EAC3B,eAAmCS,EAAA,WAAO,EJvCyB0V,GIuCtB3V,EJvCwC0V,KIuC/BlW,EJvC2CkW,OIuCpD,EJvCsBC,GIuCH3V,EJvCqB0V,KIuCZlW,EJvCwBkW,OIuCjC,EAChE,YJ4MsC,IAAAY,GI5MnBrW,GACnB,YAAuB,eAASD,EAAW,oBCtG/C,mBAEI,MjGyHoD8V,GiGzH3ClsB,EAAI9B,GACb,EjGwHoDguB,GiGxH3CtqB,EAAI1D,GACb,OjGiDkE2tB,GiGjDvDsB,EjGiDwErB,KiGjDlEsB,EjGiD8EtB,OiGjDpF,EjGgF2C,IAAAF,GiGhFjCuB,EjGgF2CrB,KiGhFtCsB,EjGgFuDtB,KAAZ,GAbhB,IAAAF,GAAU,IAaTA,GiGhFpBuB,EjGgF8BrB,KiGhFzBsB,EjGgF0CtB,KAAZ,GAbNA,KiGnEnB5tB,EjGmEmC4tB,KAAX,GiGhExE,mBACI,MLsHsDK,GKtH7CnsB,EAAI9B,GACb,ELqHsDiuB,GKrH7CvqB,EAAI1D,GACb,OLmDmE6tB,GKnDxDoB,ELmD0ErB,KKnDpEsB,ELmDgFtB,OKnDtF,EL6E6C,IAAAY,GK7EnCS,EL6E8CrB,KAAK,SK7E9CsB,EL6E0DtB,OAb7B,IAAAY,GAAW,IAaVA,GK7EtBS,EL6EiCrB,KAAK,SK7EjCsB,EL6E6CtB,OAblBA,KAAK,IKhE3B5tB,ELgEsC4tB,OK7DtF,mBAmBI,GAAAzV,EAAO,EADuE,OjGsBZwV,GiGrBlD/a,EjGqBmEgb,KiGrB1D7a,EjGqBsE6a,OiGrB/E,EAAc7a,EjGoDwB,IAAA2a,GiGpDf3a,EjGoDyB6a,KiGpDnB,GAAiB7a,EAAKH,EjGkQhC,IAAA8a,GiGlQuCvV,IjGoDOyV,KAAZ,GiGnDrE,GAAAzV,EAAO,EAFuE,OjGsBZwV,GiGpBlD/a,EjGoBmEgb,KiGpB1D7a,EjGoBsE6a,OiGpB/E,EAAc7a,EjGsCuB,IAAA2a,GiGtCd3a,EjGsCwB6a,KiGtClB,GAAiBhb,EAAOG,EjGiQlC,IAAA2a,GiGjQwC,GAACvV,IjGsCGyV,KAAX,GiGrC5D,MAAa,GAAyB,iBAGlD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AA,GkBKI,uB,+ClBmDA,Y,uEAG8B,gD,CAGlC,aAA6C,EAA7C,GACA,UAAiC,IAA6B,G,aAE9D,E,UACiB,0BACjB,G,qJkBtDA,G,mEASI,gB,uBAEJ,G,6BAEA,0BAEA,+B,mDACe,+B,6DACE,kB,yBACF,mB,GAAY,yB,GzHmBjB,6BAA8B,G,6ByHjBxC,G,6DzHKJ,KyHHI,0BACe,oC,GACE,4B,mCACG,sB,cAChB,KzHWM,qB,uDkHvFd,O,WDwPwE,OCxPxE,M,uGOqFI,sB,wGAEwC,K,uEACiB,G,oCACvB,Y,6NASL,e,wCAC7B,Y,GAAA,gB,sHAYA,KACI,K,iBAEJ,G,kDAOQ,W,oBAEG,cACX,G,uIAUA,gC,GAEA,gD,yCAAA,mB,qDAE6C,iC,iFqD5IzC,e,GACJ,G,kDAEwB,W,2ICFyE,sB,2BCDrG,qBAAuG,e,wBACvG,aAAwE,sB,yBACxE,oBAA0F,mB,gDAAA,W,yBAE5B,8B,+OxEuS1D,Q,wMgCzMI,kB,8BJhB4C,e,EAAA,E,gBAlBpD,yB,OAWqD,E,EAOD,oB,6CA0CJ,sB,0CSrGhD,S,UAAA,qB,MAAA,G,+HoCD0C,wB,uIzCqE1C,QAMW,Q,ohEnClDX,qB,EAAA,E,cANA,M,eAAA,E,EAAA,Y,OAAA,qB,UAAA,I,YAMuC,mB,6EsEzBnC,E,aACI,uB,qBtEwBR,G,moN6EvDA,IAAIyuB,EAGJA,EAAI,WACH,OAAOzuB,KADJ,GAIJ,IAECyuB,EAAIA,GAAK,IAAI9iB,SAAS,cAAb,GACR,MAAOnQ,GAEc,iBAAXhE,SAAqBi3B,EAAIj3B,QAOrCH,EAAOD,QAAUq3B,G,4lBrLosBjB,4C,EA8wBA,qD,EAAA,4C,Gfp7CA,YqM2JqB,a,sV3IqzBrB,K,ErBv4BA,oC,gqB3BlEA,sC,qCKkpCA,8H,qHLh9BA,yB,8QQlHA,4C,EYxHA,6B,qJfi3CA,oC,sXsBjgBA,gCgK33BoB,oBAAC,UAAuB,IAAvB,mBACjB,YAAmB,OAAW,kBAC9B,kBAAyB,cAAU,MAEnC,yBACA,sBCEc,eAEO,MADrB,UADe,UAAgB,GAE/B,oBAAqB,8BAAS,IAAT,MAErB,cAA0B,EAH1B,sB,uIDJA,0C,I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,IAAK,G5LwHoC,MAAM,G4LxH7B,cAAa,EAAb,gBAAgC,EAAhC,K5LwH2DP,Y4LvHjF,OAAO,G,mFCTP,4BAAY,UAAmB,GAA/B,iCAAqD,UAAK,GAAI,EAAa,GAA3E,G,iGGqCJ,gBAEI,MADI,gBAAe,QAAQ,KAC3B,mBxMkMA,cwMlMW,EAAM,I,mECrCrB,cAAyC,SAAK,KAAW,EAAK,U,2BAY9D,YAAkG,IAA4B,EAA5B,EAAtB,IAA6B,yB,CAAqB,MAArB,KAAM,iBAAK,iBrLqE1G,EpBsJN,YyM3NoI,EAAO,GAAnE,OrLsEjE,G,uBqLrEX,YAA2F,IAA4B,EAA5B,EAAtB,IAA6B,IAAqB,4B,CAAA,eAAf,iBAAK,iBrLoEnG,EpBsJN,YyM1N4H,EAAO,GAAlE,OrLqE1D,G,gBqLnEX,Y1G+DW,IA2BM,EA3BN,EAAM,E0G/DwB,E1G+DXsG,MA2B1B,IAAa,E0G1FwB,EzMmV+CuV,QAAQxH,W+FzP/E,a,CAAA,eACTnB,EAAY,U0G3FgC,M1G2FlBC,E0G3F0B,M1G2F1BA,E0G3FoC,MAA7B,OAAoC,G1G4FlED,I,2C2GvHX,kBACI,UAAY,EAAS,EAAM,EAAO,GAAK,I,guBGU3C,WAA6C,OAAQ,S,oBACd,YAAQ,OAAM,EAAa,O,m5BC8B3C,4B,8M/M+CvB,2C,4CiD65BA,K,2D5B1+BA,6B,+FEsBA,iB,EDuDQ,+B,ECsCR,mD,GAAA,kD,yD0FjBI,iD,EjB3BJ,4C,E1F84CA,qD,oKgBl0CA,gC,gG0L7IkC,sB,evMkHlC,4C,GwMlGA,oC,gKCW8C,e,cCurBf,a,IAvdJ,wBAUV,yB5N9QjB,O,mJ6NoB6B,kB,khBCK2B,iB,GpNoNxD,yB,gCqNpKgD,W,+pBtNRhD,sC,wvCwExBA,oC,kD+IiBuB,2B,mNzLzDvB,iC,uQ0LgDyB,qB,2avN4WzB,0C,GAAA,+C,6HKkiBA,sCoE31BA,qB,gJpE6gCA,uC,+LAqhBA,gC,oUwD/hDI,yC,yMvEnEJ,yB,GekNA,2C,wXyDhJA,2B,GzDy3BA,wC,yFLp7BA,sC,+D8DiFA,8B,isB7D5FA,qC6D0MA,8B,ghDmCq7FA,oB+G1oGA,oC,sRQ4GqD,iB,sahIiKr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2PjOsB,E3PiOtB,K,8B2P7NF,Y1BbD,IACe,MAFf,EAAQ,EACD,E0BcL,E1BdS,Q0BeR,sBADD,G1Bba,YAAL,M,8B0BkBT,clQigWS,IA+UM,EA/UN,EAAM,EkQ7/VZ,ElQ6/VyB,QA+U1B,IAAK,EAAL,MkQ50WC,ElQ40WD,W,CAAa,MkQ50WZ,ElQ40WD,GACIyV,EAAY,UAAcC,EiB3rWkCoN,eiPrJjE,sBACC,OACC,ElQ+0WMrN,K,oCkQ3zWT,cACC,kBAD+B,UAAoB,+BACnD,wBAAsB,EjP8H2CqN,gBiP9HjE,EAA4C,G,wEA/C9C,0CCJD,sB,yFACC,Y3BAA,I2BCC,I3BAc,E2BAd,E5PwG4D,I4PvG7C,EAAX,GAAJ,EAAI,cAAM,K3BHX,EAAQ,EACD,EAAI,Q,C2BGT,I5P0VQ,E4P1VR,EAAkB,G3BFV,eAAK,YAAL,I2BEU,cAAM,SAAN,EAAmB,GACrC,EAAU,KAAI,wBAAgB,cAAM,GAAI,IAAuB,GAC/D,EAAY,KAAI,wBAAgC,GvP6Pb,GuP7PH,KvP6Pc,YuP7PE,GAAhC,EAA4C,IAAuB,G5PuVlF,EAAY,Y4PtVW,G5PuVhB,GAAI,Q,CACP,MDjQ4C,ICkQ5C,c4PzVmB,E5PyVVgT,GACT,EAAAA,OAEA,IALJ,EuEhTK,UqLtCE,GAET,OAAO,G,4BAGR,Y7J2BU,IAoBS,EApBT,EAAU,IAoBjB,IAAgB,E6J/C0C,E5PgW0B1X,QAAQxH,W+FjT5E,a,CAAA,I1Fk/CH,E0Fl/CG,W6J/CyD,E7JgDhDvB,E/FmOuC/U,I4PnRc,E7JgDrD+U,E/FgPuCrV,MK0rCzD,EAAM,EAAakX,EuP19C8D,EvP09CtC,KAuElD,IAAa,EuPjiD2E,EvPiiD3E,wB,CAAA,eACT,EAAY,UuPliDoF,IvPkiDtExB,I0Fj/Cd2Z,GAAZ5Z,E1Fk/CG,GuPniD2C,2B/NHgB2G,GkEsD3D3G,G6JnD2C,U,4BAErD,Y3BPA,I2BQC,I3BPc,E2BOd,E7P8EkD,IkOvFnD,EAAQ,EACD,E2BSN,E3BTU,Q,CACV,M2BQA,G3BRc,YAAL,I2BQY,iBAAK,iBACzB,EAAS,KAAI,wBAAgB,EAAK,IAAuB,GAAQ,IAAM,KAAI,wBA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wBACA,wBACA,wBACA,oBACA,sBACA,qBACA,oBACA,uBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,oBACA,oBACA,oBACA,sBACA,sBACA,6BACA,8BACA,0BACA,0BACA,2BACA,sBACA,uBACA,sBACA,sBACA,0BACA,6BACA,0BACA,sBACA,uBACA,wBAzEA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BCpIJ,sB,sBDqCI,WACI,MAAO,cAAa,KAAA4B,MAAb,KAAqB,KAAA5C,OAArB,K,qFAFf,WAAsB,mB,wBAAtB,WAAsC,oB,0BAAtC,iCAAsB,wBAAgB,sB,sBAAtC,0BAAsC,MAAhB,iCAAgB,2B,oBAAtC,mHAAsB,8BAAgB,gC,sBAOlC,WACI,MAAO,kBAAiB,KAAA93B,IAAjB,aAA+B,KAAAwhC,MAA/B,YAA8C,KAAAC,KAA9C,WAA2D,KAAAC,IAA3D,K,mFAFf,WAAoB,iB,wBAApB,WAAkC,mB,wBAAlC,WAAsD,kB,wBAAtD,WAAyE,iB,0BAAzE,qCAAoB,sBAAc,wBAAoB,uBAAmB,mB,sBAAzE,0BAAyE,MAAnB,MAApB,MAAd,+BAAc,0BAAoB,yBAAmB,wB,oBAAzE,mHAAoB,0BAAc,8BAAoB,4BAAmB,0B,qFAMzE,WACI,oB,wBADJ,WAC6B,mB,wBAD7B,WACiD,kB,wBADjD,WACoE,iB,0BADpE,qCACI,yBA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","file":"examples.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"examples\"] = factory();\n\telse\n\t\troot[\"examples\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('kotlin', ['exports'], factory);\n    }\n    else if (typeof exports === 'object') {\n        factory(module.exports);\n    }\n    else {\n        root.kotlin = {};\n        factory(root.kotlin);\n    }\n}(this, function (Kotlin) {\n    var _ = Kotlin;\n\n    insertContent();\n}));\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.isBooleanArray = function (a) {\n    return (Array.isArray(a) || a instanceof Int8Array) && a.$type$ === \"BooleanArray\"\n};\n\nKotlin.isByteArray = function (a) {\n    return a instanceof Int8Array && a.$type$ !== \"BooleanArray\"\n};\n\nKotlin.isShortArray = function (a) {\n    return a instanceof Int16Array\n};\n\nKotlin.isCharArray = function (a) {\n    return a instanceof Uint16Array && a.$type$ === \"CharArray\"\n};\n\nKotlin.isIntArray = function (a) {\n    return a instanceof Int32Array\n};\n\nKotlin.isFloatArray = function (a) {\n    return a instanceof Float32Array\n};\n\nKotlin.isDoubleArray = function (a) {\n    return a instanceof Float64Array\n};\n\nKotlin.isLongArray = function (a) {\n    return Array.isArray(a) && a.$type$ === \"LongArray\"\n};\n\nKotlin.isArray = function (a) {\n    return Array.isArray(a) && !a.$type$;\n};\n\nKotlin.isArrayish = function (a) {\n    return Array.isArray(a) || ArrayBuffer.isView(a)\n};\n\nKotlin.arrayToString = function (a) {\n    if (a === null) return \"null\"\n    var toString = Kotlin.isCharArray(a) ? String.fromCharCode : Kotlin.toString;\n    return \"[\" + Array.prototype.map.call(a, function(e) { return toString(e); }).join(\", \") + \"]\";\n};\n\nKotlin.arrayDeepToString = function (arr) {\n    return Kotlin.kotlin.collections.contentDeepToStringImpl(arr);\n};\n\nKotlin.arrayEquals = function (a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a === null || b === null || !Kotlin.isArrayish(b) || a.length !== b.length) {\n        return false;\n    }\n\n    for (var i = 0, n = a.length; i < n; i++) {\n        if (!Kotlin.equals(a[i], b[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\nKotlin.arrayDeepEquals = function (a, b) {\n    return Kotlin.kotlin.collections.contentDeepEqualsImpl(a, b);\n};\n\nKotlin.arrayHashCode = function (arr) {\n    if (arr === null) return 0\n    var result = 1;\n    for (var i = 0, n = arr.length; i < n; i++) {\n        result = ((31 * result | 0) + Kotlin.hashCode(arr[i])) | 0;\n    }\n    return result;\n};\n\nKotlin.arrayDeepHashCode = function (arr) {\n    return Kotlin.kotlin.collections.contentDeepHashCodeImpl(arr);\n};\n\nKotlin.primitiveArraySort = function (array) {\n    array.sort(Kotlin.doubleCompareTo)\n};\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.getCallableRef = function(name, f) {\n    f.callableName = name;\n    return f;\n};\n\nKotlin.getPropertyCallableRef = function(name, paramCount, getter, setter) {\n    getter.get = getter;\n    getter.set = setter;\n    getter.callableName = name;\n    return getPropertyRefClass(getter, setter, propertyRefClassMetadataCache[paramCount]);\n};\n\nfunction getPropertyRefClass(obj, setter, cache) {\n    obj.$metadata$ = getPropertyRefMetadata(typeof setter === \"function\" ? cache.mutable : cache.immutable);\n    obj.constructor = obj;\n    return obj;\n}\n\nvar propertyRefClassMetadataCache = [\n    {\n        mutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KMutableProperty0 }\n        },\n        immutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KProperty0 }\n        }\n    },\n    {\n        mutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KMutableProperty1 }\n        },\n        immutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KProperty1 }\n        }\n    }\n];\n\nfunction getPropertyRefMetadata(cache) {\n    if (cache.value === null) {\n        cache.value = {\n            interfaces: [cache.implementedInterface()],\n            baseClass: null,\n            functions: {},\n            properties: {},\n            types: {},\n            staticMembers: {}\n        };\n    }\n    return cache.value;\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.compareTo = function (a, b) {\n    var typeA = typeof a;\n    if (typeA === \"number\") {\n        if (typeof b === \"number\") {\n            return Kotlin.doubleCompareTo(a, b);\n        }\n        return Kotlin.primitiveCompareTo(a, b);\n    }\n    if (typeA === \"string\" || typeA === \"boolean\") {\n        return Kotlin.primitiveCompareTo(a, b);\n    }\n    return a.compareTo_11rb$(b);\n};\n\nKotlin.primitiveCompareTo = function (a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n};\n\nKotlin.doubleCompareTo = function (a, b) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n\n    if (a === b) {\n        if (a !== 0) return 0;\n\n        var ia = 1 / a;\n        return ia === 1 / b ? 0 : (ia < 0 ? -1 : 1);\n    }\n\n    return a !== a ? (b !== b ? 0 : 1) : -1\n};\n\nKotlin.charInc = function (value) {\n    return Kotlin.toChar(value+1);\n};\n\nKotlin.charDec = function (value) {\n    return Kotlin.toChar(value-1);\n};\n\nKotlin.imul = Math.imul || imul;\n\nKotlin.imulEmulated = imul;\n\nfunction imul(a, b) {\n    return ((a & 0xffff0000) * (b & 0xffff) + (a & 0xffff) * (b | 0)) | 0;\n}\n\n(function() {\n    var buf = new ArrayBuffer(8);\n    var bufFloat64 = new Float64Array(buf);\n    var bufFloat32 = new Float32Array(buf);\n    var bufInt32 = new Int32Array(buf);\n    var lowIndex = 0;\n    var highIndex = 1;\n\n    bufFloat64[0] = -1; // bff00000_00000000\n    if (bufInt32[lowIndex] !== 0) {\n        lowIndex = 1;\n        highIndex = 0;\n    }\n\n    Kotlin.doubleToBits = function(value) {\n        return Kotlin.doubleToRawBits(isNaN(value) ? NaN : value);\n    };\n\n    Kotlin.doubleToRawBits = function(value) {\n        bufFloat64[0] = value;\n        return Kotlin.Long.fromBits(bufInt32[lowIndex], bufInt32[highIndex]);\n    };\n\n    Kotlin.doubleFromBits = function(value) {\n        bufInt32[lowIndex] = value.low_;\n        bufInt32[highIndex] = value.high_;\n        return bufFloat64[0];\n    };\n\n    Kotlin.floatToBits = function(value) {\n        return Kotlin.floatToRawBits(isNaN(value) ? NaN : value);\n    };\n\n    Kotlin.floatToRawBits = function(value) {\n        bufFloat32[0] = value;\n        return bufInt32[0];\n    };\n\n    Kotlin.floatFromBits = function(value) {\n        bufInt32[0] = value;\n        return bufFloat32[0];\n    };\n\n    // returns zero value for number with positive sign bit and non-zero value for number with negative sign bit.\n    Kotlin.doubleSignBit = function(value) {\n        bufFloat64[0] = value;\n        return bufInt32[highIndex] & 0x80000000;\n    };\n\n    Kotlin.numberHashCode = function(obj) {\n        if ((obj | 0) === obj) {\n            return obj | 0;\n        }\n        else {\n            bufFloat64[0] = obj;\n            return (bufInt32[highIndex] * 31 | 0) + bufInt32[lowIndex] | 0;\n        }\n    }\n})();\n\nKotlin.ensureNotNull = function(x) {\n    return x != null ? x : Kotlin.throwNPE();\n};\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nif (typeof String.prototype.startsWith === \"undefined\") {\n    Object.defineProperty(String.prototype, \"startsWith\", {\n        value: function (searchString, position) {\n            position = position || 0;\n            return this.lastIndexOf(searchString, position) === position;\n        }\n    });\n}\nif (typeof String.prototype.endsWith === \"undefined\") {\n    Object.defineProperty(String.prototype, \"endsWith\", {\n        value: function (searchString, position) {\n            var subjectString = this.toString();\n            if (position === undefined || position > subjectString.length) {\n                position = subjectString.length;\n            }\n            position -= searchString.length;\n            var lastIndex = subjectString.indexOf(searchString, position);\n            return lastIndex !== -1 && lastIndex === position;\n        }\n    });\n}\n// ES6 Math polyfills\nif (typeof Math.sign === \"undefined\") {\n    Math.sign = function(x) {\n        x = +x; // convert to a number\n        if (x === 0 || isNaN(x)) {\n            return Number(x);\n        }\n        return x > 0 ? 1 : -1;\n    };\n}\nif (typeof Math.trunc === \"undefined\") {\n    Math.trunc = function(x) {\n        if (isNaN(x)) {\n            return NaN;\n        }\n        if (x > 0) {\n            return Math.floor(x);\n        }\n        return Math.ceil(x);\n    };\n}\n\n(function() {\n    var epsilon = 2.220446049250313E-16;\n    var taylor_2_bound = Math.sqrt(epsilon);\n    var taylor_n_bound = Math.sqrt(taylor_2_bound);\n    var upper_taylor_2_bound = 1/taylor_2_bound;\n    var upper_taylor_n_bound = 1/taylor_n_bound;\n\n    if (typeof Math.sinh === \"undefined\") {\n        Math.sinh = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result += (x * x * x) / 6;\n                }\n                return result;\n            } else {\n                var y = Math.exp(x);\n                var y1 = 1 / y;\n                if (!isFinite(y)) return Math.exp(x - Math.LN2);\n                if (!isFinite(y1)) return -Math.exp(-x - Math.LN2);\n                return (y - y1) / 2;\n            }\n        };\n    }\n    if (typeof Math.cosh === \"undefined\") {\n        Math.cosh = function(x) {\n            var y = Math.exp(x);\n            var y1 = 1 / y;\n            if (!isFinite(y) || !isFinite(y1)) return Math.exp(Math.abs(x) - Math.LN2);\n            return (y + y1) / 2;\n        };\n    }\n\n    if (typeof Math.tanh === \"undefined\") {\n        Math.tanh = function(x){\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result -= (x * x * x) / 3;\n                }\n                return result;\n            }\n            else {\n                var a = Math.exp(+x), b = Math.exp(-x);\n                return a === Infinity ? 1 : b === Infinity ? -1 : (a - b) / (a + b);\n            }\n        };\n    }\n\n    // Inverse hyperbolic function implementations derived from boost special math functions,\n    // Copyright Eric Ford & Hubert Holin 2001.\n\n    if (typeof Math.asinh === \"undefined\") {\n        var asinh = function(x) {\n            if (x >= +taylor_n_bound)\n            {\n                if (x > upper_taylor_n_bound)\n                {\n                    if (x > upper_taylor_2_bound)\n                    {\n                        // approximation by laurent series in 1/x at 0+ order from -1 to 0\n                        return Math.log(x) + Math.LN2;\n                    }\n                    else\n                    {\n                        // approximation by laurent series in 1/x at 0+ order from -1 to 1\n                        return Math.log(x * 2 + (1 / (x * 2)));\n                    }\n                }\n                else\n                {\n                    return Math.log(x + Math.sqrt(x * x + 1));\n                }\n            }\n            else if (x <= -taylor_n_bound)\n            {\n                return -asinh(-x);\n            }\n            else\n            {\n                // approximation by taylor series in x at 0 up to order 2\n                var result = x;\n                if (Math.abs(x) >= taylor_2_bound)\n                {\n                    var x3 = x * x * x;\n                    // approximation by taylor series in x at 0 up to order 4\n                    result -= x3 / 6;\n                }\n                return result;\n            }\n        };\n        Math.asinh = asinh;\n    }\n    if (typeof Math.acosh === \"undefined\") {\n        Math.acosh = function(x) {\n            if (x < 1)\n            {\n                return NaN;\n            }\n            else if (x - 1 >= taylor_n_bound)\n            {\n                if (x > upper_taylor_2_bound)\n                {\n                    // approximation by laurent series in 1/x at 0+ order from -1 to 0\n                    return Math.log(x) + Math.LN2;\n                }\n                else\n                {\n                    return Math.log(x + Math.sqrt(x * x - 1));\n                }\n            }\n            else\n            {\n                var y = Math.sqrt(x - 1);\n                // approximation by taylor series in y at 0 up to order 2\n                var result = y;\n                if (y >= taylor_2_bound)\n                {\n                    var y3 = y * y * y;\n                    // approximation by taylor series in y at 0 up to order 4\n                    result -= y3 / 12;\n                }\n\n                return Math.sqrt(2) * result;\n            }\n        };\n    }\n    if (typeof Math.atanh === \"undefined\") {\n        Math.atanh = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result += (x * x * x) / 3;\n                }\n                return result;\n            }\n            return Math.log((1 + x) / (1 - x)) / 2;\n        };\n    }\n    if (typeof Math.log1p === \"undefined\") {\n        Math.log1p = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var x2 = x * x;\n                var x3 = x2 * x;\n                var x4 = x3 * x;\n                // approximation by taylor series in x at 0 up to order 4\n                return (-x4 / 4 + x3 / 3 - x2 / 2 + x);\n            }\n            return Math.log(x + 1);\n        };\n    }\n    if (typeof Math.expm1 === \"undefined\") {\n        Math.expm1 = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var x2 = x * x;\n                var x3 = x2 * x;\n                var x4 = x3 * x;\n                // approximation by taylor series in x at 0 up to order 4\n                return (x4 / 24 + x3 / 6 + x2 / 2 + x);\n            }\n            return Math.exp(x) - 1;\n        };\n    }\n})();\nif (typeof Math.hypot === \"undefined\") {\n    Math.hypot = function() {\n        var y = 0;\n        var length = arguments.length;\n\n        for (var i = 0; i < length; i++) {\n            if (arguments[i] === Infinity || arguments[i] === -Infinity) {\n                return Infinity;\n            }\n            y += arguments[i] * arguments[i];\n        }\n        return Math.sqrt(y);\n    };\n}\nif (typeof Math.log10 === \"undefined\") {\n    Math.log10 = function(x) {\n        return Math.log(x) * Math.LOG10E;\n    };\n}\nif (typeof Math.log2 === \"undefined\") {\n    Math.log2 = function(x) {\n        return Math.log(x) * Math.LOG2E;\n    };\n}\nif (typeof Math.clz32 === \"undefined\") {\n    Math.clz32 = (function(log, LN2) {\n        return function(x) {\n            var asUint = x >>> 0;\n            if (asUint === 0) {\n                return 32;\n            }\n            return 31 - (log(asUint) / LN2 | 0) | 0; // the \"| 0\" acts like math.floor\n        };\n    })(Math.log, Math.LN2);\n}\n\n// For HtmlUnit and PhantomJs\nif (typeof ArrayBuffer.isView === \"undefined\") {\n    ArrayBuffer.isView = function(a) {\n        return a != null && a.__proto__ != null && a.__proto__.__proto__ === Int8Array.prototype.__proto__;\n    };\n}\n\nif (typeof Array.prototype.fill === \"undefined\") {\n    // Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill#Polyfill\n    Object.defineProperty(Array.prototype, 'fill', {\n        value: function (value) {\n\n            // Steps 1-2.\n            if (this == null) {\n                throw new TypeError('this is null or not defined');\n            }\n\n            var O = Object(this);\n\n            // Steps 3-5.\n            var len = O.length >>> 0;\n\n            // Steps 6-7.\n            var start = arguments[1];\n            var relativeStart = start >> 0;\n\n            // Step 8.\n            var k = relativeStart < 0 ?\n                    Math.max(len + relativeStart, 0) :\n                    Math.min(relativeStart, len);\n\n            // Steps 9-10.\n            var end = arguments[2];\n            var relativeEnd = end === undefined ?\n                              len : end >> 0;\n\n            // Step 11.\n            var finalValue = relativeEnd < 0 ?\n                             Math.max(len + relativeEnd, 0) :\n                             Math.min(relativeEnd, len);\n\n            // Step 12.\n            while (k < finalValue) {\n                O[k] = value;\n                k++;\n            }\n\n            // Step 13.\n            return O;\n        }\n    });\n}\n\n(function() {\n    function normalizeOffset(offset, length) {\n        if (offset < 0) return Math.max(0, offset + length);\n        return Math.min(offset, length);\n    }\n    function typedArraySlice(begin, end) {\n        if (typeof end === \"undefined\") {\n            end = this.length;\n        }\n        begin = normalizeOffset(begin || 0, this.length);\n        end = Math.max(begin, normalizeOffset(end, this.length));\n        return new this.constructor(this.subarray(begin, end));\n    }\n\n    var arrays = [Int8Array, Int16Array, Uint16Array, Int32Array, Float32Array, Float64Array];\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.fill === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'fill', {\n                value: Array.prototype.fill\n            });\n        }\n        if (typeof TypedArray.prototype.slice === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'slice', {\n                value: typedArraySlice\n            });\n        }\n    }\n\n    // Patch apply to work with TypedArrays if needed.\n    try {\n        (function() {}).apply(null, new Int32Array(0))\n    } catch (e) {\n        var apply = Function.prototype.apply;\n        Object.defineProperty(Function.prototype, 'apply', {\n            value: function(self, array) {\n                return apply.call(this, self, [].slice.call(array));\n            }\n        });\n    }\n\n\n    // Patch map to work with TypedArrays if needed.\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.map === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'map', {\n                value: function(callback, self) {\n                    return [].slice.call(this).map(callback, self);\n                }\n            });\n        }\n    }\n\n    // Patch sort to work with TypedArrays if needed.\n    // TODO: consider to remove following function and replace it with `Kotlin.doubleCompareTo` (see misc.js)\n    var totalOrderComparator = function (a, b) {\n        if (a < b) return -1;\n        if (a > b) return 1;\n\n        if (a === b) {\n            if (a !== 0) return 0;\n\n            var ia = 1 / a;\n            return ia === 1 / b ? 0 : (ia < 0 ? -1 : 1);\n        }\n\n        return a !== a ? (b !== b ? 0 : 1) : -1\n    };\n\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.sort === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'sort', {\n                value: function(compareFunction) {\n                    return Array.prototype.sort.call(this, compareFunction || totalOrderComparator);\n                }\n            });\n        }\n    }\n})();\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.equals = function (obj1, obj2) {\n    if (obj1 == null) {\n        return obj2 == null;\n    }\n\n    if (obj2 == null) {\n        return false;\n    }\n\n    if (obj1 !== obj1) {\n        return obj2 !== obj2;\n    }\n\n    if (typeof obj1 === \"object\" && typeof obj1.equals === \"function\") {\n        return obj1.equals(obj2);\n    }\n\n    if (typeof obj1 === \"number\" && typeof obj2 === \"number\") {\n        return obj1 === obj2 && (obj1 !== 0 || 1 / obj1 === 1 / obj2)\n    }\n\n    return obj1 === obj2;\n};\n\nKotlin.hashCode = function (obj) {\n    if (obj == null) {\n        return 0;\n    }\n    var objType = typeof obj;\n    if (\"object\" === objType) {\n        return \"function\" === typeof obj.hashCode ? obj.hashCode() : getObjectHashCode(obj);\n    }\n    if (\"function\" === objType) {\n        return getObjectHashCode(obj);\n    }\n    if (\"number\" === objType) {\n        return Kotlin.numberHashCode(obj);\n    }\n    if (\"boolean\" === objType) {\n        return Number(obj)\n    }\n\n    var str = String(obj);\n    return getStringHashCode(str);\n};\n\n\nKotlin.toString = function (o) {\n    if (o == null) {\n        return \"null\";\n    }\n    else if (Kotlin.isArrayish(o)) {\n        return \"[...]\";\n    }\n    else {\n        return o.toString();\n    }\n};\n\n/** @const */\nvar POW_2_32 = 4294967296;\n// TODO: consider switching to Symbol type once we are on ES6.\n/** @const */\nvar OBJECT_HASH_CODE_PROPERTY_NAME = \"kotlinHashCodeValue$\";\n\nfunction getObjectHashCode(obj) {\n    if (!(OBJECT_HASH_CODE_PROPERTY_NAME in obj)) {\n        var hash = (Math.random() * POW_2_32) | 0; // Make 32-bit singed integer.\n        Object.defineProperty(obj, OBJECT_HASH_CODE_PROPERTY_NAME, { value:  hash, enumerable: false });\n    }\n    return obj[OBJECT_HASH_CODE_PROPERTY_NAME];\n}\n\nfunction getStringHashCode(str) {\n    var hash = 0;\n    for (var i = 0; i < str.length; i++) {\n        var code  = str.charCodeAt(i);\n        hash  = (hash * 31 + code) | 0; // Keep it 32-bit.\n    }\n    return hash;\n}\n\nKotlin.identityHashCode = getObjectHashCode;\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/**\n * @param {string} id\n * @param {Object} declaration\n */\nKotlin.defineModule = function (id, declaration) {\n};\n\nKotlin.defineInlineFunction = function(tag, fun) {\n    return fun;\n};\n\nKotlin.wrapFunction = function(fun) {\n    var f = function() {\n        f = fun();\n        return f.apply(this, arguments);\n    };\n    return function() {\n        return f.apply(this, arguments);\n    };\n};\n\nKotlin.isTypeOf = function(type) {\n    return function (object) {\n        return typeof object === type;\n    }\n};\n\nKotlin.isInstanceOf = function (klass) {\n    return function (object) {\n        return Kotlin.isType(object, klass);\n    }\n};\n\nKotlin.orNull = function (fn) {\n    return function (object) {\n        return object == null || fn(object);\n    }\n};\n\nKotlin.andPredicate = function (a, b) {\n    return function (object) {\n        return a(object) && b(object);\n    }\n};\n\nKotlin.kotlinModuleMetadata = function (abiVersion, moduleName, data) {\n};\n\nKotlin.suspendCall = function(value) {\n    return value;\n};\n\nKotlin.coroutineResult = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.coroutineController = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.coroutineReceiver = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.setCoroutineResult = function(value, qualifier) {\n    throwMarkerError();\n};\n\nKotlin.getReifiedTypeParameterKType = function(typeParameter) {\n    throwMarkerError();\n};\n\nfunction throwMarkerError() {\n    throw new Error(\n        \"This marker function should never been called. \" +\n        \"Looks like compiler did not eliminate it properly. \" +\n        \"Please, report an issue if you caught this exception.\");\n}\n\nKotlin.getFunctionById = function(id, defaultValue) {\n    return function() {\n        return defaultValue;\n    }\n};","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.toShort = function (a) {\n    return (a & 0xFFFF) << 16 >> 16;\n};\n\nKotlin.toByte = function (a) {\n    return (a & 0xFF) << 24 >> 24;\n};\n\nKotlin.toChar = function (a) {\n    return a & 0xFFFF;\n};\n\nKotlin.numberToLong = function (a) {\n    return a instanceof Kotlin.Long ? a : Kotlin.Long.fromNumber(a);\n};\n\nKotlin.numberToInt = function (a) {\n    return a instanceof Kotlin.Long ? a.toInt() : Kotlin.doubleToInt(a);\n};\n\nKotlin.numberToShort = function (a) {\n    return Kotlin.toShort(Kotlin.numberToInt(a));\n};\n\nKotlin.numberToByte = function (a) {\n    return Kotlin.toByte(Kotlin.numberToInt(a));\n};\n\nKotlin.numberToDouble = function (a) {\n    return +a;\n};\n\nKotlin.numberToChar = function (a) {\n    return Kotlin.toChar(Kotlin.numberToInt(a));\n};\n\nKotlin.doubleToInt = function(a) {\n    if (a > 2147483647) return 2147483647;\n    if (a < -2147483648) return -2147483648;\n    return a | 0;\n};\n\nKotlin.toBoxedChar = function (a) {\n    if (a == null) return a;\n    if (a instanceof Kotlin.BoxedChar) return a;\n    return new Kotlin.BoxedChar(a);\n};\n\nKotlin.unboxChar = function(a) {\n    if (a == null) return a;\n    return Kotlin.toChar(a);\n};\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n/**\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @param {number} low  The low (signed) 32 bits of the long.\n * @param {number} high  The high (signed) 32 bits of the long.\n * @constructor\n * @final\n */\nKotlin.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @private\n   */\n  this.low_ = low | 0;  // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.high_ = high | 0;  // force into 32 signed bits.\n};\n\nKotlin.Long.$metadata$ = {\n    kind: \"class\",\n    simpleName: \"Long\",\n    interfaces:[]\n};\n\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @private\n */\nKotlin.Long.IntCache_ = {};\n\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n * @param {number} value The 32-bit integer in question.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Kotlin.Long.IntCache_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new Kotlin.Long(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    Kotlin.Long.IntCache_[value] = obj;\n  }\n  return obj;\n};\n\n\n/**\n * Converts this number value to `Long`.\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Double` value is `NaN`, `Long.MIN_VALUE` if it's less than `Long.MIN_VALUE`,\n * `Long.MAX_VALUE` if it's bigger than `Long.MAX_VALUE`.\n * @param {number} value The number in question.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromNumber = function(value) {\n  if (isNaN(value)) {\n    return Kotlin.Long.ZERO;\n  } else if (value <= -Kotlin.Long.TWO_PWR_63_DBL_) {\n    return Kotlin.Long.MIN_VALUE;\n  } else if (value + 1 >= Kotlin.Long.TWO_PWR_63_DBL_) {\n    return Kotlin.Long.MAX_VALUE;\n  } else if (value < 0) {\n    return Kotlin.Long.fromNumber(-value).negate();\n  } else {\n    return new Kotlin.Long(\n        (value % Kotlin.Long.TWO_PWR_32_DBL_) | 0,\n        (value / Kotlin.Long.TWO_PWR_32_DBL_) | 0);\n  }\n};\n\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating\n * the given high and low bits.  Each is assumed to use 32 bits.\n * @param {number} lowBits The low 32-bits.\n * @param {number} highBits The high 32-bits.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromBits = function(lowBits, highBits) {\n  return new Kotlin.Long(lowBits, highBits);\n};\n\n\n/**\n * Returns a Long representation of the given string, written using the given\n * radix.\n * @param {string} str The textual representation of the Long.\n * @param {number=} opt_radix The radix in which the text is written.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromString = function(str, opt_radix) {\n  if (str.length == 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) == '-') {\n    return Kotlin.Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Kotlin.Long.fromNumber(Math.pow(radix, 8));\n\n  var result = Kotlin.Long.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Kotlin.Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Kotlin.Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Kotlin.Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_16_DBL_ = 1 << 16;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_24_DBL_ = 1 << 24;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_32_DBL_ =\n    Kotlin.Long.TWO_PWR_16_DBL_ * Kotlin.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_31_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ / 2;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_48_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ * Kotlin.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_64_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ * Kotlin.Long.TWO_PWR_32_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_63_DBL_ =\n    Kotlin.Long.TWO_PWR_64_DBL_ / 2;\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.ZERO = Kotlin.Long.fromInt(0);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.ONE = Kotlin.Long.fromInt(1);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.NEG_ONE = Kotlin.Long.fromInt(-1);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.MAX_VALUE =\n    Kotlin.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.MIN_VALUE = Kotlin.Long.fromBits(0, 0x80000000 | 0);\n\n\n/**\n * @type {!Kotlin.Long}\n * @private\n */\nKotlin.Long.TWO_PWR_24_ = Kotlin.Long.fromInt(1 << 24);\n\n\n/** @return {number} The value, assuming it is a 32-bit integer. */\nKotlin.Long.prototype.toInt = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The closest floating-point representation to this value. */\nKotlin.Long.prototype.toNumber = function() {\n  return this.high_ * Kotlin.Long.TWO_PWR_32_DBL_ +\n         this.getLowBitsUnsigned();\n};\n\n/** @return {number} The 32-bit hashCode of this value. */\nKotlin.Long.prototype.hashCode = function() {\n  return this.high_ ^ this.low_;\n};\n\n/**\n * @param {number=} opt_radix The radix in which the text should be written.\n * @return {string} The textual representation of this value.\n * @override\n */\nKotlin.Long.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = Kotlin.Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Kotlin.Long.fromNumber(Math.pow(radix, 6));\n\n  var rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n\n/** @return {number} The high 32-bits as a signed value. */\nKotlin.Long.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n\n/** @return {number} The low 32-bits as a signed value. */\nKotlin.Long.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The low 32-bits as an unsigned value. */\nKotlin.Long.prototype.getLowBitsUnsigned = function() {\n  return (this.low_ >= 0) ?\n      this.low_ : Kotlin.Long.TWO_PWR_32_DBL_ + this.low_;\n};\n\n\n/**\n * @return {number} Returns the number of bits needed to represent the absolute\n *     value of this Long.\n */\nKotlin.Long.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ != 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) != 0) {\n        break;\n      }\n    }\n    return this.high_ != 0 ? bit + 33 : bit + 1;\n  }\n};\n\n\n/** @return {boolean} Whether this value is zero. */\nKotlin.Long.prototype.isZero = function() {\n  return this.high_ == 0 && this.low_ == 0;\n};\n\n\n/** @return {boolean} Whether this value is negative. */\nKotlin.Long.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n\n/** @return {boolean} Whether this value is odd. */\nKotlin.Long.prototype.isOdd = function() {\n  return (this.low_ & 1) == 1;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long equals the other.\n */\nKotlin.Long.prototype.equalsLong = function(other) {\n  return (this.high_ == other.high_) && (this.low_ == other.low_);\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long does not equal the other.\n */\nKotlin.Long.prototype.notEqualsLong = function(other) {\n  return (this.high_ != other.high_) || (this.low_ != other.low_);\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than the other.\n */\nKotlin.Long.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than or equal to the other.\n */\nKotlin.Long.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than the other.\n */\nKotlin.Long.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than or equal to the other.\n */\nKotlin.Long.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n\n/**\n * Compares this Long with the given one.\n * @param {Kotlin.Long} other Long to compare against.\n * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n *     if the given one is greater.\n */\nKotlin.Long.prototype.compare = function(other) {\n  if (this.equalsLong(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n\n/** @return {!Kotlin.Long} The negation of this value. */\nKotlin.Long.prototype.negate = function() {\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return Kotlin.Long.MIN_VALUE;\n  } else {\n    return this.not().add(Kotlin.Long.ONE);\n  }\n};\n\n\n/**\n * Returns the sum of this and the given Long.\n * @param {Kotlin.Long} other Long to add to this one.\n * @return {!Kotlin.Long} The sum of this and the given Long.\n */\nKotlin.Long.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return Kotlin.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns the difference of this and the given Long.\n * @param {Kotlin.Long} other Long to subtract from this.\n * @return {!Kotlin.Long} The difference of this and the given Long.\n */\nKotlin.Long.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n\n/**\n * Returns the product of this and the given long.\n * @param {Kotlin.Long} other Long to multiply with this.\n * @return {!Kotlin.Long} The product of this and the other.\n */\nKotlin.Long.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return Kotlin.Long.ZERO;\n  } else if (other.isZero()) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return other.isOdd() ? Kotlin.Long.MIN_VALUE : Kotlin.Long.ZERO;\n  } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return this.isOdd() ? Kotlin.Long.MIN_VALUE : Kotlin.Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both longs are small, use float multiplication\n  if (this.lessThan(Kotlin.Long.TWO_PWR_24_) &&\n      other.lessThan(Kotlin.Long.TWO_PWR_24_)) {\n    return Kotlin.Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return Kotlin.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns this Long divided by the given one.\n * @param {Kotlin.Long} other Long by which to divide.\n * @return {!Kotlin.Long} This Long divided by the given one.\n */\nKotlin.Long.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    if (other.equalsLong(Kotlin.Long.ONE) ||\n        other.equalsLong(Kotlin.Long.NEG_ONE)) {\n      return Kotlin.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      return Kotlin.Long.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equalsLong(Kotlin.Long.ZERO)) {\n        return other.isNegative() ? Kotlin.Long.ONE : Kotlin.Long.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate().div(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Kotlin.Long.ZERO;\n  var rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Kotlin.Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Kotlin.Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Kotlin.Long.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n\n/**\n * Returns this Long modulo the given one.\n * @param {Kotlin.Long} other Long by which to mod.\n * @return {!Kotlin.Long} This Long modulo the given one.\n */\nKotlin.Long.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n\n/** @return {!Kotlin.Long} The bitwise-NOT of this value. */\nKotlin.Long.prototype.not = function() {\n  return Kotlin.Long.fromBits(~this.low_, ~this.high_);\n};\n\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to AND.\n * @return {!Kotlin.Long} The bitwise-AND of this and the other.\n */\nKotlin.Long.prototype.and = function(other) {\n  return Kotlin.Long.fromBits(this.low_ & other.low_,\n                                 this.high_ & other.high_);\n};\n\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to OR.\n * @return {!Kotlin.Long} The bitwise-OR of this and the other.\n */\nKotlin.Long.prototype.or = function(other) {\n  return Kotlin.Long.fromBits(this.low_ | other.low_,\n                                 this.high_ | other.high_);\n};\n\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to XOR.\n * @return {!Kotlin.Long} The bitwise-XOR of this and the other.\n */\nKotlin.Long.prototype.xor = function(other) {\n  return Kotlin.Long.fromBits(this.low_ ^ other.low_,\n                                 this.high_ ^ other.high_);\n};\n\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the left by the given amount.\n */\nKotlin.Long.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Kotlin.Long.fromBits(\n          low << numBits,\n          (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return Kotlin.Long.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the right by the given amount.\n */\nKotlin.Long.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Kotlin.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)),\n          high >> numBits);\n    } else {\n      return Kotlin.Long.fromBits(\n          high >> (numBits - 32),\n          high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with\n * zeros placed into the new leading bits.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the right by the given amount, with\n *     zeros placed into the new leading bits.\n */\nKotlin.Long.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Kotlin.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)),\n          high >>> numBits);\n    } else if (numBits == 32) {\n      return Kotlin.Long.fromBits(high, 0);\n    } else {\n      return Kotlin.Long.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n// Support for Kotlin\nKotlin.Long.prototype.equals = function (other) {\n    return other instanceof Kotlin.Long && this.equalsLong(other);\n};\n\nKotlin.Long.prototype.compareTo_11rb$ = Kotlin.Long.prototype.compare;\n\nKotlin.Long.prototype.inc = function() {\n    return this.add(Kotlin.Long.ONE);\n};\n\nKotlin.Long.prototype.dec = function() {\n    return this.add(Kotlin.Long.NEG_ONE);\n};\n\nKotlin.Long.prototype.valueOf = function() {\n    return this.toNumber();\n};\n\nKotlin.Long.prototype.unaryPlus = function() {\n    return this;\n};\n\nKotlin.Long.prototype.unaryMinus = Kotlin.Long.prototype.negate;\nKotlin.Long.prototype.inv = Kotlin.Long.prototype.not;\n\nKotlin.Long.prototype.rangeTo = function (other) {\n    return new Kotlin.kotlin.ranges.LongRange(this, other);\n};","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.Kind = {\n    CLASS: \"class\",\n    INTERFACE: \"interface\",\n    OBJECT: \"object\"\n};\n\nKotlin.callGetter = function (thisObject, klass, propertyName) {\n    var propertyDescriptor = Object.getOwnPropertyDescriptor(klass, propertyName);\n    if (propertyDescriptor != null && propertyDescriptor.get != null) {\n        return propertyDescriptor.get.call(thisObject);\n    }\n\n    propertyDescriptor = Object.getOwnPropertyDescriptor(thisObject, propertyName);\n    if (propertyDescriptor != null && \"value\" in propertyDescriptor) {\n        return thisObject[propertyName];\n    }\n\n    return Kotlin.callGetter(thisObject, Object.getPrototypeOf(klass), propertyName);\n};\n\nKotlin.callSetter = function (thisObject, klass, propertyName, value) {\n    var propertyDescriptor = Object.getOwnPropertyDescriptor(klass, propertyName);\n    if (propertyDescriptor != null && propertyDescriptor.set != null) {\n        propertyDescriptor.set.call(thisObject, value);\n        return;\n    }\n\n    propertyDescriptor = Object.getOwnPropertyDescriptor(thisObject, propertyName);\n    if (propertyDescriptor != null && \"value\" in propertyDescriptor) {\n        thisObject[propertyName] = value;\n        return\n    }\n\n    Kotlin.callSetter(thisObject, Object.getPrototypeOf(klass), propertyName, value);\n};\n\nfunction isInheritanceFromInterface(ctor, iface) {\n    if (ctor === iface) return true;\n\n    var metadata = ctor.$metadata$;\n    if (metadata != null) {\n        var interfaces = metadata.interfaces;\n        for (var i = 0; i < interfaces.length; i++) {\n            if (isInheritanceFromInterface(interfaces[i], iface)) {\n                return true;\n            }\n        }\n    }\n\n    var superPrototype = ctor.prototype != null ? Object.getPrototypeOf(ctor.prototype) : null;\n    var superConstructor = superPrototype != null ? superPrototype.constructor : null;\n    return superConstructor != null && isInheritanceFromInterface(superConstructor, iface);\n}\n\n/**\n *\n * @param {*} object\n * @param {Function|Object} klass\n * @returns {Boolean}\n */\nKotlin.isType = function (object, klass) {\n    if (klass === Object) {\n        switch (typeof object) {\n            case \"string\":\n            case \"number\":\n            case \"boolean\":\n            case \"function\":\n                return true;\n            default:\n                return object instanceof Object;\n        }\n    }\n\n    if (object == null || klass == null || (typeof object !== 'object' && typeof object !== 'function')) {\n        return false;\n    }\n\n    if (typeof klass === \"function\" && object instanceof klass) {\n        return true;\n    }\n\n    var proto = Object.getPrototypeOf(klass);\n    var constructor = proto != null ? proto.constructor : null;\n    if (constructor != null && \"$metadata$\" in constructor) {\n        var metadata = constructor.$metadata$;\n        if (metadata.kind === Kotlin.Kind.OBJECT) {\n            return object === klass;\n        }\n    }\n\n    var klassMetadata = klass.$metadata$;\n\n    // In WebKit (JavaScriptCore) for some interfaces from DOM typeof returns \"object\", nevertheless they can be used in RHS of instanceof\n    if (klassMetadata == null) {\n        return object instanceof klass;\n    }\n\n    if (klassMetadata.kind === Kotlin.Kind.INTERFACE && object.constructor != null) {\n        return isInheritanceFromInterface(object.constructor, klass);\n    }\n\n    return false;\n};\n\nKotlin.isNumber = function (a) {\n    return typeof a == \"number\" || a instanceof Kotlin.Long;\n};\n\nKotlin.isChar = function (value) {\n    return value instanceof Kotlin.BoxedChar\n};\n\nKotlin.isComparable = function (value) {\n    var type = typeof value;\n\n    return type === \"string\" ||\n           type === \"boolean\" ||\n           Kotlin.isNumber(value) ||\n           Kotlin.isType(value, Kotlin.kotlin.Comparable);\n};\n\nKotlin.isCharSequence = function (value) {\n    return typeof value === \"string\" || Kotlin.isType(value, Kotlin.kotlin.CharSequence);\n};","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@PublishedApi\nexternal internal fun <T> Array(size: Int): Array<T>\n\n@JsName(\"newArray\")\nfun <T> newArray(size: Int, initValue: T) = fillArrayVal(Array<T>(size), initValue)\n\n@JsName(\"newArrayF\")\ninline fun <T> arrayWithFun(size: Int, init: (Int) -> T) = fillArrayFun(Array<T>(size), init)\n\n@JsName(\"fillArray\")\ninline fun <T> fillArrayFun(array: Array<T>, init: (Int) -> T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = init(i)\n    }\n    return array\n}\n\n@JsName(\"booleanArray\")\nfun booleanArray(size: Int, init: dynamic): Array<Boolean> {\n    val result: dynamic = Array<Boolean>(size)\n    result.`$type$` = \"BooleanArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, false)\n        false -> result\n        else -> fillArrayFun<Boolean>(result, init)\n    }\n}\n\n@JsName(\"booleanArrayF\")\ninline fun booleanArrayWithFun(size: Int, init: (Int) -> Boolean): Array<Boolean> = fillArrayFun(booleanArray(size, false), init)\n\n@JsName(\"charArray\")\n@Suppress(\"UNUSED_PARAMETER\")\nfun charArray(size: Int, init: dynamic): Array<Char> {\n    val result = js(\"new Uint16Array(size)\")\n    result.`$type$` = \"CharArray\"\n    return when (init) {\n        null, true, false -> result // For consistency\n        else -> fillArrayFun<Char>(result, init)\n    }\n}\n\n@JsName(\"charArrayF\")\ninline fun charArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = charArray(size, null)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"untypedCharArrayF\")\ninline fun untypedCharArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = Array<Char>(size)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"longArray\")\nfun longArray(size: Int, init: dynamic): Array<Long> {\n    val result: dynamic = Array<Long>(size)\n    result.`$type$` = \"LongArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, 0L)\n        false -> result\n        else -> fillArrayFun<Long>(result, init)\n    }\n}\n\n@JsName(\"longArrayF\")\ninline fun longArrayWithFun(size: Int, init: (Int) -> Long): Array<Long> = fillArrayFun(longArray(size, false), init)\n\nprivate fun <T> fillArrayVal(array: Array<T>, initValue: T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = initValue\n    }\n    return array\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\npublic class Enum<T : Enum<T>> : Comparable<Enum<T>> {\n    @JsName(\"name$\") private var _name: String = \"\"\n    @JsName(\"ordinal$\") private var _ordinal: Int = 0\n\n    val name: String\n        get() = _name\n\n    val ordinal: Int\n        get() = _ordinal\n\n    override fun compareTo(other: Enum<T>) = ordinal.compareTo(other.ordinal)\n\n    override fun equals(other: Any?) = this === other\n\n    override fun hashCode(): Int = js(\"Kotlin.identityHashCode\")(this)\n\n    override fun toString() = name\n\n    companion object\n}",null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any { it == element }' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"any { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@Suppress(\"DEPRECATION\")\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any { it == element }' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"any { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@Suppress(\"DEPRECATION\")\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst { it == element }' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfFirst { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst { it == element }' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfFirst { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast { it == element }' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfLast { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast { it == element }' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfLast { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.randomOrNull(): Byte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.randomOrNull(): Short? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.randomOrNull(): Float? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.randomOrNull(): Double? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.randomOrNull(): Boolean? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Array<out T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ByteArray.randomOrNull(random: Random): Byte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ShortArray.randomOrNull(random: Random): Short? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun IntArray.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun LongArray.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun FloatArray.randomOrNull(random: Random): Float? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun DoubleArray.randomOrNull(random: Random): Double? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun BooleanArray.randomOrNull(random: Random): Boolean? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharArray.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The specified arrays are also considered deeply equal if both are `null`.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun IntArray?.contentEquals(other: IntArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun LongArray?.contentEquals(other: LongArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun CharArray?.contentEquals(other: CharArray?): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun BooleanArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray?.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun BooleanArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray?.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T : Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sortWith(reverseOrder(), fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Sorts a range in the array in-place with the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V> Array<out K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> ByteArray.associateWith(valueSelector: (Byte) -> V): Map<Byte, V> {\n    val result = LinkedHashMap<Byte, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> ShortArray.associateWith(valueSelector: (Short) -> V): Map<Short, V> {\n    val result = LinkedHashMap<Short, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> IntArray.associateWith(valueSelector: (Int) -> V): Map<Int, V> {\n    val result = LinkedHashMap<Int, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> LongArray.associateWith(valueSelector: (Long) -> V): Map<Long, V> {\n    val result = LinkedHashMap<Long, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> FloatArray.associateWith(valueSelector: (Float) -> V): Map<Float, V> {\n    val result = LinkedHashMap<Float, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> DoubleArray.associateWith(valueSelector: (Double) -> V): Map<Double, V> {\n    val result = LinkedHashMap<Double, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> BooleanArray.associateWith(valueSelector: (Boolean) -> V): Map<Boolean, V> {\n    val result = LinkedHashMap<Boolean, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> CharArray.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(size.coerceAtMost(128)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Array<out K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Byte, in V>> ByteArray.associateWithTo(destination: M, valueSelector: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Short, in V>> ShortArray.associateWithTo(destination: M, valueSelector: (Short) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Int, in V>> IntArray.associateWithTo(destination: M, valueSelector: (Int) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Long, in V>> LongArray.associateWithTo(destination: M, valueSelector: (Long) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Float, in V>> FloatArray.associateWithTo(destination: M, valueSelector: (Float) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Double, in V>> DoubleArray.associateWithTo(destination: M, valueSelector: (Double) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Boolean, in V>> BooleanArray.associateWithTo(destination: M, valueSelector: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Char, in V>> CharArray.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.flatMapIndexed(transform: (index: Int, Byte) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.flatMapIndexed(transform: (index: Int, Short) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.flatMapIndexed(transform: (index: Int, Int) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.flatMapIndexed(transform: (index: Int, Long) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.flatMapIndexed(transform: (index: Int, Float) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.flatMapIndexed(transform: (index: Int, Double) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.flatMapIndexed(transform: (index: Int, Boolean) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.flatMapIndexed(transform: (index: Int, Char) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapIndexedTo(destination: C, transform: (index: Int, Byte) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapIndexedTo(destination: C, transform: (index: Int, Short) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapIndexedTo(destination: C, transform: (index: Int, Int) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapIndexedTo(destination: C, transform: (index: Int, Long) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapIndexedTo(destination: C, transform: (index: Int, Float) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapIndexedTo(destination: C, transform: (index: Int, Double) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapIndexedTo(destination: C, transform: (index: Int, Boolean) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapIndexedTo(destination: C, transform: (index: Int, Char) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * Among equal elements of the given array, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given array with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    return toCollection(LinkedHashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    return toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    return toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    return toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    return toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    return toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    return toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    return toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    return toCollection(LinkedHashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ByteArray.max(): Byte? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ShortArray.max(): Short? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun IntArray.max(): Int? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun LongArray.max(): Long? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharArray.max(): Char? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxByOrNull(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.maxByOrNull(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.maxByOrNull(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.maxByOrNull(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.maxByOrNull(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.maxByOrNull(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.maxByOrNull(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.maxByOrNull(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.maxByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOf(selector: (T) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOf(selector: (Byte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOf(selector: (Short) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOf(selector: (Int) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOf(selector: (Long) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOf(selector: (Float) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOf(selector: (Double) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOf(selector: (Boolean) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOf(selector: (T) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOf(selector: (Byte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOf(selector: (Short) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOf(selector: (Int) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOf(selector: (Long) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOf(selector: (Float) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOf(selector: (Double) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOf(selector: (Boolean) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxOf(selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.maxOf(selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.maxOf(selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.maxOf(selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.maxOf(selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.maxOf(selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.maxOf(selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.maxOf(selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.maxOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOfOrNull(selector: (Byte) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOfOrNull(selector: (Short) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOfOrNull(selector: (Int) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOfOrNull(selector: (Long) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOfOrNull(selector: (Float) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOfOrNull(selector: (Double) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOfOrNull(selector: (Boolean) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOfOrNull(selector: (Byte) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOfOrNull(selector: (Short) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOfOrNull(selector: (Int) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOfOrNull(selector: (Long) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOfOrNull(selector: (Float) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOfOrNull(selector: (Double) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOfOrNull(selector: (Boolean) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxOfOrNull(selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.maxOfOrNull(selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.maxOfOrNull(selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.maxOfOrNull(selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.maxOfOrNull(selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.maxOfOrNull(selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.maxOfOrNull(selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.maxOfOrNull(selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.maxOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.maxOfWith(comparator: Comparator<in R>, selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.maxOfWith(comparator: Comparator<in R>, selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.maxOfWith(comparator: Comparator<in R>, selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.maxOfWith(comparator: Comparator<in R>, selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.maxOfWith(comparator: Comparator<in R>, selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.maxOfWith(comparator: Comparator<in R>, selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.maxOfWith(comparator: Comparator<in R>, selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.maxOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Double>.maxOrNull(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Float>.maxOrNull(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.maxOrNull(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.maxOrNull(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.maxOrNull(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.maxOrNull(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.maxOrNull(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.maxOrNull(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.maxOrNull(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.maxOrNull(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<out T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.maxWithOrNull(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.maxWithOrNull(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.maxWithOrNull(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.maxWithOrNull(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.maxWithOrNull(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.maxWithOrNull(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.maxWithOrNull(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.maxWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ByteArray.min(): Byte? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ShortArray.min(): Short? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun IntArray.min(): Int? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun LongArray.min(): Long? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharArray.min(): Char? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.minByOrNull(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.minByOrNull(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.minByOrNull(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.minByOrNull(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.minByOrNull(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.minByOrNull(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.minByOrNull(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.minByOrNull(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.minByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOf(selector: (T) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOf(selector: (Byte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOf(selector: (Short) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOf(selector: (Int) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOf(selector: (Long) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOf(selector: (Float) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOf(selector: (Double) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOf(selector: (Boolean) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOf(selector: (T) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOf(selector: (Byte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOf(selector: (Short) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOf(selector: (Int) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOf(selector: (Long) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOf(selector: (Float) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOf(selector: (Double) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOf(selector: (Boolean) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.minOf(selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.minOf(selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.minOf(selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.minOf(selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.minOf(selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.minOf(selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.minOf(selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.minOf(selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.minOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOfOrNull(selector: (T) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOfOrNull(selector: (Byte) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOfOrNull(selector: (Short) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOfOrNull(selector: (Int) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOfOrNull(selector: (Long) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOfOrNull(selector: (Float) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOfOrNull(selector: (Double) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOfOrNull(selector: (Boolean) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOfOrNull(selector: (T) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOfOrNull(selector: (Byte) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOfOrNull(selector: (Short) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOfOrNull(selector: (Int) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOfOrNull(selector: (Long) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOfOrNull(selector: (Float) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOfOrNull(selector: (Double) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOfOrNull(selector: (Boolean) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.minOfOrNull(selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.minOfOrNull(selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.minOfOrNull(selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.minOfOrNull(selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.minOfOrNull(selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.minOfOrNull(selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.minOfOrNull(selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.minOfOrNull(selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.minOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.minOfWith(comparator: Comparator<in R>, selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.minOfWith(comparator: Comparator<in R>, selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.minOfWith(comparator: Comparator<in R>, selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.minOfWith(comparator: Comparator<in R>, selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.minOfWith(comparator: Comparator<in R>, selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.minOfWith(comparator: Comparator<in R>, selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.minOfWith(comparator: Comparator<in R>, selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.minOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Double>.minOrNull(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Float>.minOrNull(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.minOrNull(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.minOrNull(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.minOrNull(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.minOrNull(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.minOrNull(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.minOrNull(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.minOrNull(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.minOrNull(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<out T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.minWithOrNull(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.minWithOrNull(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.minWithOrNull(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.minWithOrNull(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.minWithOrNull(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.minWithOrNull(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.minWithOrNull(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.minWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.onEach(action: (T) -> Unit): Array<out T> {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.onEach(action: (Byte) -> Unit): ByteArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.onEach(action: (Short) -> Unit): ShortArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.onEach(action: (Int) -> Unit): IntArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.onEach(action: (Long) -> Unit): LongArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.onEach(action: (Float) -> Unit): FloatArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.onEach(action: (Double) -> Unit): DoubleArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.onEach(action: (Boolean) -> Unit): BooleanArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.onEach(action: (Char) -> Unit): CharArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.onEachIndexed(action: (index: Int, T) -> Unit): Array<out T> {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.onEachIndexed(action: (index: Int, Byte) -> Unit): ByteArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.onEachIndexed(action: (index: Int, Short) -> Unit): ShortArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.onEachIndexed(action: (index: Int, Int) -> Unit): IntArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.onEachIndexed(action: (index: Int, Long) -> Unit): LongArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.onEachIndexed(action: (index: Int, Float) -> Unit): FloatArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.onEachIndexed(action: (index: Int, Double) -> Unit): DoubleArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.onEachIndexed(action: (index: Int, Boolean) -> Unit): BooleanArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.onEachIndexed(action: (index: Int, Char) -> Unit): CharArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ByteArray.reduceIndexedOrNull(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ShortArray.reduceIndexedOrNull(operation: (index: Int, acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun IntArray.reduceIndexedOrNull(operation: (index: Int, acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun LongArray.reduceIndexedOrNull(operation: (index: Int, acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun FloatArray.reduceIndexedOrNull(operation: (index: Int, acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun DoubleArray.reduceIndexedOrNull(operation: (index: Int, acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun BooleanArray.reduceIndexedOrNull(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharArray.reduceIndexedOrNull(operation: (index: Int, acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ByteArray.reduceOrNull(operation: (acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ShortArray.reduceOrNull(operation: (acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun IntArray.reduceOrNull(operation: (acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun LongArray.reduceOrNull(operation: (acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun FloatArray.reduceOrNull(operation: (acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun DoubleArray.reduceOrNull(operation: (acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun BooleanArray.reduceOrNull(operation: (acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharArray.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ByteArray.reduceRightIndexedOrNull(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ShortArray.reduceRightIndexedOrNull(operation: (index: Int, Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun IntArray.reduceRightIndexedOrNull(operation: (index: Int, Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun LongArray.reduceRightIndexedOrNull(operation: (index: Int, Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun FloatArray.reduceRightIndexedOrNull(operation: (index: Int, Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun DoubleArray.reduceRightIndexedOrNull(operation: (index: Int, Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun BooleanArray.reduceRightIndexedOrNull(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharArray.reduceRightIndexedOrNull(operation: (index: Int, Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ByteArray.reduceRightOrNull(operation: (Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ShortArray.reduceRightOrNull(operation: (Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun IntArray.reduceRightOrNull(operation: (Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun LongArray.reduceRightOrNull(operation: (Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun FloatArray.reduceRightOrNull(operation: (Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun DoubleArray.reduceRightOrNull(operation: (Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun BooleanArray.reduceRightOrNull(operation: (Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharArray.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Array<out T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.runningFold(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.runningFold(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.runningFold(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.runningFold(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.runningFold(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.runningFold(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.runningFold(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.runningFold(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Array<out T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.runningReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.runningReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.runningReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.runningReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.runningReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.runningReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.runningReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.runningReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.runningReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.runningReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.runningReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.runningReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.runningReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.runningReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.runningReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.runningReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Array<out T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scan(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scan(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scan(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scan(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scan(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scan(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scan(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Array<out T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    return runningReduceIndexed(operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"RangesKt\")\n\npackage kotlin.ranges\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntRange.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongRange.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharRange.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntRange.random(random: Random): Int {\n    try {\n        return random.nextInt(this)\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongRange.random(random: Random): Long {\n    try {\n        return random.nextLong(this)\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharRange.random(random: Random): Char {\n    try {\n        return random.nextInt(first.toInt(), last.toInt() + 1).toChar()\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntRange.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongRange.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharRange.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun IntRange.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return random.nextInt(this)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun LongRange.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return random.nextLong(this)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharRange.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return random.nextInt(first.toInt(), last.toInt() + 1).toChar()\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun IntRange.contains(element: Int?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun LongRange.contains(element: Long?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun CharRange.contains(element: Char?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Byte): Boolean {\n    return contains(value.toInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Byte): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Byte): Boolean {\n    return contains(value.toShort())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Byte): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Byte): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Double): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Double): Boolean {\n    return value.toLongExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Double): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Double): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Double): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Float): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Float): Boolean {\n    return value.toLongExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Float): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Float): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Float): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Int): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Int): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Int): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Int): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Int): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Long): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Long): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Long): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Long): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Long): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Short): Boolean {\n    return contains(value.toInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Short): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Short): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Short): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Short): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this, to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Byte): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Char.downTo(to: Char): CharProgression {\n    return CharProgression.fromClosedRange(this, to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this, to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Int): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this, to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this, to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Short): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun IntProgression.reversed(): IntProgression {\n    return IntProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun LongProgression.reversed(): LongProgression {\n    return LongProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun CharProgression.reversed(): CharProgression {\n    return CharProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun IntProgression.step(step: Int): IntProgression {\n    checkStepIsPositive(step > 0, step)\n    return IntProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun LongProgression.step(step: Long): LongProgression {\n    checkStepIsPositive(step > 0, step)\n    return LongProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun CharProgression.step(step: Int): CharProgression {\n    checkStepIsPositive(step > 0, step)\n    return CharProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\ninternal fun Int.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toInt()..Byte.MAX_VALUE.toInt()) this.toByte() else null\n}\n\ninternal fun Long.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toLong()..Byte.MAX_VALUE.toLong()) this.toByte() else null\n}\n\ninternal fun Short.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toShort()..Byte.MAX_VALUE.toShort()) this.toByte() else null\n}\n\ninternal fun Double.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toDouble()..Byte.MAX_VALUE.toDouble()) this.toInt().toByte() else null\n}\n\ninternal fun Float.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toFloat()..Byte.MAX_VALUE.toFloat()) this.toInt().toByte() else null\n}\n\ninternal fun Long.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toLong()..Int.MAX_VALUE.toLong()) this.toInt() else null\n}\n\ninternal fun Double.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toDouble()..Int.MAX_VALUE.toDouble()) this.toInt() else null\n}\n\ninternal fun Float.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toFloat()..Int.MAX_VALUE.toFloat()) this.toInt() else null\n}\n\ninternal fun Double.toLongExactOrNull(): Long? {\n    return if (this in Long.MIN_VALUE.toDouble()..Long.MAX_VALUE.toDouble()) this.toLong() else null\n}\n\ninternal fun Float.toLongExactOrNull(): Long? {\n    return if (this in Long.MIN_VALUE.toFloat()..Long.MAX_VALUE.toFloat()) this.toLong() else null\n}\n\ninternal fun Int.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toInt()..Short.MAX_VALUE.toInt()) this.toShort() else null\n}\n\ninternal fun Long.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toLong()..Short.MAX_VALUE.toLong()) this.toShort() else null\n}\n\ninternal fun Double.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toDouble()..Short.MAX_VALUE.toDouble()) this.toInt().toShort() else null\n}\n\ninternal fun Float.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toFloat()..Short.MAX_VALUE.toFloat()) this.toInt().toShort() else null\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Byte): IntRange {\n    return this .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Byte): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Byte): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Byte): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Char.until(to: Char): CharRange {\n    if (to <= '\\u0000') return CharRange.EMPTY\n    return this .. (to - 1).toChar()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Int): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this.toInt() .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this.toInt() .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Short): IntRange {\n    return this .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Short): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Short): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Short): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeastComparable\n */\npublic fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Byte.coerceAtLeast(minimumValue: Byte): Byte {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Short.coerceAtLeast(minimumValue: Short): Short {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Int.coerceAtLeast(minimumValue: Int): Int {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Long.coerceAtLeast(minimumValue: Long): Long {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Float.coerceAtLeast(minimumValue: Float): Float {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Double.coerceAtLeast(minimumValue: Double): Double {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMostComparable\n */\npublic fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Byte.coerceAtMost(maximumValue: Byte): Byte {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Short.coerceAtMost(maximumValue: Short): Short {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Int.coerceAtMost(maximumValue: Int): Int {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Long.coerceAtMost(maximumValue: Long): Long {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Float.coerceAtMost(maximumValue: Float): Float {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Double.coerceAtMost(maximumValue: Double): Double {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceInComparable\n */\npublic fun <T : Comparable<T>> T.coerceIn(minimumValue: T?, maximumValue: T?): T {\n    if (minimumValue !== null && maximumValue !== null) {\n        if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n        if (this < minimumValue) return minimumValue\n        if (this > maximumValue) return maximumValue\n    }\n    else {\n        if (minimumValue !== null && this < minimumValue) return minimumValue\n        if (maximumValue !== null && this > maximumValue) return maximumValue\n    }\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Byte.coerceIn(minimumValue: Byte, maximumValue: Byte): Byte {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Short.coerceIn(minimumValue: Short, maximumValue: Short): Short {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Int.coerceIn(minimumValue: Int, maximumValue: Int): Int {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Long.coerceIn(minimumValue: Long, maximumValue: Long): Long {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Float.coerceIn(minimumValue: Float, maximumValue: Float): Float {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Double.coerceIn(minimumValue: Double, maximumValue: Double): Double {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceInFloatingPointRange\n */\n@SinceKotlin(\"1.1\")\npublic fun <T : Comparable<T>> T.coerceIn(range: ClosedFloatingPointRange<T>): T {\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        // this < start equiv to this <= start && !(this >= start)\n        range.lessThanOrEquals(this, range.start) && !range.lessThanOrEquals(range.start, this) -> range.start\n        // this > end equiv to this >= end && !(this <= end)\n        range.lessThanOrEquals(range.endInclusive, this) && !range.lessThanOrEquals(this, range.endInclusive) -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceInComparable\n */\npublic fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<T>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Int.coerceIn(range: ClosedRange<Int>): Int {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<Int>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Long.coerceIn(range: ClosedRange<Long>): Long {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<Long>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UByte @PublishedApi internal constructor(@PublishedApi internal val data: Byte) : Comparable<UByte> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UByte can have.\n         */\n        public const val MIN_VALUE: UByte = UByte(0)\n\n        /**\n         * A constant holding the maximum value an instance of UByte can have.\n         */\n        public const val MAX_VALUE: UByte = UByte(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UByte in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 1\n\n        /**\n         * The number of bits used to represent an instance of UByte in a binary form.\n         */\n        public const val SIZE_BITS: Int = 8\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UByte): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.toUInt().compareTo(other)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = this.toUInt().plus(other)\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = this.toUInt().minus(other)\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = this.toUInt().times(other)\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = this.toUInt().div(other)\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = this.toUInt().rem(other)\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UByte = UByte(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UByte = UByte(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UByte): UIntRange = UIntRange(this.toUInt(), other.toUInt())\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UByte): UByte = UByte(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UByte): UByte = UByte(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UByte): UByte = UByte(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UByte = UByte(data.inv())\n\n    /**\n     * Converts this [UByte] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UByte`. Otherwise the result is negative.\n     *\n     * The resulting `Byte` value has the same binary representation as this `UByte` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data\n    /**\n     * Converts this [UByte] value to [Short].\n     *\n     * The resulting `Short` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Short` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 8 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort() and 0xFF\n    /**\n     * Converts this [UByte] value to [Int].\n     *\n     * The resulting `Int` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Int` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 24 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt() and 0xFF\n    /**\n     * Converts this [UByte] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Long` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 56 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFF\n\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = this\n    /**\n     * Converts this [UByte] value to [UShort].\n     *\n     * The resulting `UShort` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `UShort` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 8 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = UShort(data.toShort() and 0xFF)\n    /**\n     * Converts this [UByte] value to [UInt].\n     *\n     * The resulting `UInt` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `UInt` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 24 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = UInt(data.toInt() and 0xFF)\n    /**\n     * Converts this [UByte] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `ULong` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 56 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFF)\n\n    /**\n     * Converts this [UByte] value to [Float].\n     *\n     * The resulting `Float` value represents the same numerical value as this `UByte`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toInt().toFloat()\n    /**\n     * Converts this [UByte] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UByte`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = this.toInt().toDouble()\n\n    public override fun toString(): String = toInt().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UByte].\n *\n * If this value is positive, the resulting `UByte` value represents the same numerical value as this `Byte`.\n *\n * The resulting `UByte` value has the same binary representation as this `Byte` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUByte(): UByte = UByte(this)\n/**\n * Converts this [Short] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Short`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Short` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUByte(): UByte = UByte(this.toByte())\n/**\n * Converts this [Int] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Int`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Int` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUByte(): UByte = UByte(this.toByte())\n/**\n * Converts this [Long] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Long` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUByte(): UByte = UByte(this.toByte())\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UInt @PublishedApi internal constructor(@PublishedApi internal val data: Int) : Comparable<UInt> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UInt can have.\n         */\n        public const val MIN_VALUE: UInt = UInt(0)\n\n        /**\n         * A constant holding the maximum value an instance of UInt can have.\n         */\n        public const val MAX_VALUE: UInt = UInt(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UInt in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 4\n\n        /**\n         * The number of bits used to represent an instance of UInt in a binary form.\n         */\n        public const val SIZE_BITS: Int = 32\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.compareTo(other.toUInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.compareTo(other.toUInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UInt): Int = uintCompare(this.data, other.data)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = UInt(this.data.plus(other.data))\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = UInt(this.data.minus(other.data))\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = UInt(this.data.times(other.data))\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = uintDivide(this, other)\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = uintRemainder(this, other)\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UInt = UInt(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UInt = UInt(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UInt): UIntRange = UIntRange(this, other)\n\n    /** Shifts this value left by the [bitCount] number of bits. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shl(bitCount: Int): UInt = UInt(data shl bitCount)\n    /** Shifts this value right by the [bitCount] number of bits, filling the leftmost bits with zeros. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shr(bitCount: Int): UInt = UInt(data ushr bitCount)\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UInt): UInt = UInt(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UInt): UInt = UInt(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UInt): UInt = UInt(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UInt = UInt(data.inv())\n\n    /**\n     * Converts this [UInt] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `Byte` value is represented by the least significant 8 bits of this `UInt` value.\n     * Note that the resulting `Byte` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    /**\n     * Converts this [UInt] value to [Short].\n     *\n     * If this value is less than or equals to [Short.MAX_VALUE], the resulting `Short` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `Short` value is represented by the least significant 16 bits of this `UInt` value.\n     * Note that the resulting `Short` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort()\n    /**\n     * Converts this [UInt] value to [Int].\n     *\n     * If this value is less than or equals to [Int.MAX_VALUE], the resulting `Int` value represents\n     * the same numerical value as this `UInt`. Otherwise the result is negative.\n     *\n     * The resulting `Int` value has the same binary representation as this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data\n    /**\n     * Converts this [UInt] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UInt`.\n     *\n     * The least significant 32 bits of the resulting `Long` value are the same as the bits of this `UInt` value,\n     * whereas the most significant 32 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFFFF_FFFF\n\n    /**\n     * Converts this [UInt] value to [UByte].\n     *\n     * If this value is less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `UByte` value is represented by the least significant 8 bits of this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    /**\n     * Converts this [UInt] value to [UShort].\n     *\n     * If this value is less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `UShort` value is represented by the least significant 16 bits of this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = data.toUShort()\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = this\n    /**\n     * Converts this [UInt] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UInt`.\n     *\n     * The least significant 32 bits of the resulting `ULong` value are the same as the bits of this `UInt` value,\n     * whereas the most significant 32 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFFFF_FFFF)\n\n    /**\n     * Converts this [UInt] value to [Float].\n     *\n     * The resulting value is the closest `Float` to this `UInt` value.\n     * In case when this `UInt` value is exactly between two `Float`s,\n     * the one with zero at least significant bit of mantissa is selected.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toDouble().toFloat()\n    /**\n     * Converts this [UInt] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UInt`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = uintToDouble(data)\n\n    public override fun toString(): String = toLong().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Byte`.\n *\n * The least significant 8 bits of the resulting `UInt` value are the same as the bits of this `Byte` value,\n * whereas the most significant 24 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUInt(): UInt = UInt(this.toInt())\n/**\n * Converts this [Short] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Short`.\n *\n * The least significant 16 bits of the resulting `UInt` value are the same as the bits of this `Short` value,\n * whereas the most significant 16 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUInt(): UInt = UInt(this.toInt())\n/**\n * Converts this [Int] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Int`.\n *\n * The resulting `UInt` value has the same binary representation as this `Int` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUInt(): UInt = UInt(this)\n/**\n * Converts this [Long] value to [UInt].\n *\n * If this value is positive and less than or equals to [UInt.MAX_VALUE], the resulting `UInt` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UInt` value is represented by the least significant 32 bits of this `Long` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUInt(): UInt = UInt(this.toInt())\n\n/**\n * Converts this [Float] value to [UInt].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Float` value is negative or `NaN`, [UInt.MAX_VALUE] if it's bigger than `UInt.MAX_VALUE`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Float.toUInt(): UInt = doubleToUInt(this.toDouble())\n/**\n * Converts this [Double] value to [UInt].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Double` value is negative or `NaN`, [UInt.MAX_VALUE] if it's bigger than `UInt.MAX_VALUE`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Double.toUInt(): UInt = doubleToUInt(this)\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UShort @PublishedApi internal constructor(@PublishedApi internal val data: Short) : Comparable<UShort> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UShort can have.\n         */\n        public const val MIN_VALUE: UShort = UShort(0)\n\n        /**\n         * A constant holding the maximum value an instance of UShort can have.\n         */\n        public const val MAX_VALUE: UShort = UShort(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UShort in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 2\n\n        /**\n         * The number of bits used to represent an instance of UShort in a binary form.\n         */\n        public const val SIZE_BITS: Int = 16\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UShort): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.toUInt().compareTo(other)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = this.toUInt().plus(other)\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = this.toUInt().minus(other)\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = this.toUInt().times(other)\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = this.toUInt().div(other)\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = this.toUInt().rem(other)\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UShort = UShort(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UShort = UShort(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UShort): UIntRange = UIntRange(this.toUInt(), other.toUInt())\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UShort): UShort = UShort(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UShort): UShort = UShort(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UShort): UShort = UShort(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UShort = UShort(data.inv())\n\n    /**\n     * Converts this [UShort] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UShort`.\n     *\n     * The resulting `Byte` value is represented by the least significant 8 bits of this `UShort` value.\n     * Note that the resulting `Byte` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    /**\n     * Converts this [UShort] value to [Short].\n     *\n     * If this value is less than or equals to [Short.MAX_VALUE], the resulting `Short` value represents\n     * the same numerical value as this `UShort`. Otherwise the result is negative.\n     *\n     * The resulting `Short` value has the same binary representation as this `UShort` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data\n    /**\n     * Converts this [UShort] value to [Int].\n     *\n     * The resulting `Int` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `Int` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 16 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt() and 0xFFFF\n    /**\n     * Converts this [UShort] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `Long` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 48 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFFFF\n\n    /**\n     * Converts this [UShort] value to [UByte].\n     *\n     * If this value is less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n     * the same numerical value as this `UShort`.\n     *\n     * The resulting `UByte` value is represented by the least significant 8 bits of this `UShort` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = this\n    /**\n     * Converts this [UShort] value to [UInt].\n     *\n     * The resulting `UInt` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `UInt` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 16 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = UInt(data.toInt() and 0xFFFF)\n    /**\n     * Converts this [UShort] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `ULong` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 48 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFFFF)\n\n    /**\n     * Converts this [UShort] value to [Float].\n     *\n     * The resulting `Float` value represents the same numerical value as this `UShort`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toInt().toFloat()\n    /**\n     * Converts this [UShort] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UShort`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = this.toInt().toDouble()\n\n    public override fun toString(): String = toInt().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UShort].\n *\n * If this value is positive, the resulting `UShort` value represents the same numerical value as this `Byte`.\n *\n * The least significant 8 bits of the resulting `UShort` value are the same as the bits of this `Byte` value,\n * whereas the most significant 8 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUShort(): UShort = UShort(this.toShort())\n/**\n * Converts this [Short] value to [UShort].\n *\n * If this value is positive, the resulting `UShort` value represents the same numerical value as this `Short`.\n *\n * The resulting `UShort` value has the same binary representation as this `Short` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUShort(): UShort = UShort(this)\n/**\n * Converts this [Int] value to [UShort].\n *\n * If this value is positive and less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n * the same numerical value as this `Int`.\n *\n * The resulting `UShort` value is represented by the least significant 16 bits of this `Int` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUShort(): UShort = UShort(this.toShort())\n/**\n * Converts this [Long] value to [UShort].\n *\n * If this value is positive and less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UShort` value is represented by the least significant 16 bits of this `Long` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUShort(): UShort = UShort(this.toShort())\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n/**\n * A range of values of type `Char`.\n */\npublic class CharRange(start: Char, endInclusive: Char) : CharProgression(start, endInclusive, 1), ClosedRange<Char> {\n    override val start: Char get() = first\n    override val endInclusive: Char get() = last\n\n    override fun contains(value: Char): Boolean = first <= value && value <= last\n\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is CharRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * first.toInt() + last.toInt())\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Char. */\n        public val EMPTY: CharRange = CharRange(1.toChar(), 0.toChar())\n    }\n}\n\n/**\n * A range of values of type `Int`.\n */\npublic class IntRange(start: Int, endInclusive: Int) : IntProgression(start, endInclusive, 1), ClosedRange<Int> {\n    override val start: Int get() = first\n    override val endInclusive: Int get() = last\n\n    override fun contains(value: Int): Boolean = first <= value && value <= last\n\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is IntRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * first + last)\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Int. */\n        public val EMPTY: IntRange = IntRange(1, 0)\n    }\n}\n\n/**\n * A range of values of type `Long`.\n */\npublic class LongRange(start: Long, endInclusive: Long) : LongProgression(start, endInclusive, 1), ClosedRange<Long> {\n    override val start: Long get() = first\n    override val endInclusive: Long get() = last\n\n    override fun contains(value: Long): Boolean = first <= value && value <= last\n\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is LongRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (first xor (first ushr 32)) + (last xor (last ushr 32))).toInt()\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Long. */\n        public val EMPTY: LongRange = LongRange(1, 0)\n    }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\nimport kotlin.random.Random\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSampleWithCapacity\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildMapInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildMapInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Returns `true` if this map is not empty.\n * @sample samples.collections.Maps.Usage.mapIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n *\n * @sample samples.collections.Maps.Usage.containsKey\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptySet : Set<Nothing>, Serializable {\n    private const val serialVersionUID: Long = 3406603774387020532\n\n    override fun equals(other: Any?): Boolean = other is Set<*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n\n    private fun readResolve(): Any = EmptySet\n}\n\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\npublic fun <T> emptySet(): Set<T> = EmptySet\n\n/**\n * Returns a new read-only set with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.readOnlySet\n */\npublic fun <T> setOf(vararg elements: T): Set<T> = if (elements.size > 0) elements.toSet() else emptySet()\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> setOf(): Set<T> = emptySet()\n\n/**\n * Returns an empty new [MutableSet].\n *\n * The returned set preserves the element iteration order.\n * @sample samples.collections.Collections.Sets.emptyMutableSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableSetOf(): MutableSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [MutableSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.mutableSet\n */\npublic fun <T> mutableSetOf(vararg elements: T): MutableSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [HashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> hashSetOf(): HashSet<T> = HashSet()\n\n/** Returns a new [HashSet] with the given elements. */\npublic fun <T> hashSetOf(vararg elements: T): HashSet<T> = elements.toCollection(HashSet(mapCapacity(elements.size)))\n\n/**\n * Returns an empty new [LinkedHashSet].\n * @sample samples.collections.Collections.Sets.emptyLinkedHashSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> linkedSetOf(): LinkedHashSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [LinkedHashSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.linkedHashSet\n */\npublic fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/**\n * Returns a new read-only set either with single given element, if it is not null, or empty set if the element is null.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.setOfNotNull\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Any> setOfNotNull(element: T?): Set<T> = if (element != null) setOf(element) else emptySet()\n\n/**\n * Returns a new read-only set only with those given elements, that are not null.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.setOfNotNull\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Any> setOfNotNull(vararg elements: T?): Set<T> {\n    return elements.filterNotNullTo(LinkedHashSet())\n}\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(@BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildSetInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildSetInternal(builderAction: MutableSet<E>.() -> Unit): Set<E>\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(capacity: Int, @BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildSetInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildSetInternal(capacity: Int, builderAction: MutableSet<E>.() -> Unit): Set<E>\n\n\n/** Returns this Set if it's not `null` and the empty set otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>?.orEmpty(): Set<T> = this ?: emptySet()\n\ninternal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {\n    0 -> emptySet()\n    1 -> setOf(iterator().next())\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n@file:Suppress(\"PLATFORM_CLASS_MAPPED_TO_KOTLIN\")\n\npackage kotlin.text\n\n/**\n * Parses the string as a signed [Byte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toByteOrNull(): Byte? = toByteOrNull(radix = 10)\n\n/**\n * Parses the string as a signed [Byte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toByteOrNull(radix: Int): Byte? {\n    val int = this.toIntOrNull(radix) ?: return null\n    if (int < Byte.MIN_VALUE || int > Byte.MAX_VALUE) return null\n    return int.toByte()\n}\n\n/**\n * Parses the string as a [Short] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toShortOrNull(): Short? = toShortOrNull(radix = 10)\n\n/**\n * Parses the string as a [Short] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toShortOrNull(radix: Int): Short? {\n    val int = this.toIntOrNull(radix) ?: return null\n    if (int < Short.MIN_VALUE || int > Short.MAX_VALUE) return null\n    return int.toShort()\n}\n\n/**\n * Parses the string as an [Int] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toIntOrNull(): Int? = toIntOrNull(radix = 10)\n\n/**\n * Parses the string as an [Int] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toIntOrNull(radix: Int): Int? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val start: Int\n    val isNegative: Boolean\n    val limit: Int\n\n    val firstChar = this[0]\n    if (firstChar < '0') {  // Possible leading sign\n        if (length == 1) return null  // non-digit (possible sign) only, no digits after\n\n        start = 1\n\n        if (firstChar == '-') {\n            isNegative = true\n            limit = Int.MIN_VALUE\n        } else if (firstChar == '+') {\n            isNegative = false\n            limit = -Int.MAX_VALUE\n        } else\n            return null\n    } else {\n        start = 0\n        isNegative = false\n        limit = -Int.MAX_VALUE\n    }\n\n\n    val limitForMaxRadix = (-Int.MAX_VALUE) / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    var result = 0\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result < limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / radix\n\n                if (result < limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= radix\n\n        if (result < limit + digit) return null\n\n        result -= digit\n    }\n\n    return if (isNegative) result else -result\n}\n\n/**\n * Parses the string as a [Long] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toLongOrNull(): Long? = toLongOrNull(radix = 10)\n\n/**\n * Parses the string as a [Long] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toLongOrNull(radix: Int): Long? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val start: Int\n    val isNegative: Boolean\n    val limit: Long\n\n    val firstChar = this[0]\n    if (firstChar < '0') {  // Possible leading sign\n        if (length == 1) return null  // non-digit (possible sign) only, no digits after\n\n        start = 1\n\n        if (firstChar == '-') {\n            isNegative = true\n            limit = Long.MIN_VALUE\n        } else if (firstChar == '+') {\n            isNegative = false\n            limit = -Long.MAX_VALUE\n        } else\n            return null\n    } else {\n        start = 0\n        isNegative = false\n        limit = -Long.MAX_VALUE\n    }\n\n\n    val limitForMaxRadix = (-Long.MAX_VALUE) / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    var result = 0L\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result < limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / radix\n\n                if (result < limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= radix\n\n        if (result < limit + digit) return null\n\n        result -= digit\n    }\n\n    return if (isNegative) result else -result\n}\n\n\ninternal fun numberFormatError(input: String): Nothing = throw NumberFormatException(\"Invalid number format: '$input'\")\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"UnsignedKt\")\n@file:OptIn(ExperimentalUnsignedTypes::class)\npackage kotlin\n\n@PublishedApi\ninternal fun uintCompare(v1: Int, v2: Int): Int = (v1 xor Int.MIN_VALUE).compareTo(v2 xor Int.MIN_VALUE)\n@PublishedApi\ninternal fun ulongCompare(v1: Long, v2: Long): Int = (v1 xor Long.MIN_VALUE).compareTo(v2 xor Long.MIN_VALUE)\n\n@PublishedApi\ninternal fun uintDivide(v1: UInt, v2: UInt): UInt = (v1.toLong() / v2.toLong()).toUInt()\n@PublishedApi\ninternal fun uintRemainder(v1: UInt, v2: UInt): UInt = (v1.toLong() % v2.toLong()).toUInt()\n\n// Division and remainder are based on Guava's UnsignedLongs implementation\n// Copyright 2011 The Guava Authors\n\n@PublishedApi\ninternal fun ulongDivide(v1: ULong, v2: ULong): ULong {\n    val dividend = v1.toLong()\n    val divisor = v2.toLong()\n    if (divisor < 0) { // i.e., divisor >= 2^63:\n        return if (v1 < v2) ULong(0) else ULong(1)\n    }\n\n    // Optimization - use signed division if both dividend and divisor < 2^63\n    if (dividend >= 0) {\n        return ULong(dividend / divisor)\n    }\n\n    // Otherwise, approximate the quotient, check, and correct if necessary.\n    val quotient = ((dividend ushr 1) / divisor) shl 1\n    val rem = dividend - quotient * divisor\n    return ULong(quotient + if (ULong(rem) >= ULong(divisor)) 1 else 0)\n\n}\n\n@PublishedApi\ninternal fun ulongRemainder(v1: ULong, v2: ULong): ULong {\n    val dividend = v1.toLong()\n    val divisor = v2.toLong()\n    if (divisor < 0) { // i.e., divisor >= 2^63:\n        return if (v1 < v2) {\n            v1 // dividend < divisor\n        } else {\n            v1 - v2 // dividend >= divisor\n        }\n    }\n\n    // Optimization - use signed modulus if both dividend and divisor < 2^63\n    if (dividend >= 0) {\n        return ULong(dividend % divisor)\n    }\n\n    // Otherwise, approximate the quotient, check, and correct if necessary.\n    val quotient = ((dividend ushr 1) / divisor) shl 1\n    val rem = dividend - quotient * divisor\n    return ULong(rem - if (ULong(rem) >= ULong(divisor)) divisor else 0)\n}\n\n@PublishedApi\ninternal fun doubleToUInt(v: Double): UInt = when {\n    v.isNaN() -> 0u\n    v <= UInt.MIN_VALUE.toDouble() -> UInt.MIN_VALUE\n    v >= UInt.MAX_VALUE.toDouble() -> UInt.MAX_VALUE\n    v <= Int.MAX_VALUE -> v.toInt().toUInt()\n    else -> (v - Int.MAX_VALUE).toInt().toUInt() + Int.MAX_VALUE.toUInt()      // Int.MAX_VALUE < v < UInt.MAX_VALUE\n}\n\n@PublishedApi\ninternal fun doubleToULong(v: Double): ULong = when {\n    v.isNaN() -> 0u\n    v <= ULong.MIN_VALUE.toDouble() -> ULong.MIN_VALUE\n    v >= ULong.MAX_VALUE.toDouble() -> ULong.MAX_VALUE\n    v < Long.MAX_VALUE -> v.toLong().toULong()\n\n    // Real values from Long.MAX_VALUE to (Long.MAX_VALUE + 1) are not representable in Double, so don't handle them.\n    else -> (v - 9223372036854775808.0).toLong().toULong() + 9223372036854775808uL      // Long.MAX_VALUE + 1 < v < ULong.MAX_VALUE\n}\n\n\n@PublishedApi\ninternal fun uintToDouble(v: Int): Double = (v and Int.MAX_VALUE).toDouble() + (v ushr 31 shl 30).toDouble() * 2\n\n@PublishedApi\ninternal fun ulongToDouble(v: Long): Double = (v ushr 11).toDouble() * 2048 + (v and 2047)\n\n\ninternal fun ulongToString(v: Long): String = ulongToString(v, 10)\n\ninternal fun ulongToString(v: Long, base: Int): String {\n    if (v >= 0) return v.toString(base)\n\n    var quotient = ((v ushr 1) / base) shl 1\n    var rem = v - quotient * base\n    if (rem >= base) {\n        rem -= base\n        quotient += 1\n    }\n    return quotient.toString(base) + rem.toString(base)\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\nimport kotlin.random.Random\n\n/**\n * Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\n * provided by that function.\n * The values are evaluated lazily, and the sequence is potentially infinite.\n *\n * @sample samples.collections.Sequences.Building.sequenceFromIterator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence(crossinline iterator: () -> Iterator<T>): Sequence<T> = object : Sequence<T> {\n    override fun iterator(): Iterator<T> = iterator()\n}\n\n/**\n * Creates a sequence that returns all elements from this iterator. The sequence is constrained to be iterated only once.\n *\n * @sample samples.collections.Sequences.Building.sequenceFromIterator\n */\npublic fun <T> Iterator<T>.asSequence(): Sequence<T> = Sequence { this }.constrainOnce()\n\n/**\n * Creates a sequence that returns the specified values.\n *\n * @sample samples.collections.Sequences.Building.sequenceOfValues\n */\npublic fun <T> sequenceOf(vararg elements: T): Sequence<T> = if (elements.isEmpty()) emptySequence() else elements.asSequence()\n\n/**\n * Returns an empty sequence.\n */\npublic fun <T> emptySequence(): Sequence<T> = EmptySequence\n\nprivate object EmptySequence : Sequence<Nothing>, DropTakeSequence<Nothing> {\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun drop(n: Int) = EmptySequence\n    override fun take(n: Int) = EmptySequence\n}\n\n/**\n * Returns this sequence if it's not `null` and the empty sequence otherwise.\n * @sample samples.collections.Sequences.Usage.sequenceOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>?.orEmpty(): Sequence<T> = this ?: emptySequence()\n\n\n/**\n * Returns a sequence that iterates through the elements either of this sequence\n * or, if this sequence turns out to be empty, of the sequence returned by [defaultValue] function.\n *\n * @sample samples.collections.Sequences.Usage.sequenceIfEmpty\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Sequence<T>.ifEmpty(defaultValue: () -> Sequence<T>): Sequence<T> = sequence {\n    val iterator = this@ifEmpty.iterator()\n    if (iterator.hasNext()) {\n        yieldAll(iterator)\n    } else {\n        yieldAll(defaultValue())\n    }\n}\n\n/**\n * Returns a sequence of all elements from all sequences in this sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n *\n * @sample samples.collections.Sequences.Transformations.flattenSequenceOfSequences\n */\npublic fun <T> Sequence<Sequence<T>>.flatten(): Sequence<T> = flatten { it.iterator() }\n\n/**\n * Returns a sequence of all elements from all iterables in this sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n *\n * @sample samples.collections.Sequences.Transformations.flattenSequenceOfLists\n */\n@kotlin.jvm.JvmName(\"flattenSequenceOfIterable\")\npublic fun <T> Sequence<Iterable<T>>.flatten(): Sequence<T> = flatten { it.iterator() }\n\nprivate fun <T, R> Sequence<T>.flatten(iterator: (T) -> Iterator<R>): Sequence<R> {\n    if (this is TransformingSequence<*, *>) {\n        return (this as TransformingSequence<*, T>).flatten(iterator)\n    }\n    return FlatteningSequence(this, { it }, iterator)\n}\n\n/**\n * Returns a pair of lists, where\n * *first* list is built from the first values of each pair from this sequence,\n * *second* list is built from the second values of each pair from this sequence.\n *\n * The operation is _terminal_.\n *\n * @sample samples.collections.Sequences.Transformations.unzip\n */\npublic fun <T, R> Sequence<Pair<T, R>>.unzip(): Pair<List<T>, List<R>> {\n    val listT = ArrayList<T>()\n    val listR = ArrayList<R>()\n    for (pair in this) {\n        listT.add(pair.first)\n        listR.add(pair.second)\n    }\n    return listT to listR\n}\n\n/**\n * Returns a sequence that yields elements of this sequence randomly shuffled.\n *\n * Note that every iteration of the sequence returns elements in a different order.\n *\n * The operation is _intermediate_ and _stateful_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.shuffled(): Sequence<T> = shuffled(Random)\n\n/**\n * Returns a sequence that yields elements of this sequence randomly shuffled\n * using the specified [random] instance as the source of randomness.\n *\n * Note that every iteration of the sequence returns elements in a different order.\n *\n * The operation is _intermediate_ and _stateful_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.shuffled(random: Random): Sequence<T> = sequence<T> {\n    val buffer = toMutableList()\n    while (buffer.isNotEmpty()) {\n        val j = random.nextInt(buffer.size)\n        val last = @OptIn(ExperimentalStdlibApi::class) buffer.removeLast()\n        val value = if (j < buffer.size) buffer.set(j, last) else last\n        yield(value)\n    }\n}\n\n\n/**\n * A sequence that returns the values from the underlying [sequence] that either match or do not match\n * the specified [predicate].\n *\n * @param sendWhen If `true`, values for which the predicate returns `true` are returned. Otherwise,\n * values for which the predicate returns `false` are returned\n */\ninternal class FilteringSequence<T>(\n    private val sequence: Sequence<T>,\n    private val sendWhen: Boolean = true,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var nextItem: T? = null\n\n        private fun calcNext() {\n            while (iterator.hasNext()) {\n                val item = iterator.next()\n                if (predicate(item) == sendWhen) {\n                    nextItem = item\n                    nextState = 1\n                    return\n                }\n            }\n            nextState = 0\n        }\n\n        override fun next(): T {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem\n            nextItem = null\n            nextState = -1\n            @Suppress(\"UNCHECKED_CAST\")\n            return result as T\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * A sequence which returns the results of applying the given [transformer] function to the values\n * in the underlying [sequence].\n */\n\ninternal class TransformingSequence<T, R>\nconstructor(private val sequence: Sequence<T>, private val transformer: (T) -> R) : Sequence<R> {\n    override fun iterator(): Iterator<R> = object : Iterator<R> {\n        val iterator = sequence.iterator()\n        override fun next(): R {\n            return transformer(iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n\n    internal fun <E> flatten(iterator: (R) -> Iterator<E>): Sequence<E> {\n        return FlatteningSequence<T, R, E>(sequence, transformer, iterator)\n    }\n}\n\n/**\n * A sequence which returns the results of applying the given [transformer] function to the values\n * in the underlying [sequence], where the transformer function takes the index of the value in the underlying\n * sequence along with the value itself.\n */\ninternal class TransformingIndexedSequence<T, R>\nconstructor(private val sequence: Sequence<T>, private val transformer: (Int, T) -> R) : Sequence<R> {\n    override fun iterator(): Iterator<R> = object : Iterator<R> {\n        val iterator = sequence.iterator()\n        var index = 0\n        override fun next(): R {\n            return transformer(checkIndexOverflow(index++), iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence which combines values from the underlying [sequence] with their indices and returns them as\n * [IndexedValue] objects.\n */\ninternal class IndexingSequence<T>\nconstructor(private val sequence: Sequence<T>) : Sequence<IndexedValue<T>> {\n    override fun iterator(): Iterator<IndexedValue<T>> = object : Iterator<IndexedValue<T>> {\n        val iterator = sequence.iterator()\n        var index = 0\n        override fun next(): IndexedValue<T> {\n            return IndexedValue(checkIndexOverflow(index++), iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence which takes the values from two parallel underlying sequences, passes them to the given\n * [transform] function and returns the values returned by that function. The sequence stops returning\n * values as soon as one of the underlying sequences stops returning values.\n */\ninternal class MergingSequence<T1, T2, V>\nconstructor(\n    private val sequence1: Sequence<T1>,\n    private val sequence2: Sequence<T2>,\n    private val transform: (T1, T2) -> V\n) : Sequence<V> {\n    override fun iterator(): Iterator<V> = object : Iterator<V> {\n        val iterator1 = sequence1.iterator()\n        val iterator2 = sequence2.iterator()\n        override fun next(): V {\n            return transform(iterator1.next(), iterator2.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator1.hasNext() && iterator2.hasNext()\n        }\n    }\n}\n\ninternal class FlatteningSequence<T, R, E>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val transformer: (T) -> R,\n    private val iterator: (R) -> Iterator<E>\n) : Sequence<E> {\n    override fun iterator(): Iterator<E> = object : Iterator<E> {\n        val iterator = sequence.iterator()\n        var itemIterator: Iterator<E>? = null\n\n        override fun next(): E {\n            if (!ensureItemIterator())\n                throw NoSuchElementException()\n            return itemIterator!!.next()\n        }\n\n        override fun hasNext(): Boolean {\n            return ensureItemIterator()\n        }\n\n        private fun ensureItemIterator(): Boolean {\n            if (itemIterator?.hasNext() == false)\n                itemIterator = null\n\n            while (itemIterator == null) {\n                if (!iterator.hasNext()) {\n                    return false\n                } else {\n                    val element = iterator.next()\n                    val nextItemIterator = iterator(transformer(element))\n                    if (nextItemIterator.hasNext()) {\n                        itemIterator = nextItemIterator\n                        return true\n                    }\n                }\n            }\n            return true\n        }\n    }\n}\n\ninternal fun <T, C, R> flatMapIndexed(source: Sequence<T>, transform: (Int, T) -> C, iterator: (C) -> Iterator<R>): Sequence<R> =\n    sequence {\n        var index = 0\n        for (element in source) {\n            val result = transform(checkIndexOverflow(index++), element)\n            yieldAll(iterator(result))\n        }\n    }\n\n/**\n * A sequence that supports drop(n) and take(n) operations\n */\ninternal interface DropTakeSequence<T> : Sequence<T> {\n    fun drop(n: Int): Sequence<T>\n    fun take(n: Int): Sequence<T>\n}\n\n/**\n * A sequence that skips [startIndex] values from the underlying [sequence]\n * and stops returning values right before [endIndex], i.e. stops at `endIndex - 1`\n */\ninternal class SubSequence<T>(\n    private val sequence: Sequence<T>,\n    private val startIndex: Int,\n    private val endIndex: Int\n) : Sequence<T>, DropTakeSequence<T> {\n\n    init {\n        require(startIndex >= 0) { \"startIndex should be non-negative, but is $startIndex\" }\n        require(endIndex >= 0) { \"endIndex should be non-negative, but is $endIndex\" }\n        require(endIndex >= startIndex) { \"endIndex should be not less than startIndex, but was $endIndex < $startIndex\" }\n    }\n\n    private val count: Int get() = endIndex - startIndex\n\n    override fun drop(n: Int): Sequence<T> = if (n >= count) emptySequence() else SubSequence(sequence, startIndex + n, endIndex)\n    override fun take(n: Int): Sequence<T> = if (n >= count) this else SubSequence(sequence, startIndex, startIndex + n)\n\n    override fun iterator() = object : Iterator<T> {\n\n        val iterator = sequence.iterator()\n        var position = 0\n\n        // Shouldn't be called from constructor to avoid premature iteration\n        private fun drop() {\n            while (position < startIndex && iterator.hasNext()) {\n                iterator.next()\n                position++\n            }\n        }\n\n        override fun hasNext(): Boolean {\n            drop()\n            return (position < endIndex) && iterator.hasNext()\n        }\n\n        override fun next(): T {\n            drop()\n            if (position >= endIndex)\n                throw NoSuchElementException()\n            position++\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * A sequence that returns at most [count] values from the underlying [sequence], and stops returning values\n * as soon as that count is reached.\n */\ninternal class TakeSequence<T>(\n    private val sequence: Sequence<T>,\n    private val count: Int\n) : Sequence<T>, DropTakeSequence<T> {\n\n    init {\n        require(count >= 0) { \"count must be non-negative, but was $count.\" }\n    }\n\n    override fun drop(n: Int): Sequence<T> = if (n >= count) emptySequence() else SubSequence(sequence, n, count)\n    override fun take(n: Int): Sequence<T> = if (n >= count) this else TakeSequence(sequence, n)\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        var left = count\n        val iterator = sequence.iterator()\n\n        override fun next(): T {\n            if (left == 0)\n                throw NoSuchElementException()\n            left--\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            return left > 0 && iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence that returns values from the underlying [sequence] while the [predicate] function returns\n * `true`, and stops returning values once the function returns `false` for the next element.\n */\ninternal class TakeWhileSequence<T>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var nextItem: T? = null\n\n        private fun calcNext() {\n            if (iterator.hasNext()) {\n                val item = iterator.next()\n                if (predicate(item)) {\n                    nextState = 1\n                    nextItem = item\n                    return\n                }\n            }\n            nextState = 0\n        }\n\n        override fun next(): T {\n            if (nextState == -1)\n                calcNext() // will change nextState\n            if (nextState == 0)\n                throw NoSuchElementException()\n            @Suppress(\"UNCHECKED_CAST\")\n            val result = nextItem as T\n\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext() // will change nextState\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * A sequence that skips the specified number of values from the underlying [sequence] and returns\n * all values after that.\n */\ninternal class DropSequence<T>(\n    private val sequence: Sequence<T>,\n    private val count: Int\n) : Sequence<T>, DropTakeSequence<T> {\n    init {\n        require(count >= 0) { \"count must be non-negative, but was $count.\" }\n    }\n\n    override fun drop(n: Int): Sequence<T> = (count + n).let { n1 -> if (n1 < 0) DropSequence(this, n) else DropSequence(sequence, n1) }\n    override fun take(n: Int): Sequence<T> = (count + n).let { n1 -> if (n1 < 0) TakeSequence(this, n) else SubSequence(sequence, count, n1) }\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var left = count\n\n        // Shouldn't be called from constructor to avoid premature iteration\n        private fun drop() {\n            while (left > 0 && iterator.hasNext()) {\n                iterator.next()\n                left--\n            }\n        }\n\n        override fun next(): T {\n            drop()\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            drop()\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence that skips the values from the underlying [sequence] while the given [predicate] returns `true` and returns\n * all values after that.\n */\ninternal class DropWhileSequence<T>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var dropState: Int = -1 // -1 for not dropping, 1 for nextItem, 0 for normal iteration\n        var nextItem: T? = null\n\n        private fun drop() {\n            while (iterator.hasNext()) {\n                val item = iterator.next()\n                if (!predicate(item)) {\n                    nextItem = item\n                    dropState = 1\n                    return\n                }\n            }\n            dropState = 0\n        }\n\n        override fun next(): T {\n            if (dropState == -1)\n                drop()\n\n            if (dropState == 1) {\n                @Suppress(\"UNCHECKED_CAST\")\n                val result = nextItem as T\n                nextItem = null\n                dropState = 0\n                return result\n            }\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            if (dropState == -1)\n                drop()\n            return dropState == 1 || iterator.hasNext()\n        }\n    }\n}\n\ninternal class DistinctSequence<T, K>(private val source: Sequence<T>, private val keySelector: (T) -> K) : Sequence<T> {\n    override fun iterator(): Iterator<T> = DistinctIterator(source.iterator(), keySelector)\n}\n\nprivate class DistinctIterator<T, K>(private val source: Iterator<T>, private val keySelector: (T) -> K) : AbstractIterator<T>() {\n    private val observed = HashSet<K>()\n\n    override fun computeNext() {\n        while (source.hasNext()) {\n            val next = source.next()\n            val key = keySelector(next)\n\n            if (observed.add(key)) {\n                setNext(next)\n                return\n            }\n        }\n\n        done()\n    }\n}\n\n\nprivate class GeneratorSequence<T : Any>(private val getInitialValue: () -> T?, private val getNextValue: (T) -> T?) : Sequence<T> {\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        var nextItem: T? = null\n        var nextState: Int = -2 // -2 for initial unknown, -1 for next unknown, 0 for done, 1 for continue\n\n        private fun calcNext() {\n            nextItem = if (nextState == -2) getInitialValue() else getNextValue(nextItem!!)\n            nextState = if (nextItem == null) 0 else 1\n        }\n\n        override fun next(): T {\n            if (nextState < 0)\n                calcNext()\n\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as T\n            // Do not clean nextItem (to avoid keeping reference on yielded instance) -- need to keep state for getNextValue\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState < 0)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a wrapper sequence that provides values of this sequence, but ensures it can be iterated only one time.\n *\n * The operation is _intermediate_ and _stateless_.\n *\n * [IllegalStateException] is thrown on iterating the returned sequence from the second time.\n *\n */\npublic fun <T> Sequence<T>.constrainOnce(): Sequence<T> {\n    // as? does not work in js\n    //return this as? ConstrainedOnceSequence<T> ?: ConstrainedOnceSequence(this)\n    return if (this is ConstrainedOnceSequence<T>) this else ConstrainedOnceSequence(this)\n}\n\n\n/**\n * Returns a sequence which invokes the function to calculate the next value on each iteration until the function returns `null`.\n *\n * The returned sequence is constrained to be iterated only once.\n *\n * @see constrainOnce\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequence\n */\npublic fun <T : Any> generateSequence(nextFunction: () -> T?): Sequence<T> {\n    return GeneratorSequence(nextFunction, { nextFunction() }).constrainOnce()\n}\n\n/**\n * Returns a sequence defined by the starting value [seed] and the function [nextFunction],\n * which is invoked to calculate the next value based on the previous one on each iteration.\n *\n * The sequence produces values until it encounters first `null` value.\n * If [seed] is `null`, an empty sequence is produced.\n *\n * The sequence can be iterated multiple times, each time starting with [seed].\n *\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequenceWithSeed\n */\n@kotlin.internal.LowPriorityInOverloadResolution\npublic fun <T : Any> generateSequence(seed: T?, nextFunction: (T) -> T?): Sequence<T> =\n    if (seed == null)\n        EmptySequence\n    else\n        GeneratorSequence({ seed }, nextFunction)\n\n/**\n * Returns a sequence defined by the function [seedFunction], which is invoked to produce the starting value,\n * and the [nextFunction], which is invoked to calculate the next value based on the previous one on each iteration.\n *\n * The sequence produces values until it encounters first `null` value.\n * If [seedFunction] returns `null`, an empty sequence is produced.\n *\n * The sequence can be iterated multiple times.\n *\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequenceWithLazySeed\n */\npublic fun <T : Any> generateSequence(seedFunction: () -> T?, nextFunction: (T) -> T?): Sequence<T> =\n    GeneratorSequence(seedFunction, nextFunction)\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Randomly shuffles elements in this list in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        this[j] = this.set(i, this[j])\n    }\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * Among equal elements of the given collection, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given collection with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.maxOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.maxOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.maxOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.minOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.minOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.minOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the collection itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, C : Iterable<T>> C.onEachIndexed(action: (index: Int, T) -> Unit): C {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> List<T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    return runningReduceIndexed(operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n/**\n * Given an [iterator] function constructs an [Iterable] instance that returns values through the [Iterator]\n * provided by that function.\n * @sample samples.collections.Iterables.Building.iterable\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable(crossinline iterator: () -> Iterator<T>): Iterable<T> = object : Iterable<T> {\n    override fun iterator(): Iterator<T> = iterator()\n}\n\n/**\n * A wrapper over another [Iterable] (or any other object that can produce an [Iterator]) that returns\n * an indexing iterator.\n */\ninternal class IndexingIterable<out T>(private val iteratorFactory: () -> Iterator<T>) : Iterable<IndexedValue<T>> {\n    override fun iterator(): Iterator<IndexedValue<T>> = IndexingIterator(iteratorFactory())\n}\n\n\n/**\n * Returns the size of this iterable if it is known, or `null` otherwise.\n */\n@PublishedApi\ninternal fun <T> Iterable<T>.collectionSizeOrNull(): Int? = if (this is Collection<*>) this.size else null\n\n/**\n * Returns the size of this iterable if it is known, or the specified [default] value otherwise.\n */\n@PublishedApi\ninternal fun <T> Iterable<T>.collectionSizeOrDefault(default: Int): Int = if (this is Collection<*>) this.size else default\n\n/** Returns true when it's safe to convert this collection to a set without changing contains method behavior. */\nprivate fun <T> Collection<T>.safeToConvertToSet() = size > 2 && this is ArrayList\n\n/** Converts this collection to a set, when it's worth so and it doesn't change contains method behavior. */\ninternal fun <T> Iterable<T>.convertToSetForSetOperationWith(source: Iterable<T>): Collection<T> =\n    when (this) {\n        is Set -> this\n        is Collection ->\n            when {\n                source is Collection && source.size < 2 -> this\n                else -> if (this.safeToConvertToSet()) toHashSet() else this\n            }\n        else -> toHashSet()\n    }\n\n/** Converts this collection to a set, when it's worth so and it doesn't change contains method behavior. */\ninternal fun <T> Iterable<T>.convertToSetForSetOperation(): Collection<T> =\n    when (this) {\n        is Set -> this\n        is Collection -> if (this.safeToConvertToSet()) toHashSet() else this\n        else -> toHashSet()\n    }\n\n\n/**\n * Returns a single list of all elements from all collections in the given collection.\n * @sample samples.collections.Iterables.Operations.flattenIterable\n */\npublic fun <T> Iterable<Iterable<T>>.flatten(): List<T> {\n    val result = ArrayList<T>()\n    for (element in this) {\n        result.addAll(element)\n    }\n    return result\n}\n\n/**\n * Returns a pair of lists, where\n * *first* list is built from the first values of each pair from this collection,\n * *second* list is built from the second values of each pair from this collection.\n * @sample samples.collections.Iterables.Operations.unzipIterable\n */\npublic fun <T, R> Iterable<Pair<T, R>>.unzip(): Pair<List<T>, List<R>> {\n    val expectedSize = collectionSizeOrDefault(10)\n    val listT = ArrayList<T>(expectedSize)\n    val listR = ArrayList<R>(expectedSize)\n    for (pair in this) {\n        listT.add(pair.first)\n        listR.add(pair.second)\n    }\n    return listT to listR\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns `true` if [element] is found in the sequence.\n *\n * The operation is _terminal_.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Sequence<T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Sequence doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Sequence<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Sequence<T>.elementAtOrNull(index: Int): T? {\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.first(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.firstOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns first index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.indexOf(element: T): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.last(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns last index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.lastIndexOf(element: T): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.lastOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the single element, or throws an exception if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.single(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    val single = iterator.next()\n    if (iterator.hasNext())\n        throw IllegalArgumentException(\"Sequence has more than one element.\")\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.singleOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    val single = iterator.next()\n    if (iterator.hasNext())\n        return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a sequence containing all elements except first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.drop(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> this\n        this is DropTakeSequence -> this.drop(n)\n        else -> DropSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing all elements except first elements that satisfy the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.dropWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return DropWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic fun <T> Sequence<T>.filter(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, true, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic fun <T> Sequence<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): Sequence<T> {\n    // TODO: Rewrite with generalized MapFilterIndexingSequence\n    return TransformingSequence(FilteringSequence(IndexingSequence(this), true, { predicate(it.index, it.value) }), { it.value })\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements that are instances of specified type parameter R.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Sequence<*>.filterIsInstance(): Sequence<@kotlin.internal.NoInfer R> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filter { it is R } as Sequence<R>\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Sequence<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements not matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic fun <T> Sequence<T>.filterNot(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, false, predicate)\n}\n\n/**\n * Returns a sequence containing all elements that are not `null`.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Sequence<T?>.filterNotNull(): Sequence<T> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filterNot { it == null } as Sequence<T>\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Sequence<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.take(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> emptySequence()\n        this is DropTakeSequence -> this.take(n)\n        else -> TakeSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing first elements satisfying the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.takeWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return TakeWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sorted(): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sorted.toMutableList()\n            sortedList.sort()\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedBy(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedByDescending(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sortedDescending(): Sequence<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.sortedWith(comparator: Comparator<in T>): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sortedWith.toMutableList()\n            sortedList.sortWith(comparator)\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Sequence<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    return associateTo(LinkedHashMap<K, V>(), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given sequence indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Sequence<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    return associateByTo(LinkedHashMap<K, T>(), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Sequence<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    return associateByTo(LinkedHashMap<K, V>(), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given sequence\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given sequence and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Sequence<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given sequence,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Sequence<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n *\n * The operation is _terminal_.\n */\npublic fun <T, C : MutableCollection<in T>> Sequence<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>())\n}\n\n/**\n * Returns a [List] containing all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toList(): List<T> {\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableList(): MutableList<T> {\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toSet(): Set<T> {\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIterable\")\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Iterable<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, Iterable<R>::iterator)\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Sequence<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, Sequence<R>::iterator)\n}\n\n/**\n * Returns a single sequence of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\npublic fun <T, R> Sequence<T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): Sequence<R> {\n    return flatMapIndexed(this, transform, Iterable<R>::iterator)\n}\n\n/**\n * Returns a single sequence of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\npublic fun <T, R> Sequence<T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): Sequence<R> {\n    return flatMapIndexed(this, transform, Sequence<R>::iterator)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIterableTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Sequence<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Sequence<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Sequence<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic fun <T, R> Sequence<T>.map(transform: (T) -> R): Sequence<R> {\n    return TransformingSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.mapIndexed(transform: (index: Int, T) -> R): Sequence<R> {\n    return TransformingIndexedSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): Sequence<R> {\n    return TransformingIndexedSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic fun <T, R : Any> Sequence<T>.mapNotNull(transform: (T) -> R?): Sequence<R> {\n    return TransformingSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element in the original sequence\n * and appends only the non-null results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original sequence\n * and appends the results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a sequence that wraps each element of the original sequence\n * into an [IndexedValue] containing the index of that element and the element itself.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.withIndex(): Sequence<IndexedValue<T>> {\n    return IndexingSequence(this)\n}\n\n/**\n * Returns a sequence containing only distinct elements from the given sequence.\n * \n * Among equal elements of the given sequence, only the first one will be present in the resulting sequence.\n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Sequence<T>.distinct(): Sequence<T> {\n    return this.distinctBy { it }\n}\n\n/**\n * Returns a sequence containing only elements from the given sequence\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given sequence with equal keys, only the first one will be present in the resulting sequence.\n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T, K> Sequence<T>.distinctBy(selector: (T) -> K): Sequence<T> {\n    return DistinctSequence(this, selector)\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given sequence.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>()\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Sequence<T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if sequence has at least one element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Sequence<T>.any(): Boolean {\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Sequence<T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.count(): Int {\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * \n * Returns the specified [initial] value if the sequence is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Sequence<T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Double>.maxOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Float>.maxOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Sequence<T>.maxOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Sequence<T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Sequence<T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Double>.minOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Float>.minOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Sequence<T>.minOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Sequence<T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the sequence has no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Sequence<T>.none(): Boolean {\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Sequence<T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> Sequence<T>.onEach(action: (T) -> Unit): Sequence<T> {\n    return map {\n        action(it)\n        it\n    }\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.onEachIndexed(action: (index: Int, T) -> Unit): Sequence<T> {\n    return mapIndexed { index, element ->\n        action(index, element)\n        element\n    }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this sequence is empty. If the sequence can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Sequence<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * \n * Throws an exception if this sequence is empty. If the sequence can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Sequence<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * \n * Returns `null` if the sequence is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Sequence<T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Sequence<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic fun <T, R> Sequence<T>.runningFold(initial: R, operation: (acc: R, T) -> R): Sequence<R> {\n    return sequence {\n        yield(initial)\n        var accumulator = initial\n        for (element in this@runningFold) {\n            accumulator = operation(accumulator, element)\n            yield(accumulator)\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic fun <T, R> Sequence<T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R> {\n    return sequence {\n        yield(initial)\n        var index = 0\n        var accumulator = initial\n        for (element in this@runningFoldIndexed) {\n            accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n            yield(accumulator)\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <S, T : S> Sequence<T>.runningReduce(operation: (acc: S, T) -> S): Sequence<S> {\n    return sequence {\n        val iterator = iterator()\n        if (iterator.hasNext()) {\n            var accumulator: S = iterator.next()\n            yield(accumulator)\n            while (iterator.hasNext()) {\n                accumulator = operation(accumulator, iterator.next())\n                yield(accumulator)\n            }\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with the first element of this sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic fun <S, T : S> Sequence<T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): Sequence<S> {\n    return sequence {\n        val iterator = iterator()\n        if (iterator.hasNext()) {\n            var accumulator: S = iterator.next()\n            yield(accumulator)\n            var index = 1\n            while (iterator.hasNext()) {\n                accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n                yield(accumulator)\n            }\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T, R> Sequence<T>.scan(initial: R, operation: (acc: R, T) -> R): Sequence<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T, R> Sequence<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <S, T : S> Sequence<T>.scanReduce(operation: (acc: S, T) -> S): Sequence<S> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <S, T : S> Sequence<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): Sequence<S> {\n    return runningReduceIndexed(operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.requireNoNulls(): Sequence<T> {\n    return map { it ?: throw IllegalArgumentException(\"null element found in $this.\") }\n}\n\n/**\n * Splits this sequence into a sequence of lists each not exceeding the given [size].\n * \n * The last list in the resulting sequence may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.chunked(size: Int): Sequence<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this sequence into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.chunked(size: Int, transform: (List<T>) -> R): Sequence<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.minus(element: T): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            var removed = false\n            return this@minus.filter { if (!removed && it == element) { removed = true; false } else true }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] array.\n * \n * Note that the source sequence and the array being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Array<out T>): Sequence<T> {\n    if (elements.isEmpty()) return this\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] collection.\n * \n * Note that the source sequence and the collection being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Iterable<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.convertToSetForSetOperation()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The operation is _intermediate_ for this sequence and _terminal_ and _stateful_ for the [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Sequence<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minusElement(element: T): Sequence<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original sequence into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Sequences.Transformations.partition\n */\npublic inline fun <T> Sequence<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(element: T): Sequence<T> {\n    return sequenceOf(this, sequenceOf(element)).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] array.\n * \n * Note that the source sequence and the array being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Array<out T>): Sequence<T> {\n    return this.plus(elements.asList())\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] collection.\n * \n * Note that the source sequence and the collection being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Iterable<T>): Sequence<T> {\n    return sequenceOf(this, elements.asSequence()).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Sequence<T>): Sequence<T> {\n    return sequenceOf(this, elements).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.plusElement(element: T): Sequence<T> {\n    return plus(element)\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this sequence with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<List<T>> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = false)\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this sequence with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): Sequence<R> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = true).map(transform)\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zip\n */\npublic infix fun <T, R> Sequence<T>.zip(other: Sequence<R>): Sequence<Pair<T, R>> {\n    return MergingSequence(this, other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zipWithTransform\n */\npublic fun <T, R, V> Sequence<T>.zip(other: Sequence<R>, transform: (a: T, b: R) -> V): Sequence<V> {\n    return MergingSequence(this, other, transform)\n}\n\n/**\n * Returns a sequence of pairs of each two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.zipWithNext(): Sequence<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.zipWithNext(transform: (a: T, b: T) -> R): Sequence<R> {\n    return sequence result@ {\n        val iterator = iterator()\n        if (!iterator.hasNext()) return@result\n        var current = iterator.next()\n        while (iterator.hasNext()) {\n            val next = iterator.next()\n            yield(transform(current, next))\n            current = next\n        }\n    }\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Sequence<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Sequence<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original sequence returning its elements when being iterated.\n */\npublic fun <T> Sequence<T>.asIterable(): Iterable<T> {\n    return Iterable { this.iterator() }\n}\n\n/**\n * Returns this sequence as a [Sequence].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.asSequence(): Sequence<T> {\n    return this\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Sequence<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Sequence<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Sequence<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Sequence<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Sequence<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Sequence<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Sequence<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Sequence<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Sequence<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Sequence<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Sequence<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Sequence<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireNotNullWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a character at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharSequence.elementAt(index: Int): Char\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if no such character was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the first character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if character was not found.\n */\npublic inline fun CharSequence.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun CharSequence.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns index of the first character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last character.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n * \n * @sample samples.text.Strings.last\n */\npublic fun CharSequence.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last character matching the given [predicate].\n * \n * @throws NoSuchElementException if no such character is found.\n * \n * @sample samples.text.Strings.last\n */\npublic inline fun CharSequence.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the last character, or `null` if the char sequence is empty.\n * \n * @sample samples.text.Strings.last\n */\npublic fun CharSequence.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[length - 1]\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n * \n * @sample samples.text.Strings.last\n */\npublic inline fun CharSequence.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random character from this char sequence.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random character from this char sequence using the specified source of randomness.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharSequence.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return get(random.nextInt(length))\n}\n\n/**\n * Returns a random character from this char sequence, or `null` if this char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random character from this char sequence using the specified source of randomness, or `null` if this char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(length))\n}\n\n/**\n * Returns the single character, or throws an exception if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.single(): Char {\n    return when (length) {\n        0 -> throw NoSuchElementException(\"Char sequence is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Char sequence has more than one element.\")\n    }\n}\n\n/**\n * Returns the single character matching the given [predicate], or throws exception if there is no or more than one matching character.\n */\npublic inline fun CharSequence.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Char sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single character, or `null` if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.singleOrNull(): Char? {\n    return if (length == 1) this[0] else null\n}\n\n/**\n * Returns the single character matching the given [predicate], or `null` if character was not found or more than one character was found.\n */\npublic inline fun CharSequence.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a subsequence of this char sequence with the first [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun CharSequence.drop(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string with the first [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun String.drop(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence with the last [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun CharSequence.dropLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a string with the last [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun String.dropLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun CharSequence.dropLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun String.dropLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return substring(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun CharSequence.dropWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun String.dropWhile(predicate: (Char) -> Boolean): String {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return substring(index)\n    return \"\"\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * \n * @sample samples.text.Strings.filter\n */\npublic inline fun CharSequence.filter(predicate: (Char) -> Boolean): CharSequence {\n    return filterTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * \n * @sample samples.text.Strings.filter\n */\npublic inline fun String.filter(predicate: (Char) -> Boolean): String {\n    return filterTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun CharSequence.filterIndexed(predicate: (index: Int, Char) -> Boolean): CharSequence {\n    return filterIndexedTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun String.filterIndexed(predicate: (index: Int, Char) -> Boolean): String {\n    return filterIndexedTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : Appendable> CharSequence.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that do not match the given [predicate].\n * \n * @sample samples.text.Strings.filterNot\n */\npublic inline fun CharSequence.filterNot(predicate: (Char) -> Boolean): CharSequence {\n    return filterNotTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that do not match the given [predicate].\n * \n * @sample samples.text.Strings.filterNot\n */\npublic inline fun String.filterNot(predicate: (Char) -> Boolean): String {\n    return filterNotTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : Appendable> CharSequence.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.append(element)\n    return destination\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : Appendable> CharSequence.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (index in 0 until length) {\n        val element = get(index)\n        if (predicate(element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at the specified range of [indices].\n */\npublic fun CharSequence.slice(indices: IntRange): CharSequence {\n    if (indices.isEmpty()) return \"\"\n    return subSequence(indices)\n}\n\n/**\n * Returns a string containing characters of the original string at the specified range of [indices].\n */\npublic fun String.slice(indices: IntRange): String {\n    if (indices.isEmpty()) return \"\"\n    return substring(indices)\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at specified [indices].\n */\npublic fun CharSequence.slice(indices: Iterable<Int>): CharSequence {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return \"\"\n    val result = StringBuilder(size)\n    for (i in indices) {\n        result.append(get(i))\n    }\n    return result\n}\n\n/**\n * Returns a string containing characters of the original string at specified [indices].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.slice(indices: Iterable<Int>): String {\n    return (this as CharSequence).slice(indices).toString()\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun CharSequence.take(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a string containing the first [n] characters from this string, or the entire string if this string is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun String.take(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing the last [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun CharSequence.takeLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return subSequence(length - n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string containing the last [n] characters from this string, or the entire string if this string is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun String.takeLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return substring(length - n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun CharSequence.takeLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return subSequence(index + 1, length)\n        }\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun String.takeLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return substring(index + 1)\n        }\n    }\n    return this\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun CharSequence.takeWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return subSequence(0, index)\n        }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun String.takeWhile(predicate: (Char) -> Boolean): String {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return substring(0, index)\n        }\n    return this\n}\n\n/**\n * Returns a char sequence with characters in reversed order.\n */\npublic fun CharSequence.reversed(): CharSequence {\n    return StringBuilder(this).reverse()\n}\n\n/**\n * Returns a string with characters in reversed order.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.reversed(): String {\n    return (this as CharSequence).reversed().toString()\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to characters of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associate\n */\npublic inline fun <K, V> CharSequence.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the characters from the given char sequence indexed by the key\n * returned from [keySelector] function applied to each character.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateBy\n */\npublic inline fun <K> CharSequence.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateByWithValueTransform\n */\npublic inline fun <K, V> CharSequence.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each character of the given char sequence\n * and value is the character itself.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each character of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are characters from the given char sequence and values are\n * produced by the [valueSelector] function applied to each character.\n * \n * If any two characters are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V> CharSequence.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(length.coerceAtMost(128)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each character of the given char sequence,\n * where key is the character itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two characters are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.text.Strings.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V, M : MutableMap<in Char, in V>> CharSequence.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all characters to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharSequence.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all characters.\n */\npublic fun CharSequence.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(length.coerceAtMost(128))))\n}\n\n/**\n * Returns a [List] containing all characters.\n */\npublic fun CharSequence.toList(): List<Char> {\n    return when (length) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a new [MutableList] filled with all characters of this char sequence.\n */\npublic fun CharSequence.toMutableList(): MutableList<Char> {\n    return toCollection(ArrayList<Char>(length))\n}\n\n/**\n * Returns a [Set] of all characters.\n * \n * The returned set preserves the element iteration order of the original char sequence.\n */\npublic fun CharSequence.toSet(): Set<Char> {\n    return when (length) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(length.coerceAtMost(128))))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each character of original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharSequence.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each character\n * and its index in the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.flatMapIndexed(transform: (index: Int, Char) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each character\n * and its index in the original char sequence, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.flatMapIndexedTo(destination: C, transform: (index: Int, Char) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each character of original char sequence, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and returns a map where each group key is associated with a list of corresponding characters.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharSequence.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharSequence.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and puts to the [destination] map each group key associated with a list of corresponding characters.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a char sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each character.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K> CharSequence.groupingBy(crossinline keySelector: (Char) -> K): Grouping<Char, K> {\n    return object : Grouping<Char, K> {\n        override fun sourceIterator(): Iterator<Char> = this@groupingBy.iterator()\n        override fun keyOf(element: Char): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character in the original char sequence.\n * \n * @sample samples.text.Strings.map\n */\npublic inline fun <R> CharSequence.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R> CharSequence.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any> CharSequence.mapIndexedNotNull(transform: (index: Int, Char) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapIndexedNotNullTo(destination: C, transform: (index: Int, Char) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character in the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <R : Any> CharSequence.mapNotNull(transform: (Char) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character in the original char sequence\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapNotNullTo(destination: C, transform: (Char) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character of the original char sequence\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each character of the original char sequence\n * into an [IndexedValue] containing the index of that character and the character itself.\n */\npublic fun CharSequence.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns `true` if all characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharSequence.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if char sequence has at least one character.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharSequence.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one character matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharSequence.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the length of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.count(): Int {\n    return length\n}\n\n/**\n * Returns the number of characters matching the given [predicate].\n */\npublic inline fun CharSequence.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each character.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each character and current accumulator value.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes a character and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each character.\n */\npublic inline fun CharSequence.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each character, providing sequential index with the character.\n * @param [action] function that takes the index of a character and the character itself\n * and performs the action on the character.\n */\npublic inline fun CharSequence.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharSequence.max(): Char? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> CharSequence.maxBy(selector: (Char) -> R): Char? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first character yielding the largest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharSequence.maxByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.maxOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.maxOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.maxOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest character or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.maxOrNull(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharSequence.maxWith(comparator: Comparator<in Char>): Char? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first character having the largest value according to the provided [comparator] or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.maxWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharSequence.min(): Char? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> CharSequence.minBy(selector: (Char) -> R): Char? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first character yielding the smallest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharSequence.minByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.minOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.minOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.minOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.minOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest character or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.minOrNull(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharSequence.minWith(comparator: Comparator<in Char>): Char? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first character having the smallest value according to the provided [comparator] or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.minWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the char sequence has no characters.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharSequence.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharSequence.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each character and returns the char sequence itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <S : CharSequence> S.onEach(action: (Char) -> Unit): S {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each character, providing sequential index with the character,\n * and returns the char sequence itself afterwards.\n * @param [action] function that takes the index of a character and the character itself\n * and performs the action on the character.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S : CharSequence> S.onEachIndexed(action: (index: Int, Char) -> Unit): S {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and a character,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharSequence.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of a character, current accumulator value and the character itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharSequence.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, current accumulator value and the character itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.reduceIndexedOrNull(operation: (index: Int, acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and a character,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharSequence.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character and current accumulator value.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes a character and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharSequence.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of a character, the character itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharSequence.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, the character itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.reduceRightIndexedOrNull(operation: (index: Int, Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character and current accumulator value.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes a character and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharSequence.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R> CharSequence.runningFold(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(length + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R> CharSequence.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(length + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with the first character of this char sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.runningReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(length).apply { add(accumulator) }\n    for (index in 1 until length) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with the first character of this char sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.runningReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(length).apply { add(accumulator) }\n    for (index in 1 until length) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <R> CharSequence.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <R> CharSequence.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharSequence.scanReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharSequence.scanReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    return runningReduceIndexed(operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Splits this char sequence into a list of strings each not exceeding the given [size].\n * \n * The last string in the resulting list may have less characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunked(size: Int): List<String> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunked(size: Int, transform: (CharSequence) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits this char sequence into a sequence of strings each not exceeding the given [size].\n * \n * The last string in the resulting sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunkedSequence(size: Int): Sequence<String> {\n    return chunkedSequence(size) { it.toString() }\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransformToSequence\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunkedSequence(size: Int, transform: (CharSequence) -> R): Sequence<R> {\n    return windowedSequence(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits the original char sequence into pair of char sequences,\n * where *first* char sequence contains characters for which [predicate] yielded `true`,\n * while *second* char sequence contains characters for which [predicate] yielded `false`.\n * \n * @sample samples.text.Strings.partition\n */\npublic inline fun CharSequence.partition(predicate: (Char) -> Boolean): Pair<CharSequence, CharSequence> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original string into pair of strings,\n * where *first* string contains characters for which [predicate] yielded `true`,\n * while *second* string contains characters for which [predicate] yielded `false`.\n * \n * @sample samples.text.Strings.partition\n */\npublic inline fun String.partition(predicate: (Char) -> Boolean): Pair<String, String> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first.toString(), second.toString())\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<String> {\n    return windowed(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    val thisSize = this.length\n    val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n    val result = ArrayList<R>(resultCapacity)\n    var index = 0\n    while (index in 0 until thisSize) {\n        val end = index + size\n        val coercedEnd = if (end < 0 || end > thisSize) { if (partialWindows) thisSize else break } else end\n        result.add(transform(subSequence(index, coercedEnd)))\n        index += step\n    }\n    return result\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<String> {\n    return windowedSequence(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): Sequence<R> {\n    checkWindowSizeStep(size, step)\n    val windows = (if (partialWindows) indices else 0 until length - size + 1) step step\n    return windows.asSequence().map { index ->\n        val end = index + size\n        val coercedEnd = if (end < 0 || end > length) length else end\n        transform(subSequence(index, coercedEnd))\n    }\n}\n\n/**\n * Returns a list of pairs built from the characters of `this` and the [other] char sequences with the same index\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zip\n */\npublic infix fun CharSequence.zip(other: CharSequence): List<Pair<Char, Char>> {\n    return zip(other) { c1, c2 -> c1 to c2 }\n}\n\n/**\n * Returns a list of values built from the characters of `this` and the [other] char sequences with the same index\n * using the provided [transform] function applied to each pair of characters.\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zipWithTransform\n */\npublic inline fun <V> CharSequence.zip(other: CharSequence, transform: (a: Char, b: Char) -> V): List<V> {\n    val length = minOf(this.length, other.length)\n    val list = ArrayList<V>(length)\n    for (i in 0 until length) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.zipWithNext(): List<Pair<Char, Char>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <R> CharSequence.zipWithNext(transform: (a: Char, b: Char) -> R): List<R> {\n    val size = length - 1\n    if (size < 1) return emptyList()\n    val result = ArrayList<R>(size)\n    for (index in 0 until size) {\n        result.add(transform(this[index], this[index + 1]))\n    }\n    return result\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asIterable(): Iterable<Char> {\n    if (this is String && isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asSequence(): Sequence<Char> {\n    if (this is String && isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString() instead\", ReplaceWith(\"chars.concatToString()\"))\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString(startIndex, endIndex) instead\", ReplaceWith(\"chars.concatToString(offset, offset + length)\"))\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toUpperCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toLowerCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.toUpperCase()\n                s2 = s2.toUpperCase()\n                if (s1 != s2) {\n                    s1 = s1.toLowerCase()\n                    s2 = s2.toLowerCase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.collections\n\n/** An iterator over a sequence of values of type `Byte`. */\npublic abstract class ByteIterator : Iterator<Byte> {\n    override final fun next() = nextByte()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextByte(): Byte\n}\n\n/** An iterator over a sequence of values of type `Char`. */\npublic abstract class CharIterator : Iterator<Char> {\n    override final fun next() = nextChar()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextChar(): Char\n}\n\n/** An iterator over a sequence of values of type `Short`. */\npublic abstract class ShortIterator : Iterator<Short> {\n    override final fun next() = nextShort()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextShort(): Short\n}\n\n/** An iterator over a sequence of values of type `Int`. */\npublic abstract class IntIterator : Iterator<Int> {\n    override final fun next() = nextInt()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextInt(): Int\n}\n\n/** An iterator over a sequence of values of type `Long`. */\npublic abstract class LongIterator : Iterator<Long> {\n    override final fun next() = nextLong()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextLong(): Long\n}\n\n/** An iterator over a sequence of values of type `Float`. */\npublic abstract class FloatIterator : Iterator<Float> {\n    override final fun next() = nextFloat()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextFloat(): Float\n}\n\n/** An iterator over a sequence of values of type `Double`. */\npublic abstract class DoubleIterator : Iterator<Double> {\n    override final fun next() = nextDouble()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextDouble(): Double\n}\n\n/** An iterator over a sequence of values of type `Boolean`. */\npublic abstract class BooleanIterator : Iterator<Boolean> {\n    override final fun next() = nextBoolean()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextBoolean(): Boolean\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n/**\n * An iterator over a progression of values of type `Char`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class CharProgressionIterator(first: Char, last: Char, val step: Int) : CharIterator() {\n    private val finalElement = last.toInt()\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next = if (hasNext) first.toInt() else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextChar(): Char {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value.toChar()\n    }\n}\n\n/**\n * An iterator over a progression of values of type `Int`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class IntProgressionIterator(first: Int, last: Int, val step: Int) : IntIterator() {\n    private val finalElement = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextInt(): Int {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value\n    }\n}\n\n/**\n * An iterator over a progression of values of type `Long`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class LongProgressionIterator(first: Long, last: Long, val step: Long) : LongIterator() {\n    private val finalElement = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextLong(): Long {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value\n    }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\nimport kotlin.internal.getProgressionLastElement\n\n/**\n * A progression of values of type `Char`.\n */\npublic open class CharProgression\n    internal constructor\n    (\n            start: Char,\n            endInclusive: Char,\n            step: Int\n    ) : Iterable<Char> {\n    init {\n        if (step == 0) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Int.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Char = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Char = getProgressionLastElement(start.toInt(), endInclusive.toInt(), step).toChar()\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Int = step\n\n    override fun iterator(): CharIterator = CharProgressionIterator(first, last, step)\n\n    /** Checks if the progression is empty. */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is CharProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * first.toInt() + last.toInt()) + step)\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates CharProgression within the specified bounds of a closed range.\n\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Int.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Char, rangeEnd: Char, step: Int): CharProgression = CharProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n/**\n * A progression of values of type `Int`.\n */\npublic open class IntProgression\n    internal constructor\n    (\n            start: Int,\n            endInclusive: Int,\n            step: Int\n    ) : Iterable<Int> {\n    init {\n        if (step == 0) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Int.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Int = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Int = getProgressionLastElement(start.toInt(), endInclusive.toInt(), step).toInt()\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Int = step\n\n    override fun iterator(): IntIterator = IntProgressionIterator(first, last, step)\n\n    /** Checks if the progression is empty. */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is IntProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * first + last) + step)\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates IntProgression within the specified bounds of a closed range.\n\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Int.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Int, rangeEnd: Int, step: Int): IntProgression = IntProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n/**\n * A progression of values of type `Long`.\n */\npublic open class LongProgression\n    internal constructor\n    (\n            start: Long,\n            endInclusive: Long,\n            step: Long\n    ) : Iterable<Long> {\n    init {\n        if (step == 0L) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Long.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Long.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Long = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Long = getProgressionLastElement(start.toLong(), endInclusive.toLong(), step).toLong()\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Long = step\n\n    override fun iterator(): LongIterator = LongProgressionIterator(first, last, step)\n\n    /** Checks if the progression is empty. */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is LongProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * (first xor (first ushr 32)) + (last xor (last ushr 32))) + (step xor (step ushr 32))).toInt()\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates LongProgression within the specified bounds of a closed range.\n\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Long.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Long, rangeEnd: Long, step: Long): LongProgression = LongProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.internal.PlatformDependent\n\n/**\n * Classes that inherit from this interface can be represented as a sequence of elements that can\n * be iterated over.\n * @param T the type of element being iterated over. The iterator is covariant in its element type.\n */\npublic interface Iterable<out T> {\n    /**\n     * Returns an iterator over the elements of this object.\n     */\n    public operator fun iterator(): Iterator<T>\n}\n\n/**\n * Classes that inherit from this interface can be represented as a sequence of elements that can\n * be iterated over and that supports removing elements during iteration.\n * @param T the type of element being iterated over. The mutable iterator is invariant in its element type.\n */\npublic interface MutableIterable<out T> : Iterable<T> {\n    /**\n     * Returns an iterator over the elements of this sequence that supports removing elements during iteration.\n     */\n    override fun iterator(): MutableIterator<T>\n}\n\n/**\n * A generic collection of elements. Methods in this interface support only read-only access to the collection;\n * read/write access is supported through the [MutableCollection] interface.\n * @param E the type of elements contained in the collection. The collection is covariant in its element type.\n */\npublic interface Collection<out E> : Iterable<E> {\n    // Query Operations\n    /**\n     * Returns the size of the collection.\n     */\n    public val size: Int\n\n    /**\n     * Returns `true` if the collection is empty (contains no elements), `false` otherwise.\n     */\n    public fun isEmpty(): Boolean\n\n    /**\n     * Checks if the specified element is contained in this collection.\n     */\n    public operator fun contains(element: @UnsafeVariance E): Boolean\n\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    /**\n     * Checks if all elements in the specified collection are contained in this collection.\n     */\n    public fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n}\n\n/**\n * A generic collection of elements that supports adding and removing elements.\n *\n * @param E the type of elements contained in the collection. The mutable collection is invariant in its element type.\n */\npublic interface MutableCollection<E> : Collection<E>, MutableIterable<E> {\n    // Query Operations\n    override fun iterator(): MutableIterator<E>\n\n    // Modification Operations\n    /**\n     * Adds the specified element to the collection.\n     *\n     * @return `true` if the element has been added, `false` if the collection does not support duplicates\n     * and the element is already contained in the collection.\n     */\n    public fun add(element: E): Boolean\n\n    /**\n     * Removes a single instance of the specified element from this\n     * collection, if it is present.\n     *\n     * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n     */\n    public fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n    /**\n     * Adds all of the elements of the specified collection to this collection.\n     *\n     * @return `true` if any of the specified elements was added to the collection, `false` if the collection was not modified.\n     */\n    public fun addAll(elements: Collection<E>): Boolean\n\n    /**\n     * Removes all of this collection's elements that are also contained in the specified collection.\n     *\n     * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n     */\n    public fun removeAll(elements: Collection<E>): Boolean\n\n    /**\n     * Retains only the elements in this collection that are contained in the specified collection.\n     *\n     * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n     */\n    public fun retainAll(elements: Collection<E>): Boolean\n\n    /**\n     * Removes all elements from this collection.\n     */\n    public fun clear(): Unit\n}\n\n/**\n * A generic ordered collection of elements. Methods in this interface support only read-only access to the list;\n * read/write access is supported through the [MutableList] interface.\n * @param E the type of elements contained in the list. The list is covariant in its element type.\n */\npublic interface List<out E> : Collection<E> {\n    // Query Operations\n\n    override val size: Int\n    override fun isEmpty(): Boolean\n    override fun contains(element: @UnsafeVariance E): Boolean\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n\n    // Positional Access Operations\n    /**\n     * Returns the element at the specified index in the list.\n     */\n    public operator fun get(index: Int): E\n\n    // Search Operations\n    /**\n     * Returns the index of the first occurrence of the specified element in the list, or -1 if the specified\n     * element is not contained in the list.\n     */\n    public fun indexOf(element: @UnsafeVariance E): Int\n\n    /**\n     * Returns the index of the last occurrence of the specified element in the list, or -1 if the specified\n     * element is not contained in the list.\n     */\n    public fun lastIndexOf(element: @UnsafeVariance E): Int\n\n    // List Iterators\n    /**\n     * Returns a list iterator over the elements in this list (in proper sequence).\n     */\n    public fun listIterator(): ListIterator<E>\n\n    /**\n     * Returns a list iterator over the elements in this list (in proper sequence), starting at the specified [index].\n     */\n    public fun listIterator(index: Int): ListIterator<E>\n\n    // View\n    /**\n     * Returns a view of the portion of this list between the specified [fromIndex] (inclusive) and [toIndex] (exclusive).\n     * The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa.\n     *\n     * Structural changes in the base list make the behavior of the view undefined.\n     */\n    public fun subList(fromIndex: Int, toIndex: Int): List<E>\n}\n\n/**\n * A generic ordered collection of elements that supports adding and removing elements.\n * @param E the type of elements contained in the list. The mutable list is invariant in its element type.\n */\npublic interface MutableList<E> : List<E>, MutableCollection<E> {\n    // Modification Operations\n    /**\n     * Adds the specified element to the end of this list.\n     *\n     * @return `true` because the list is always modified as the result of this operation.\n     */\n    override fun add(element: E): Boolean\n\n    override fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n    /**\n     * Adds all of the elements of the specified collection to the end of this list.\n     *\n     * The elements are appended in the order they appear in the [elements] collection.\n     *\n     * @return `true` if the list was changed as the result of the operation.\n     */\n    override fun addAll(elements: Collection<E>): Boolean\n\n    /**\n     * Inserts all of the elements of the specified collection [elements] into this list at the specified [index].\n     *\n     * @return `true` if the list was changed as the result of the operation.\n     */\n    public fun addAll(index: Int, elements: Collection<E>): Boolean\n\n    override fun removeAll(elements: Collection<E>): Boolean\n    override fun retainAll(elements: Collection<E>): Boolean\n    override fun clear(): Unit\n\n    // Positional Access Operations\n    /**\n     * Replaces the element at the specified position in this list with the specified element.\n     *\n     * @return the element previously at the specified position.\n     */\n    public operator fun set(index: Int, element: E): E\n\n    /**\n     * Inserts an element into the list at the specified [index].\n     */\n    public fun add(index: Int, element: E): Unit\n\n    /**\n     * Removes an element at the specified [index] from the list.\n     *\n     * @return the element that has been removed.\n     */\n    public fun removeAt(index: Int): E\n\n    // List Iterators\n    override fun listIterator(): MutableListIterator<E>\n\n    override fun listIterator(index: Int): MutableListIterator<E>\n\n    // View\n    override fun subList(fromIndex: Int, toIndex: Int): MutableList<E>\n}\n\n/**\n * A generic unordered collection of elements that does not support duplicate elements.\n * Methods in this interface support only read-only access to the set;\n * read/write access is supported through the [MutableSet] interface.\n * @param E the type of elements contained in the set. The set is covariant in its element type.\n */\npublic interface Set<out E> : Collection<E> {\n    // Query Operations\n\n    override val size: Int\n    override fun isEmpty(): Boolean\n    override fun contains(element: @UnsafeVariance E): Boolean\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n}\n\n/**\n * A generic unordered collection of elements that does not support duplicate elements, and supports\n * adding and removing elements.\n * @param E the type of elements contained in the set. The mutable set is invariant in its element type.\n */\npublic interface MutableSet<E> : Set<E>, MutableCollection<E> {\n    // Query Operations\n    override fun iterator(): MutableIterator<E>\n\n    // Modification Operations\n\n    /**\n     * Adds the specified element to the set.\n     *\n     * @return `true` if the element has been added, `false` if the element is already contained in the set.\n     */\n    override fun add(element: E): Boolean\n\n    override fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n\n    override fun addAll(elements: Collection<E>): Boolean\n    override fun removeAll(elements: Collection<E>): Boolean\n    override fun retainAll(elements: Collection<E>): Boolean\n    override fun clear(): Unit\n}\n\n/**\n * A collection that holds pairs of objects (keys and values) and supports efficiently retrieving\n * the value corresponding to each key. Map keys are unique; the map holds only one value for each key.\n * Methods in this interface support only read-only access to the map; read-write access is supported through\n * the [MutableMap] interface.\n * @param K the type of map keys. The map is invariant in its key type, as it\n *          can accept key as a parameter (of [containsKey] for example) and return it in [keys] set.\n * @param V the type of map values. The map is covariant in its value type.\n */\npublic interface Map<K, out V> {\n    // Query Operations\n    /**\n     * Returns the number of key/value pairs in the map.\n     */\n    public val size: Int\n\n    /**\n     * Returns `true` if the map is empty (contains no elements), `false` otherwise.\n     */\n    public fun isEmpty(): Boolean\n\n    /**\n     * Returns `true` if the map contains the specified [key].\n     */\n    public fun containsKey(key: K): Boolean\n\n    /**\n     * Returns `true` if the map maps one or more keys to the specified [value].\n     */\n    public fun containsValue(value: @UnsafeVariance V): Boolean\n\n    /**\n     * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n     */\n    public operator fun get(key: K): V?\n\n    /**\n     * Returns the value corresponding to the given [key], or [defaultValue] if such a key is not present in the map.\n     *\n     * @since JDK 1.8\n     */\n    @SinceKotlin(\"1.1\")\n    @PlatformDependent\n    public fun getOrDefault(key: K, defaultValue: @UnsafeVariance V): V {\n        // See default implementation in JDK sources\n        throw NotImplementedError()\n    }\n\n    // Views\n    /**\n     * Returns a read-only [Set] of all keys in this map.\n     */\n    public val keys: Set<K>\n\n    /**\n     * Returns a read-only [Collection] of all values in this map. Note that this collection may contain duplicate values.\n     */\n    public val values: Collection<V>\n\n    /**\n     * Returns a read-only [Set] of all key/value pairs in this map.\n     */\n    public val entries: Set<Map.Entry<K, V>>\n\n    /**\n     * Represents a key/value pair held by a [Map].\n     */\n    public interface Entry<out K, out V> {\n        /**\n         * Returns the key of this key/value pair.\n         */\n        public val key: K\n\n        /**\n         * Returns the value of this key/value pair.\n         */\n        public val value: V\n    }\n}\n\n/**\n * A modifiable collection that holds pairs of objects (keys and values) and supports efficiently retrieving\n * the value corresponding to each key. Map keys are unique; the map holds only one value for each key.\n * @param K the type of map keys. The map is invariant in its key type.\n * @param V the type of map values. The mutable map is invariant in its value type.\n */\npublic interface MutableMap<K, V> : Map<K, V> {\n    // Modification Operations\n    /**\n     * Associates the specified [value] with the specified [key] in the map.\n     *\n     * @return the previous value associated with the key, or `null` if the key was not present in the map.\n     */\n    public fun put(key: K, value: V): V?\n\n    /**\n     * Removes the specified key and its corresponding value from this map.\n     *\n     * @return the previous value associated with the key, or `null` if the key was not present in the map.\n     */\n    public fun remove(key: K): V?\n\n    /**\n     * Removes the entry for the specified key only if it is mapped to the specified value.\n     *\n     * @return true if entry was removed\n     */\n    @SinceKotlin(\"1.1\")\n    @PlatformDependent\n    public fun remove(key: K, value: V): Boolean {\n        // See default implementation in JDK sources\n        return true\n    }\n\n    // Bulk Modification Operations\n    /**\n     * Updates this map with key/value pairs from the specified map [from].\n     */\n    public fun putAll(from: Map<out K, V>): Unit\n\n    /**\n     * Removes all elements from this map.\n     */\n    public fun clear(): Unit\n\n    // Views\n    /**\n     * Returns a [MutableSet] of all keys in this map.\n     */\n    override val keys: MutableSet<K>\n\n    /**\n     * Returns a [MutableCollection] of all values in this map. Note that this collection may contain duplicate values.\n     */\n    override val values: MutableCollection<V>\n\n    /**\n     * Returns a [MutableSet] of all key/value pairs in this map.\n     */\n    override val entries: MutableSet<MutableMap.MutableEntry<K, V>>\n\n    /**\n     * Represents a key/value pair held by a [MutableMap].\n     */\n    public interface MutableEntry<K, V> : Map.Entry<K, V> {\n        /**\n         * Changes the value associated with the key of this entry.\n         *\n         * @return the previous value corresponding to the key.\n         */\n        public fun setValue(newValue: V): V\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.ranges\n\n/**\n * Represents a range of values (for example, numbers or characters).\n * See the [Kotlin language documentation](https://kotlinlang.org/docs/reference/ranges.html) for more information.\n */\npublic interface ClosedRange<T: Comparable<T>> {\n    /**\n     * The minimum value in the range.\n     */\n    public val start: T\n\n    /**\n     * The maximum value in the range (inclusive).\n     */\n    public val endInclusive: T\n\n    /**\n     * Checks whether the specified [value] belongs to the range.\n     */\n    public operator fun contains(value: T): Boolean = value >= start && value <= endInclusive\n\n    /**\n     * Checks whether the range is empty.\n     */\n    public fun isEmpty(): Boolean = start > endInclusive\n}\n","/*\n * Copyright 2010-2015 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin\n\n/**\n * The type with only one value: the `Unit` object. This type corresponds to the `void` type in Java.\n */\npublic object Unit {\n    override fun toString() = \"kotlin.Unit\"\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.internal\n\n// a mod b (in arithmetical sense)\nprivate fun mod(a: Int, b: Int): Int {\n    val mod = a % b\n    return if (mod >= 0) mod else mod + b\n}\n\nprivate fun mod(a: Long, b: Long): Long {\n    val mod = a % b\n    return if (mod >= 0) mod else mod + b\n}\n\n// (a - b) mod c\nprivate fun differenceModulo(a: Int, b: Int, c: Int): Int {\n    return mod(mod(a, c) - mod(b, c), c)\n}\n\nprivate fun differenceModulo(a: Long, b: Long, c: Long): Long {\n    return mod(mod(a, c) - mod(b, c), c)\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\ninternal fun getProgressionLastElement(start: Int, end: Int, step: Int): Int = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step)\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, -step)\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\ninternal fun getProgressionLastElement(start: Long, end: Long, step: Long): Long = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step)\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, -step)\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@JsName(\"arrayIterator\")\ninternal fun arrayIterator(array: dynamic, type: String?) = when (type) {\n    null -> {\n        val arr: Array<dynamic> = array\n        object : Iterator<dynamic> {\n            var index = 0\n            override fun hasNext() = index < arr.size\n            override fun next() = if (index < arr.size) arr[index++] else throw NoSuchElementException(\"$index\")\n        }\n    }\n    \"BooleanArray\" -> booleanArrayIterator(array)\n    \"ByteArray\" -> byteArrayIterator(array)\n    \"ShortArray\" -> shortArrayIterator(array)\n    \"CharArray\" -> charArrayIterator(array)\n    \"IntArray\" -> intArrayIterator(array)\n    \"LongArray\" -> longArrayIterator(array)\n    \"FloatArray\" -> floatArrayIterator(array)\n    \"DoubleArray\" -> doubleArrayIterator(array)\n    else -> throw IllegalStateException(\"Unsupported type argument for arrayIterator: $type\")\n}\n\n@JsName(\"booleanArrayIterator\")\ninternal fun booleanArrayIterator(array: BooleanArray) = object : BooleanIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextBoolean() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"byteArrayIterator\")\ninternal fun byteArrayIterator(array: ByteArray) = object : ByteIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextByte() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"shortArrayIterator\")\ninternal fun shortArrayIterator(array: ShortArray) = object : ShortIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextShort() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"charArrayIterator\")\ninternal fun charArrayIterator(array: CharArray) = object : CharIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextChar() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"intArrayIterator\")\ninternal fun intArrayIterator(array: IntArray) = object : IntIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextInt() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"floatArrayIterator\")\ninternal fun floatArrayIterator(array: FloatArray) = object : FloatIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextFloat() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"doubleArrayIterator\")\ninternal fun doubleArrayIterator(array: DoubleArray) = object : DoubleIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextDouble() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"longArrayIterator\")\ninternal fun longArrayIterator(array: LongArray) = object : LongIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextLong() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"PropertyMetadata\")\ninternal class PropertyMetadata(@JsName(\"callableName\") val name: String)\n\n@JsName(\"noWhenBranchMatched\")\ninternal fun noWhenBranchMatched(): Nothing = throw NoWhenBranchMatchedException()\n\n@JsName(\"subSequence\")\ninternal fun subSequence(c: CharSequence, startIndex: Int, endIndex: Int): CharSequence {\n    if (c is String) {\n        return c.substring(startIndex, endIndex)\n    } else {\n        return c.asDynamic().`subSequence_vux9f0$`(startIndex, endIndex)\n    }\n}\n\n@JsName(\"captureStack\")\ninternal fun captureStack(@Suppress(\"UNUSED_PARAMETER\") baseClass: JsClass<in Throwable>, instance: Throwable) {\n    if (js(\"Error\").captureStackTrace) {\n        // Using uncropped stack traces due to KT-37563.\n        // Precise stack traces are implemented in JS IR compiler and stdlib\n        js(\"Error\").captureStackTrace(instance);\n    } else {\n        instance.asDynamic().stack = js(\"new Error()\").stack;\n    }\n}\n\n@JsName(\"newThrowable\")\ninternal fun newThrowable(message: String?, cause: Throwable?): Throwable {\n    val throwable = js(\"new Error()\")\n    throwable.message = if (jsTypeOf(message) == \"undefined\") {\n        if (cause != null) cause.toString() else null\n    } else {\n        message\n    }\n    throwable.cause = cause\n    throwable.name = \"Throwable\"\n    return throwable\n}\n\n@JsName(\"BoxedChar\")\ninternal class BoxedChar(val c: Int) : Comparable<Int> {\n    override fun equals(other: Any?): Boolean {\n        return other is BoxedChar && c == other.c\n    }\n\n    override fun hashCode(): Int {\n        return c\n    }\n\n    override fun toString(): String {\n        return js(\"this.c\").unsafeCast<Char>().toString()\n    }\n\n    override fun compareTo(other: Int): Int {\n        return js(\"this.c - other\").unsafeCast<Int>()\n    }\n\n    @JsName(\"valueOf\")\n    public fun valueOf(): Int {\n        return c\n    }\n}\n\n@kotlin.internal.InlineOnly\ninternal inline fun <T> concat(args: Array<T>): T {\n    val typed = js(\"Array\")(args.size)\n    for (i in args.indices) {\n        val arr = args[i]\n        if (arr !is Array<*>) {\n            typed[i] = js(\"[]\").slice.call(arr)\n        } else {\n            typed[i] = arr\n        }\n    }\n    return js(\"[]\").concat.apply(js(\"[]\"), typed);\n}\n\n/** Concat regular Array's and TypedArray's into an Array.\n */\n@PublishedApi\n@JsName(\"arrayConcat\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun <T> arrayConcat(a: T, b: T): T {\n    return concat(js(\"arguments\"))\n}\n\n/** Concat primitive arrays. Main use: prepare vararg arguments.\n *  For compatibility with 1.1.0 the arguments may be a mixture of Array's and TypedArray's.\n *\n *  If the first argument is TypedArray (Byte-, Short-, Char-, Int-, Float-, and DoubleArray) returns a TypedArray, otherwise an Array.\n *  If the first argument has the $type$ property (Boolean-, Char-, and LongArray) copy its value to result.$type$.\n *  If the first argument is a regular Array without the $type$ property default to arrayConcat.\n */\n@PublishedApi\n@JsName(\"primitiveArrayConcat\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun <T> primitiveArrayConcat(a: T, b: T): T {\n    val args: Array<T> = js(\"arguments\")\n    if (a is Array<*> && a.asDynamic().`$type$` === undefined) {\n        return concat(args)\n    } else {\n        var size = 0\n        for (i in args.indices) {\n            size += args[i].asDynamic().length as Int\n        }\n        val result = js(\"new a.constructor(size)\")\n        kotlin.copyArrayType(a, result)\n        size = 0\n        for (i in args.indices) {\n            val arr = args[i].asDynamic()\n            for (j in 0 until arr.length) {\n                result[size++] = arr[j]\n            }\n        }\n        return result\n    }\n}\n\n@JsName(\"booleanArrayOf\")\ninternal fun booleanArrayOf() = withType(\"BooleanArray\", js(\"[].slice.call(arguments)\"))\n\n@JsName(\"charArrayOf\") // The arguments have to be slice'd here because of Rhino (see KT-16974)\ninternal fun charArrayOf() = withType(\"CharArray\", js(\"new Uint16Array([].slice.call(arguments))\"))\n\n@JsName(\"longArrayOf\")\ninternal fun longArrayOf() = withType(\"LongArray\", js(\"[].slice.call(arguments)\"))\n\n@JsName(\"withType\")\n@kotlin.internal.InlineOnly\ninternal inline fun withType(type: String, array: dynamic): dynamic {\n    array.`$type$` = type\n    return array\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED\n\n@SinceKotlin(\"1.3\")\n@JsName(\"CoroutineImpl\")\ninternal abstract class CoroutineImpl(private val resultContinuation: Continuation<Any?>) : Continuation<Any?> {\n    protected var state = 0\n    protected var exceptionState = 0\n    protected var result: Any? = null\n    protected var exception: Throwable? = null\n    protected var finallyPath: Array<Int>? = null\n\n    public override val context: CoroutineContext = resultContinuation.context\n\n    private var intercepted_: Continuation<Any?>? = null\n\n    public fun intercepted(): Continuation<Any?> =\n        intercepted_\n            ?: (context[ContinuationInterceptor]?.interceptContinuation(this) ?: this)\n                .also { intercepted_ = it }\n\n    override fun resumeWith(result: Result<Any?>) {\n        var current = this\n        var currentResult: Any? = result.getOrNull()\n        var currentException: Throwable? = result.exceptionOrNull()\n\n        // This loop unrolls recursion in current.resumeWith(param) to make saner and shorter stack traces on resume\n        while (true) {\n            with(current) {\n                val completion = resultContinuation\n\n                // Set result and exception fields in the current continuation\n                if (currentException == null) {\n                    this.result = currentResult\n                } else {\n                    state = exceptionState\n                    exception = currentException\n                }\n\n                try {\n                    val outcome = doResume()\n                    if (outcome === COROUTINE_SUSPENDED) return\n                    currentResult = outcome\n                    currentException = null\n                } catch (exception: dynamic) { // Catch all exceptions\n                    currentResult = null\n                    currentException = exception.unsafeCast<Throwable>()\n                }\n\n                releaseIntercepted() // this state machine instance is terminating\n\n                if (completion is CoroutineImpl) {\n                    // unrolling recursion via loop\n                    current = completion\n                } else {\n                    // top-level completion reached -- invoke and return\n                    currentException?.let {\n                        completion.resumeWithException(it)\n                    } ?: completion.resume(currentResult)\n                    return\n                }\n            }\n        }\n    }\n\n    private fun releaseIntercepted() {\n        val intercepted = intercepted_\n        if (intercepted != null && intercepted !== this) {\n            context[ContinuationInterceptor]!!.releaseInterceptedContinuation(intercepted)\n        }\n        this.intercepted_ = CompletedContinuation // just in case\n    }\n\n    protected abstract fun doResume(): Any?\n}\n\ninternal object CompletedContinuation : Continuation<Any?> {\n    override val context: CoroutineContext\n        get() = error(\"This continuation is already complete\")\n\n    override fun resumeWith(result: Result<Any?>) {\n        error(\"This continuation is already complete\")\n    }\n\n    override fun toString(): String = \"This continuation is already complete\"\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#takeif-and-takeunless).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#takeif-and-takeunless).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNCHECKED_CAST\", \"RedundantVisibilityModifier\")\n\npackage kotlin\n\nimport kotlin.contracts.*\nimport kotlin.internal.InlineOnly\nimport kotlin.jvm.JvmField\nimport kotlin.jvm.JvmName\n\n/**\n * A discriminated union that encapsulates a successful outcome with a value of type [T]\n * or a failure with an arbitrary [Throwable] exception.\n */\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\npublic inline class Result<out T> @PublishedApi internal constructor(\n    @PublishedApi\n    internal val value: Any?\n) : Serializable {\n    // discovery\n\n    /**\n     * Returns `true` if this instance represents a successful outcome.\n     * In this case [isFailure] returns `false`.\n     */\n    public val isSuccess: Boolean get() = value !is Failure\n\n    /**\n     * Returns `true` if this instance represents a failed outcome.\n     * In this case [isSuccess] returns `false`.\n     */\n    public val isFailure: Boolean get() = value is Failure\n\n    // value & exception retrieval\n\n    /**\n     * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or `null`\n     * if it is [failure][Result.isFailure].\n     *\n     * This function is a shorthand for `getOrElse { null }` (see [getOrElse]) or\n     * `fold(onSuccess = { it }, onFailure = { null })` (see [fold]).\n     */\n    @InlineOnly\n    public inline fun getOrNull(): T? =\n        when {\n            isFailure -> null\n            else -> value as T\n        }\n\n    /**\n     * Returns the encapsulated [Throwable] exception if this instance represents [failure][isFailure] or `null`\n     * if it is [success][isSuccess].\n     *\n     * This function is a shorthand for `fold(onSuccess = { null }, onFailure = { it })` (see [fold]).\n     */\n    public fun exceptionOrNull(): Throwable? =\n        when (value) {\n            is Failure -> value.exception\n            else -> null\n        }\n\n    /**\n     * Returns a string `Success(v)` if this instance represents [success][Result.isSuccess]\n     * where `v` is a string representation of the value or a string `Failure(x)` if\n     * it is [failure][isFailure] where `x` is a string representation of the exception.\n     */\n    public override fun toString(): String =\n        when (value) {\n            is Failure -> value.toString() // \"Failure($exception)\"\n            else -> \"Success($value)\"\n        }\n\n    // companion with constructors\n\n    /**\n     * Companion object for [Result] class that contains its constructor functions\n     * [success] and [failure].\n     */\n    public companion object {\n        /**\n         * Returns an instance that encapsulates the given [value] as successful value.\n         */\n        @Suppress(\"INAPPLICABLE_JVM_NAME\")\n        @InlineOnly\n        @JvmName(\"success\")\n        public inline fun <T> success(value: T): Result<T> =\n            Result(value)\n\n        /**\n         * Returns an instance that encapsulates the given [Throwable] [exception] as failure.\n         */\n        @Suppress(\"INAPPLICABLE_JVM_NAME\")\n        @InlineOnly\n        @JvmName(\"failure\")\n        public inline fun <T> failure(exception: Throwable): Result<T> =\n            Result(createFailure(exception))\n    }\n\n    internal class Failure(\n        @JvmField\n        val exception: Throwable\n    ) : Serializable {\n        override fun equals(other: Any?): Boolean = other is Failure && exception == other.exception\n        override fun hashCode(): Int = exception.hashCode()\n        override fun toString(): String = \"Failure($exception)\"\n    }\n}\n\n/**\n * Creates an instance of internal marker [Result.Failure] class to\n * make sure that this class is not exposed in ABI.\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun createFailure(exception: Throwable): Any =\n    Result.Failure(exception)\n\n/**\n * Throws exception if the result is failure. This internal function minimizes\n * inlined bytecode for [getOrThrow] and makes sure that in the future we can\n * add some exception-augmenting logic here (if needed).\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun Result<*>.throwOnFailure() {\n    if (value is Result.Failure) throw value.exception\n}\n\n/**\n * Calls the specified function [block] and returns its encapsulated result if invocation was successful,\n * catching any [Throwable] exception that was thrown from the [block] function execution and encapsulating it as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R> runCatching(block: () -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its encapsulated result if invocation was successful,\n * catching any [Throwable] exception that was thrown from the [block] function execution and encapsulating it as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T, R> T.runCatching(block: T.() -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n// -- extensions ---\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or throws the encapsulated [Throwable] exception\n * if it is [failure][Result.isFailure].\n *\n * This function is a shorthand for `getOrElse { throw it }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.getOrThrow(): T {\n    throwOnFailure()\n    return value as T\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * result of [onFailure] function for the encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [onFailure] function.\n *\n * This function is a shorthand for `fold(onSuccess = { it }, onFailure = onFailure)` (see [fold]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrElse(onFailure: (exception: Throwable) -> R): R {\n    contract {\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> value as T\n        else -> onFailure(exception)\n    }\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * [defaultValue] if it is [failure][Result.isFailure].\n *\n * This function is a shorthand for `getOrElse { defaultValue }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrDefault(defaultValue: R): R {\n    if (isFailure) return defaultValue\n    return value as T\n}\n\n/**\n * Returns the result of [onSuccess] for the encapsulated value if this instance represents [success][Result.isSuccess]\n * or the result of [onFailure] function for the encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [onSuccess] or by [onFailure] function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.fold(\n    onSuccess: (value: T) -> R,\n    onFailure: (exception: Throwable) -> R\n): R {\n    contract {\n        callsInPlace(onSuccess, InvocationKind.AT_MOST_ONCE)\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> onSuccess(value as T)\n        else -> onFailure(exception)\n    }\n}\n\n// transformation\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [transform] function.\n * See [mapCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.map(transform: (value: T) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when {\n        isSuccess -> Result.success(transform(value as T))\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * This function catches any [Throwable] exception thrown by [transform] function and encapsulates it as a failure.\n * See [map] for an alternative that rethrows exceptions from `transform` function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.mapCatching(transform: (value: T) -> R): Result<R> {\n    return when {\n        isSuccess -> runCatching { transform(value as T) }\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated [Throwable] exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [transform] function.\n * See [recoverCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recover(transform: (exception: Throwable) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> Result.success(transform(exception))\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated [Throwable] exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * This function catches any [Throwable] exception thrown by [transform] function and encapsulates it as a failure.\n * See [recover] for an alternative that rethrows exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recoverCatching(transform: (exception: Throwable) -> R): Result<R> {\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> runCatching { transform(exception) }\n    }\n}\n\n// \"peek\" onto value/exception and pipe\n\n/**\n * Performs the given [action] on the encapsulated [Throwable] exception if this instance represents [failure][Result.isFailure].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onFailure(action: (exception: Throwable) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    exceptionOrNull()?.let { action(it) }\n    return this\n}\n\n/**\n * Performs the given [action] on the encapsulated value if this instance represents [success][Result.isSuccess].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onSuccess(action: (value: T) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    if (isSuccess) action(value as T)\n    return this\n}\n\n// -------------------\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.contracts.*\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Interface representing a continuation after a suspension point that returns a value of type `T`.\n */\n@SinceKotlin(\"1.3\")\npublic interface Continuation<in T> {\n    /**\n     * The context of the coroutine that corresponds to this continuation.\n     */\n    public val context: CoroutineContext\n\n    /**\n     * Resumes the execution of the corresponding coroutine passing a successful or failed [result] as the\n     * return value of the last suspension point.\n     */\n    public fun resumeWith(result: Result<T>)\n}\n\n/**\n * Classes and interfaces marked with this annotation are restricted when used as receivers for extension\n * `suspend` functions. These `suspend` extensions can only invoke other member or extension `suspend` functions on this particular\n * receiver and are restricted from calling arbitrary suspension functions.\n */\n@SinceKotlin(\"1.3\")\n@Target(AnnotationTarget.CLASS)\n@Retention(AnnotationRetention.BINARY)\npublic annotation class RestrictsSuspension\n\n/**\n * Resumes the execution of the corresponding coroutine passing [value] as the return value of the last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resume(value: T): Unit =\n    resumeWith(Result.success(value))\n\n/**\n * Resumes the execution of the corresponding coroutine so that the [exception] is re-thrown right after the\n * last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resumeWithException(exception: Throwable): Unit =\n    resumeWith(Result.failure(exception))\n\n\n/**\n * Creates a [Continuation] instance with the given [context] and implementation of [resumeWith] method.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation(\n    context: CoroutineContext,\n    crossinline resumeWith: (Result<T>) -> Unit\n): Continuation<T> =\n    object : Continuation<T> {\n        override val context: CoroutineContext\n            get() = context\n\n        override fun resumeWith(result: Result<T>) =\n            resumeWith(result)\n    }\n\n/**\n * Creates a coroutine without a receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).createCoroutine(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Creates a coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).createCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(receiver, completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Starts a coroutine without a receiver and with result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).startCoroutine(\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(completion).intercepted().resume(Unit)\n}\n\n/**\n * Starts a coroutine with receiver type [R] and result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).startCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(receiver, completion).intercepted().resume(Unit)\n}\n\n/**\n * Obtains the current continuation instance inside suspend functions and suspends\n * the currently running coroutine.\n *\n * In this function both [Continuation.resume] and [Continuation.resumeWithException] can be used either synchronously in\n * the same stack-frame where the suspension function is run or asynchronously later in the same thread or\n * from a different thread of execution. Subsequent invocation of any resume function will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic suspend inline fun <T> suspendCoroutine(crossinline block: (Continuation<T>) -> Unit): T {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return suspendCoroutineUninterceptedOrReturn { c: Continuation<T> ->\n        val safe = SafeContinuation(c.intercepted())\n        block(safe)\n        safe.getOrThrow()\n    }\n}\n\n/**\n * Returns the context of the current coroutine.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"WRONG_MODIFIER_TARGET\")\n@InlineOnly\npublic suspend inline val coroutineContext: CoroutineContext\n    get() {\n        throw NotImplementedError(\"Implemented as intrinsic\")\n    }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines.intrinsics\n\nimport kotlin.coroutines.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Starts an unintercepted coroutine without a receiver and with result type [T] and executes it until its first suspension.\n * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.\n * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.\n *\n * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might\n * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation\n * context is established.\n *\n * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended\n * coroutine using a reference to the suspending function.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic actual inline fun <T> (suspend () -> T).startCoroutineUninterceptedOrReturn(\n    completion: Continuation<T>\n): Any? = this.asDynamic()(completion, false)\n\n/**\n * Starts an unintercepted coroutine with receiver type [R] and result type [T] and executes it until its first suspension.\n * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.\n * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.\n *\n * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might\n * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation\n * context is established.\n *\n * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended\n * coroutine using a reference to the suspending function.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic actual inline fun <R, T> (suspend R.() -> T).startCoroutineUninterceptedOrReturn(\n    receiver: R,\n    completion: Continuation<T>\n): Any? = this.asDynamic()(receiver, completion, false)\n\n@InlineOnly\ninternal actual inline fun <R, P, T> (suspend R.(P) -> T).startCoroutineUninterceptedOrReturn(\n    receiver: R,\n    param: P,\n    completion: Continuation<T>\n): Any? = this.asDynamic()(receiver, param, completion, false)\n\n/**\n * Creates unintercepted coroutine without receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * This function returns unintercepted continuation.\n * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the\n * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * Note that [completion] of this function may get invoked in an arbitrary context.\n *\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of\n * both the coroutine and [completion] happens in the invocation context established by\n * [ContinuationInterceptor].\n *\n * Repeated invocation of any resume function on the resulting continuation corrupts the\n * state machine of the coroutine and may result in arbitrary behaviour or exception.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <T> (suspend () -> T).createCoroutineUnintercepted(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    // Kotlin/JS suspend lambdas have an extra parameter `suspended`\n    if (this.asDynamic().length == 2) {\n        // When `suspended` is true the continuation is created, but not executed\n        this.asDynamic()(completion, true)\n    } else {\n        createCoroutineFromSuspendFunction(completion) {\n            this.asDynamic()(completion)\n        }\n    }\n\n/**\n * Creates unintercepted coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * This function returns unintercepted continuation.\n * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the\n * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * Note that [completion] of this function may get invoked in an arbitrary context.\n *\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of\n * both the coroutine and [completion] happens in the invocation context established by\n * [ContinuationInterceptor].\n *\n * Repeated invocation of any resume function on the resulting continuation corrupts the\n * state machine of the coroutine and may result in arbitrary behaviour or exception.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <R, T> (suspend R.() -> T).createCoroutineUnintercepted(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    // Kotlin/JS suspend lambdas have an extra parameter `suspended`\n    if (this.asDynamic().length == 3) {\n        // When `suspended` is true the continuation is created, but not executed\n        this.asDynamic()(receiver, completion, true)\n    } else {\n        createCoroutineFromSuspendFunction(completion) {\n            this.asDynamic()(receiver, completion)\n        }\n    }\n\n/**\n * Intercepts this continuation with [ContinuationInterceptor].\n *\n * This function shall be used on the immediate result of [createCoroutineUnintercepted] or [suspendCoroutineUninterceptedOrReturn],\n * in which case it checks for [ContinuationInterceptor] in the continuation's [context][Continuation.context],\n * invokes [ContinuationInterceptor.interceptContinuation], caches and returns the result.\n *\n * If this function is invoked on other [Continuation] instances it returns `this` continuation unchanged.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <T> Continuation<T>.intercepted(): Continuation<T> =\n    (this as? CoroutineImpl)?.intercepted() ?: this\n\n\nprivate inline fun <T> createCoroutineFromSuspendFunction(\n    completion: Continuation<T>,\n    crossinline block: () -> Any?\n): Continuation<Unit> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return object : CoroutineImpl(completion as Continuation<Any?>) {\n        override fun doResume(): Any? {\n            exception?.let { throw it }\n            return block()\n        }\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n// NOTE: Do not author your exceptions as they are written in this file, instead use this template:\n/*\npublic open class MyException : Exception {\n    constructor() : super()\n    constructor(message: String?) : super(message)\n    constructor(message: String?, cause: Throwable?) : super(message, cause)\n    constructor(cause: Throwable?) : super(cause)\n}\n*/\n\n\n// TODO: remove primary constructors, make all secondary KT-22055\n\n@Suppress(\"USELESS_ELVIS_RIGHT_IS_NULL\")\npublic actual open class Error actual constructor(message: String?, cause: Throwable?) : Throwable(message, cause ?: null) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\n@Suppress(\"USELESS_ELVIS_RIGHT_IS_NULL\")\npublic actual open class Exception actual constructor(message: String?, cause: Throwable?) : Throwable(message, cause ?: null) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class RuntimeException actual constructor(message: String?, cause: Throwable?) : Exception(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IllegalArgumentException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IllegalStateException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IndexOutOfBoundsException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class ConcurrentModificationException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class UnsupportedOperationException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\n\npublic actual open class NumberFormatException actual constructor(message: String?) : IllegalArgumentException(message) {\n    actual constructor() : this(null)\n}\n\n\npublic actual open class NullPointerException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class ClassCastException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class AssertionError\n@SinceKotlin(\"1.4\")\nconstructor(message: String?, cause: Throwable?) : Error(message, cause) {\n    actual constructor() : this(null)\n    constructor(message: String?) : this(message, null)\n    actual constructor(message: Any?) : this(message.toString(), message as? Throwable)\n}\n\npublic actual open class NoSuchElementException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\n@SinceKotlin(\"1.3\")\npublic actual open class ArithmeticException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class NoWhenBranchMatchedException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class UninitializedPropertyAccessException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNUSED_PARAMETER\", \"NOTHING_TO_INLINE\")\n\npackage kotlin\n\n/**\n * Returns an empty array of the specified type [T].\n */\npublic inline fun <T> emptyArray(): Array<T> = js(\"[]\")\n\n@library\npublic fun <T> arrayOf(vararg elements: T): Array<T> = definedExternally\n\n@library\npublic fun doubleArrayOf(vararg elements: Double): DoubleArray = definedExternally\n\n@library\npublic fun floatArrayOf(vararg elements: Float): FloatArray = definedExternally\n\n@library\npublic fun longArrayOf(vararg elements: Long): LongArray = definedExternally\n\n@library\npublic fun intArrayOf(vararg elements: Int): IntArray = definedExternally\n\n@library\npublic fun charArrayOf(vararg elements: Char): CharArray = definedExternally\n\n@library\npublic fun shortArrayOf(vararg elements: Short): ShortArray = definedExternally\n\n@library\npublic fun byteArrayOf(vararg elements: Byte): ByteArray = definedExternally\n\n@library\npublic fun booleanArrayOf(vararg elements: Boolean): BooleanArray = definedExternally\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n */\npublic actual fun <T> lazy(initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [mode] parameter is ignored. */\npublic actual fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [lock] parameter is ignored.\n */\npublic actual fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n\ninternal fun fillFrom(src: dynamic, dst: dynamic): dynamic {\n    val srcLen: Int = src.length\n    val dstLen: Int = dst.length\n    var index: Int = 0\n    while (index < srcLen && index < dstLen) dst[index] = src[index++]\n    return dst\n}\n\n\ninternal fun arrayCopyResize(source: dynamic, newSize: Int, defaultValue: Any?): dynamic {\n    val result = source.slice(0, newSize)\n    copyArrayType(source, result)\n    var index: Int = source.length\n    if (newSize > index) {\n        result.length = newSize\n        while (index < newSize) result[index++] = defaultValue\n    }\n    return result\n}\n\ninternal fun <T> arrayPlusCollection(array: dynamic, collection: Collection<T>): dynamic {\n    val result = array.slice()\n    result.length += collection.size\n    copyArrayType(array, result)\n    var index: Int = array.length\n    for (element in collection) result[index++] = element\n    return result\n}\n\ninternal fun <T> fillFromCollection(dst: dynamic, startIndex: Int, collection: Collection<T>): dynamic {\n    var index = startIndex\n    for (element in collection) dst[index++] = element\n    return dst\n}\n\ninternal inline fun copyArrayType(from: dynamic, to: dynamic) {\n    if (from.`$type$` !== undefined) {\n        to.`$type$` = from.`$type$`\n    }\n}\n\ninternal inline fun jsIsType(obj: dynamic, jsClass: dynamic) = js(\"Kotlin\").isType(obj, jsClass)","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * Returns a string representation of this [Long] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Long.toString(radix: Int): String = asDynamic().toString(checkRadix(radix))","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            @Suppress(\"USELESS_CAST\")\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            @Suppress(\"USELESS_CAST\")\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    return this.contentDeepEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The specified arrays are also considered deeply equal if both are `null`.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    return this.contentDeepHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>?.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    return this.contentDeepToString()\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>?.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray?.contentEquals(other: IntArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray?.contentEquals(other: LongArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray?.contentEquals(other: CharArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun IntArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun LongArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun CharArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ByteArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ShortArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun IntArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun LongArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun FloatArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun DoubleArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun BooleanArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun CharArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun ByteArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun ShortArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun IntArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun LongArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun FloatArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun CharArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T : Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this, fromIndex, toIndex, naturalOrder())\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ByteArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ShortArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<IntArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this.unsafeCast<Array<Long>>(), fromIndex, toIndex, naturalOrder())\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<FloatArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<DoubleArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<CharArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Sorts a range in the array in-place with the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this, fromIndex, toIndex, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Reverses elements in the list in-place.\n */\npublic actual fun <T> MutableList<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E> {\n    return ArrayList<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E> {\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(capacity: Int, builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n\n/**\n * JS map and set implementations do not make use of capacities or load factors.\n */\n@PublishedApi\ninternal actual fun mapCapacity(expectedSize: Int) = expectedSize\n\n/**\n * Checks a collection builder function capacity argument.\n * In JS no validation is made in Map/Set constructor yet.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal fun checkBuilderCapacity(capacity: Int) {\n    require(capacity >= 0) { \"capacity must be non-negative.\" }\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableCollection] interface.\n *\n * @param E the type of elements contained in the collection. The collection is invariant in its element type.\n */\npublic actual abstract class AbstractMutableCollection<E> protected actual constructor() : AbstractCollection<E>(), MutableCollection<E> {\n\n    actual abstract override fun add(element: E): Boolean\n\n    actual override fun remove(element: E): Boolean {\n        checkIsMutable()\n        val iterator = iterator()\n        while (iterator.hasNext()) {\n            if (iterator.next() == element) {\n                iterator.remove()\n                return true\n            }\n        }\n        return false\n    }\n\n    actual override fun addAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        var modified = false\n        for (element in elements) {\n            if (add(element)) modified = true\n        }\n        return modified\n    }\n\n    actual override fun removeAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return (this as MutableIterable<E>).removeAll { it in elements }\n    }\n\n    actual override fun retainAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return (this as MutableIterable<E>).removeAll { it !in elements }\n    }\n\n    actual override fun clear(): Unit {\n        checkIsMutable()\n        val iterator = this.iterator()\n        while (iterator.hasNext()) {\n            iterator.next()\n            iterator.remove()\n        }\n    }\n\n    @JsName(\"toJSON\")\n    open fun toJSON(): Any = this.toArray()\n\n\n    /**\n     * This method is called every time when a mutating method is called on this mutable collection.\n     * Mutable collections that are built (frozen) must throw `UnsupportedOperationException`.\n     */\n    internal open fun checkIsMutable(): Unit { }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractList\n * Copyright 2007 Google Inc.\n*/\n\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableList] interface.\n *\n * @param E the type of elements contained in the list. The list is invariant in its element type.\n */\npublic actual abstract class AbstractMutableList<E> protected actual constructor() : AbstractMutableCollection<E>(), MutableList<E> {\n    protected var modCount: Int = 0\n\n    abstract override fun add(index: Int, element: E): Unit\n    abstract override fun removeAt(index: Int): E\n    abstract override fun set(index: Int, element: E): E\n\n    /**\n     * Adds the specified element to the end of this list.\n     *\n     * @return `true` because the list is always modified as the result of this operation.\n     */\n    actual override fun add(element: E): Boolean {\n        checkIsMutable()\n        add(size, element)\n        return true\n    }\n\n    actual override fun addAll(index: Int, elements: Collection<E>): Boolean {\n        checkIsMutable()\n        var _index = index\n        var changed = false\n        for (e in elements) {\n            add(_index++, e)\n            changed = true\n        }\n        return changed\n    }\n\n    actual override fun clear() {\n        checkIsMutable()\n        removeRange(0, size)\n    }\n\n    actual override fun removeAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return removeAll { it in elements }\n    }\n\n    actual override fun retainAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return removeAll { it !in elements }\n    }\n\n\n    actual override fun iterator(): MutableIterator<E> = IteratorImpl()\n\n    actual override fun contains(element: E): Boolean = indexOf(element) >= 0\n\n    actual override fun indexOf(element: E): Int {\n        for (index in 0..lastIndex) {\n            if (get(index) == element) {\n                return index\n            }\n        }\n        return -1\n    }\n\n    actual override fun lastIndexOf(element: E): Int {\n        for (index in lastIndex downTo 0) {\n            if (get(index) == element) {\n                return index\n            }\n        }\n        return -1\n    }\n\n    actual override fun listIterator(): MutableListIterator<E> = listIterator(0)\n    actual override fun listIterator(index: Int): MutableListIterator<E> = ListIteratorImpl(index)\n\n\n    actual override fun subList(fromIndex: Int, toIndex: Int): MutableList<E> = SubList(this, fromIndex, toIndex)\n\n    /**\n     * Removes the range of elements from this list starting from [fromIndex] and ending with but not including [toIndex].\n     */\n    protected open fun removeRange(fromIndex: Int, toIndex: Int) {\n        val iterator = listIterator(fromIndex)\n        repeat(toIndex - fromIndex) {\n            iterator.next()\n            iterator.remove()\n        }\n    }\n\n    /**\n     * Compares this list with another list instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [List] of the same size, which contains the same elements in the same order.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is List<*>) return false\n\n        return AbstractList.orderedEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this list.\n     */\n    override fun hashCode(): Int = AbstractList.orderedHashCode(this)\n\n\n    private open inner class IteratorImpl : MutableIterator<E> {\n        /** the index of the item that will be returned on the next call to [next]`()` */\n        protected var index = 0\n        /** the index of the item that was returned on the previous call to [next]`()`\n         * or [ListIterator.previous]`()` (for `ListIterator`),\n         * -1 if no such item exists\n         */\n        protected var last = -1\n\n        override fun hasNext(): Boolean = index < size\n\n        override fun next(): E {\n            if (!hasNext()) throw NoSuchElementException()\n            last = index++\n            return get(last)\n        }\n\n        override fun remove() {\n            check(last != -1) { \"Call next() or previous() before removing element from the iterator.\" }\n\n            removeAt(last)\n            index = last\n            last = -1\n        }\n    }\n\n    /**\n     * Implementation of `MutableListIterator` for abstract lists.\n     */\n    private inner class ListIteratorImpl(index: Int) : IteratorImpl(), MutableListIterator<E> {\n\n        init {\n            AbstractList.checkPositionIndex(index, this@AbstractMutableList.size)\n            this.index = index\n        }\n\n        override fun hasPrevious(): Boolean = index > 0\n\n        override fun nextIndex(): Int = index\n\n        override fun previous(): E {\n            if (!hasPrevious()) throw NoSuchElementException()\n\n            last = --index\n            return get(last)\n        }\n\n        override fun previousIndex(): Int = index - 1\n\n        override fun add(element: E) {\n            add(index, element)\n            index++\n            last = -1\n        }\n\n        override fun set(element: E) {\n            check(last != -1) { \"Call next() or previous() before updating element value with the iterator.\" }\n            set(last, element)\n        }\n    }\n\n    private class SubList<E>(private val list: AbstractMutableList<E>, private val fromIndex: Int, toIndex: Int) : AbstractMutableList<E>(), RandomAccess {\n        private var _size: Int = 0\n\n        init {\n            AbstractList.checkRangeIndexes(fromIndex, toIndex, list.size)\n            this._size = toIndex - fromIndex\n        }\n\n        override fun add(index: Int, element: E) {\n            AbstractList.checkPositionIndex(index, _size)\n\n            list.add(fromIndex + index, element)\n            _size++\n        }\n\n        override fun get(index: Int): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            return list[fromIndex + index]\n        }\n\n        override fun removeAt(index: Int): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            val result = list.removeAt(fromIndex + index)\n            _size--\n            return result\n        }\n\n        override fun set(index: Int, element: E): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            return list.set(fromIndex + index, element)\n        }\n\n        override val size: Int get() = _size\n\n        internal override fun checkIsMutable(): Unit = list.checkIsMutable()\n    }\n\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractMap\n * Copyright 2007 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableMap] interface.\n *\n * The implementor is required to implement [entries] property, which should return mutable set of map entries, and [put] function.\n *\n * @param K the type of map keys. The map is invariant in its key type.\n * @param V the type of map values. The map is invariant in its value type.\n */\npublic actual abstract class AbstractMutableMap<K, V> protected actual constructor() : AbstractMap<K, V>(), MutableMap<K, V> {\n\n    /**\n     * A mutable [Map.Entry] shared by several [Map] implementations.\n     */\n    internal open class SimpleEntry<K, V>(override val key: K, value: V) : MutableMap.MutableEntry<K, V> {\n        constructor(entry: Map.Entry<K, V>) : this(entry.key, entry.value)\n\n        private var _value = value\n\n        override val value: V get() = _value\n\n        override fun setValue(newValue: V): V {\n            // Should check if the map containing this entry is mutable.\n            // However, to not increase entry memory footprint it might be worthwhile not to check it here and\n            // force subclasses that implement `build()` (freezing) operation to implement their own `MutableEntry`.\n//            this@AbstractMutableMap.checkIsMutable()\n            val oldValue = this._value\n            this._value = newValue\n            return oldValue\n        }\n\n        override fun hashCode(): Int = entryHashCode(this)\n        override fun toString(): String = entryToString(this)\n        override fun equals(other: Any?): Boolean = entryEquals(this, other)\n\n    }\n\n    actual override fun clear() {\n        entries.clear()\n    }\n\n    private var _keys: MutableSet<K>? = null\n    actual override val keys: MutableSet<K>\n        get() {\n            if (_keys == null) {\n                _keys = object : AbstractMutableSet<K>() {\n                    override fun add(element: K): Boolean = throw UnsupportedOperationException(\"Add is not supported on keys\")\n                    override fun clear() {\n                        this@AbstractMutableMap.clear()\n                    }\n\n                    override operator fun contains(element: K): Boolean = containsKey(element)\n\n                    override operator fun iterator(): MutableIterator<K> {\n                        val entryIterator = entries.iterator()\n                        return object : MutableIterator<K> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): K = entryIterator.next().key\n                            override fun remove() = entryIterator.remove()\n                        }\n                    }\n\n                    override fun remove(element: K): Boolean {\n                        checkIsMutable()\n                        if (containsKey(element)) {\n                            this@AbstractMutableMap.remove(element)\n                            return true\n                        }\n                        return false\n                    }\n\n                    override val size: Int get() = this@AbstractMutableMap.size\n\n                    override fun checkIsMutable(): Unit = this@AbstractMutableMap.checkIsMutable()\n                }\n            }\n            return _keys!!\n        }\n\n    actual abstract override fun put(key: K, value: V): V?\n\n    actual override fun putAll(from: Map<out K, V>) {\n        checkIsMutable()\n        for ((key, value) in from) {\n            put(key, value)\n        }\n    }\n\n    private var _values: MutableCollection<V>? = null\n    actual override val values: MutableCollection<V>\n        get() {\n            if (_values == null) {\n                _values = object : AbstractMutableCollection<V>() {\n                    override fun add(element: V): Boolean = throw UnsupportedOperationException(\"Add is not supported on values\")\n                    override fun clear() = this@AbstractMutableMap.clear()\n\n                    override operator fun contains(element: V): Boolean = containsValue(element)\n\n                    override operator fun iterator(): MutableIterator<V> {\n                        val entryIterator = entries.iterator()\n                        return object : MutableIterator<V> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): V = entryIterator.next().value\n                            override fun remove() = entryIterator.remove()\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMutableMap.size\n\n                    // TODO: should we implement them this way? Currently it's unspecified in JVM\n                    override fun equals(other: Any?): Boolean {\n                        if (this === other) return true\n                        if (other !is Collection<*>) return false\n                        return AbstractList.orderedEquals(this, other)\n                    }\n\n                    override fun hashCode(): Int = AbstractList.orderedHashCode(this)\n\n                    override fun checkIsMutable(): Unit = this@AbstractMutableMap.checkIsMutable()\n                }\n            }\n            return _values!!\n        }\n\n    actual override fun remove(key: K): V? {\n        checkIsMutable()\n        val iter = entries.iterator()\n        while (iter.hasNext()) {\n            val entry = iter.next()\n            val k = entry.key\n            if (key == k) {\n                val value = entry.value\n                iter.remove()\n                return value\n            }\n        }\n        return null\n    }\n\n\n    /**\n     * This method is called every time when a mutating method is called on this mutable map.\n     * Mutable maps that are built (frozen) must throw `UnsupportedOperationException`.\n     */\n    internal open fun checkIsMutable(): Unit {}\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableSet] interface.\n *\n * @param E the type of elements contained in the set. The set is invariant in its element type.\n */\npublic actual abstract class AbstractMutableSet<E> protected actual constructor() : AbstractMutableCollection<E>(), MutableSet<E> {\n\n    /**\n     * Compares this set with another set instance with the unordered structural equality.\n     *\n     * @return `true`, if [other] instance is a [Set] of the same size, all elements of which are contained in this set.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Set<*>) return false\n        return AbstractSet.setEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this set.\n     */\n    override fun hashCode(): Int = AbstractSet.unorderedHashCode(this)\n\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a [MutableList] implementation, which uses a resizable array as its backing storage.\n *\n * This implementation doesn't provide a way to manage capacity, as backing JS array is resizeable itself.\n * There is no speed advantage to pre-allocating array sizes in JavaScript, so this implementation does not include any of the\n * capacity and \"growth increment\" concepts.\n */\npublic actual open class ArrayList<E> internal constructor(private var array: Array<Any?>) : AbstractMutableList<E>(), MutableList<E>, RandomAccess {\n    private var isReadOnly: Boolean = false\n\n    /**\n     * Creates an empty [ArrayList].\n     */\n    public actual constructor() : this(emptyArray()) {}\n\n    /**\n     * Creates an empty [ArrayList].\n     * @param initialCapacity initial capacity (ignored)\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual constructor(initialCapacity: Int = 0) : this(emptyArray()) {}\n\n    /**\n     * Creates an [ArrayList] filled from the [elements] collection.\n     */\n    public actual constructor(elements: Collection<E>) : this(elements.toTypedArray<Any?>()) {}\n\n    @PublishedApi\n    internal fun build(): List<E> {\n        checkIsMutable()\n        isReadOnly = true\n        return this\n    }\n\n    /** Does nothing in this ArrayList implementation. */\n    public actual fun trimToSize() {}\n\n    /** Does nothing in this ArrayList implementation. */\n    public actual fun ensureCapacity(minCapacity: Int) {}\n\n    actual override val size: Int get() = array.size\n    @Suppress(\"UNCHECKED_CAST\")\n    actual override fun get(index: Int): E = array[rangeCheck(index)] as E\n    actual override fun set(index: Int, element: E): E {\n        checkIsMutable()\n        rangeCheck(index)\n        @Suppress(\"UNCHECKED_CAST\")\n        return array[index].apply { array[index] = element } as E\n    }\n\n    actual override fun add(element: E): Boolean {\n        checkIsMutable()\n        array.asDynamic().push(element)\n        modCount++\n        return true\n    }\n\n    actual override fun add(index: Int, element: E): Unit {\n        checkIsMutable()\n        array.asDynamic().splice(insertionRangeCheck(index), 0, element)\n        modCount++\n    }\n\n    actual override fun addAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        if (elements.isEmpty()) return false\n\n        array += elements.toTypedArray<Any?>()\n        modCount++\n        return true\n    }\n\n    actual override fun addAll(index: Int, elements: Collection<E>): Boolean {\n        checkIsMutable()\n        insertionRangeCheck(index)\n\n        if (index == size) return addAll(elements)\n        if (elements.isEmpty()) return false\n        when (index) {\n            size -> return addAll(elements)\n            0 -> array = elements.toTypedArray<Any?>() + array\n            else -> array = array.copyOfRange(0, index).asDynamic().concat(elements.toTypedArray<Any?>(), array.copyOfRange(index, size))\n        }\n\n        modCount++\n        return true\n    }\n\n    actual override fun removeAt(index: Int): E {\n        checkIsMutable()\n        rangeCheck(index)\n        modCount++\n        return if (index == lastIndex)\n            array.asDynamic().pop()\n        else\n            array.asDynamic().splice(index, 1)[0]\n    }\n\n    actual override fun remove(element: E): Boolean {\n        checkIsMutable()\n        for (index in array.indices) {\n            if (array[index] == element) {\n                array.asDynamic().splice(index, 1)\n                modCount++\n                return true\n            }\n        }\n        return false\n    }\n\n    override fun removeRange(fromIndex: Int, toIndex: Int) {\n        checkIsMutable()\n        modCount++\n        array.asDynamic().splice(fromIndex, toIndex - fromIndex)\n    }\n\n    actual override fun clear() {\n        checkIsMutable()\n        array = emptyArray()\n        modCount++\n    }\n\n\n    actual override fun indexOf(element: E): Int = array.indexOf(element)\n\n    actual override fun lastIndexOf(element: E): Int = array.lastIndexOf(element)\n\n    override fun toString() = arrayToString(array)\n    override fun toArray(): Array<Any?> = js(\"[]\").slice.call(array)\n\n\n    internal override fun checkIsMutable() {\n        if (isReadOnly) throw UnsupportedOperationException()\n    }\n\n    private fun rangeCheck(index: Int) = index.apply {\n        AbstractList.checkElementIndex(index, size)\n    }\n\n    private fun insertionRangeCheck(index: Int) = index.apply {\n        AbstractList.checkPositionIndex(index, size)\n    }\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\ninternal fun <T> sortArrayWith(array: Array<out T>, comparison: (T, T) -> Int) {\n    if (getStableSortingIsSupported()) {\n        array.asDynamic().sort(comparison)\n    } else {\n        mergeSort(array.unsafeCast<Array<T>>(), 0, array.lastIndex, Comparator(comparison))\n    }\n}\n\ninternal fun <T> sortArrayWith(array: Array<out T>, comparator: Comparator<in T>) {\n    if (getStableSortingIsSupported()) {\n        val comparison = { a: T, b: T -> comparator.compare(a, b) }\n        array.asDynamic().sort(comparison)\n    } else {\n        mergeSort(array.unsafeCast<Array<T>>(), 0, array.lastIndex, comparator)\n    }\n}\n\ninternal fun <T> sortArrayWith(array: Array<out T>, fromIndex: Int, toIndex: Int, comparator: Comparator<in T>) {\n    if (fromIndex < toIndex - 1) {\n        mergeSort(array.unsafeCast<Array<T>>(), fromIndex, toIndex - 1, comparator)\n    }\n}\n\ninternal fun <T : Comparable<T>> sortArray(array: Array<out T>) {\n    if (getStableSortingIsSupported()) {\n        val comparison = { a: T, b: T -> a.compareTo(b) }\n        array.asDynamic().sort(comparison)\n    } else {\n        mergeSort(array.unsafeCast<Array<T>>(), 0, array.lastIndex, naturalOrder())\n    }\n}\n\nprivate var _stableSortingIsSupported: Boolean? = null\nprivate fun getStableSortingIsSupported(): Boolean {\n    _stableSortingIsSupported?.let { return it }\n    _stableSortingIsSupported = false\n\n    val array = js(\"[]\").unsafeCast<Array<Int>>()\n    // known implementations may use stable sort for arrays of up to 512 elements\n    // so we create slightly more elements to test stability\n    for (index in 0 until 600) array.asDynamic().push(index)\n    val comparison = { a: Int, b: Int -> (a and 3) - (b and 3) }\n    array.asDynamic().sort(comparison)\n    for (index in 1 until array.size) {\n        val a = array[index - 1]\n        val b = array[index]\n        if ((a and 3) == (b and 3) && a >= b) return false\n    }\n    _stableSortingIsSupported = true\n    return true\n}\n\n\nprivate fun <T> mergeSort(array: Array<T>, start: Int, endInclusive: Int, comparator: Comparator<in T>) {\n    val buffer = arrayOfNulls<Any?>(array.size).unsafeCast<Array<T>>()\n    val result = mergeSort(array, buffer, start, endInclusive, comparator)\n    if (result !== array) {\n        for (i in start..endInclusive) array[i] = result[i]\n    }\n}\n\n// Both start and end are inclusive indices.\nprivate fun <T> mergeSort(array: Array<T>, buffer: Array<T>, start: Int, end: Int, comparator: Comparator<in T>): Array<T> {\n    if (start == end) {\n        return array\n    }\n\n    val median = (start + end) / 2\n    val left = mergeSort(array, buffer, start, median, comparator)\n    val right = mergeSort(array, buffer, median + 1, end, comparator)\n\n    val target = if (left === buffer) array else buffer\n\n    // Merge.\n    var leftIndex = start\n    var rightIndex = median + 1\n    for (i in start..end) {\n        when {\n            leftIndex <= median && rightIndex <= end -> {\n                val leftValue = left[leftIndex]\n                val rightValue = right[rightIndex]\n\n                if (comparator.compare(leftValue, rightValue) <= 0) {\n                    target[i] = leftValue\n                    leftIndex++\n                } else {\n                    target[i] = rightValue\n                    rightIndex++\n                }\n            }\n            leftIndex <= median -> {\n                target[i] = left[leftIndex]\n                leftIndex++\n            }\n            else /* rightIndex <= end */ -> {\n                target[i] = right[rightIndex]\n                rightIndex++\n                Unit  // TODO: Fix KT-31506\n            }\n        }\n    }\n\n    return target\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\ninternal interface EqualityComparator {\n    /**\n     * Subclasses must override to return a value indicating\n     * whether or not two keys or values are equal.\n     */\n    abstract fun equals(value1: Any?, value2: Any?): Boolean\n\n    /**\n     * Subclasses must override to return the hash code of a given key.\n     */\n    abstract fun getHashCode(value: Any?): Int\n\n\n    object HashCode : EqualityComparator {\n        override fun equals(value1: Any?, value2: Any?): Boolean = value1 == value2\n\n        override fun getHashCode(value: Any?): Int = value?.hashCode() ?: 0\n    }\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\npublic actual fun interface Comparator<T> {\n    @JsName(\"compare\")\n    public actual fun compare(a: T, b: T): Int\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT AbstractHashMap\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * Hash table based implementation of the [MutableMap] interface.\n *\n * This implementation makes no guarantees regarding the order of enumeration of [keys], [values] and [entries] collections.\n */\n// Classes that extend HashMap and implement `build()` (freezing) operation\n// have to make sure mutating methods check `checkIsMutable`.\npublic actual open class HashMap<K, V> : AbstractMutableMap<K, V>, MutableMap<K, V> {\n\n    private inner class EntrySet : AbstractMutableSet<MutableEntry<K, V>>() {\n\n        override fun add(element: MutableEntry<K, V>): Boolean = throw UnsupportedOperationException(\"Add is not supported on entries\")\n        override fun clear() {\n            this@HashMap.clear()\n        }\n\n        override operator fun contains(element: MutableEntry<K, V>): Boolean = containsEntry(element)\n\n        override operator fun iterator(): MutableIterator<MutableEntry<K, V>> = internalMap.iterator()\n\n        override fun remove(element: MutableEntry<K, V>): Boolean {\n            if (contains(element)) {\n                this@HashMap.remove(element.key)\n                return true\n            }\n            return false\n        }\n\n        override val size: Int get() = this@HashMap.size\n    }\n\n\n    /**\n     * Internal implementation of the map: either string-based or hashcode-based.\n     */\n    private val internalMap: InternalMap<K, V>\n\n    private val equality: EqualityComparator\n\n    internal constructor(internalMap: InternalMap<K, V>) : super() {\n        this.internalMap = internalMap\n        this.equality = internalMap.equality\n    }\n\n    /**\n     * Constructs an empty [HashMap] instance.\n     */\n    actual constructor() : this(InternalHashCodeMap(EqualityComparator.HashCode))\n\n    /**\n     * Constructs an empty [HashMap] instance.\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) : this() {\n        // This implementation of HashMap has no need of load factors or capacities.\n        require(initialCapacity >= 0) { \"Negative initial capacity: $initialCapacity\" }\n        require(loadFactor >= 0) { \"Non-positive load factor: $loadFactor\" }\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n\n    /**\n     * Constructs an instance of [HashMap] filled with the contents of the specified [original] map.\n     */\n    actual constructor(original: Map<out K, V>) : this() {\n        this.putAll(original)\n    }\n\n    actual override fun clear() {\n        internalMap.clear()\n//        structureChanged(this)\n    }\n\n    actual override fun containsKey(key: K): Boolean = internalMap.contains(key)\n\n    actual override fun containsValue(value: V): Boolean = internalMap.any { equality.equals(it.value, value) }\n\n    private var _entries: MutableSet<MutableMap.MutableEntry<K, V>>? = null\n    actual override val entries: MutableSet<MutableMap.MutableEntry<K, V>>\n        get() {\n            if (_entries == null) {\n                _entries = createEntrySet()\n            }\n            return _entries!!\n        }\n\n    protected open fun createEntrySet(): MutableSet<MutableMap.MutableEntry<K, V>> = EntrySet()\n\n    actual override operator fun get(key: K): V? = internalMap.get(key)\n\n    actual override fun put(key: K, value: V): V? = internalMap.put(key, value)\n\n    actual override fun remove(key: K): V? = internalMap.remove(key)\n\n    actual override val size: Int get() = internalMap.size\n\n}\n\n/**\n * Constructs the specialized implementation of [HashMap] with [String] keys, which stores the keys as properties of\n * JS object without hashing them.\n */\npublic fun <V> stringMapOf(vararg pairs: Pair<String, V>): HashMap<String, V> {\n    return HashMap<String, V>(InternalStringMap(EqualityComparator.HashCode)).apply { putAll(pairs) }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT HashSet\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * The implementation of the [MutableSet] interface, backed by a [HashMap] instance.\n */\n// Classes that extend HashSet and implement `build()` (freezing) operation\n// have to make sure mutating methods check `checkIsMutable`.\npublic actual open class HashSet<E> : AbstractMutableSet<E>, MutableSet<E> {\n\n    internal val map: HashMap<E, Any>\n\n    /**\n     * Constructs a new empty [HashSet].\n     */\n    actual constructor() {\n        map = HashMap<E, Any>()\n    }\n\n    /**\n     * Constructs a new [HashSet] filled with the elements of the specified collection.\n     */\n    actual constructor(elements: Collection<E>) {\n        map = HashMap<E, Any>(elements.size)\n        addAll(elements)\n    }\n\n    /**\n     * Constructs a new empty [HashSet].\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) {\n        map = HashMap<E, Any>(initialCapacity, loadFactor)\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    /**\n     * Protected constructor to specify the underlying map. This is used by\n     * LinkedHashSet.\n\n     * @param map underlying map to use.\n     */\n    internal constructor(map: HashMap<E, Any>) {\n        this.map = map\n    }\n\n    actual override fun add(element: E): Boolean {\n        val old = map.put(element, this)\n        return old == null\n    }\n\n    actual override fun clear() {\n        map.clear()\n    }\n\n//    public override fun clone(): Any {\n//        return HashSet<E>(this)\n//    }\n\n    actual override operator fun contains(element: E): Boolean = map.containsKey(element)\n\n    actual override fun isEmpty(): Boolean = map.isEmpty()\n\n    actual override fun iterator(): MutableIterator<E> = map.keys.iterator()\n\n    actual override fun remove(element: E): Boolean = map.remove(element) != null\n\n    actual override val size: Int get() = map.size\n\n}\n\n/**\n * Creates a new instance of the specialized implementation of [HashSet] with the specified [String] elements,\n * which elements the keys as properties of JS object without hashing them.\n */\npublic fun stringSetOf(vararg elements: String): HashSet<String> {\n    return HashSet(stringMapOf<Any>()).apply { addAll(elements) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT InternalHashCodeMap\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\nimport kotlin.collections.AbstractMutableMap.SimpleEntry\n\n/**\n * A simple wrapper around JavaScriptObject to provide [java.util.Map]-like semantics for any\n * key type.\n *\n *\n * Implementation notes:\n *\n *\n * A key's hashCode is the index in backingMap which should contain that key. Since several keys may\n * have the same hash, each value in hashCodeMap is actually an array containing all entries whose\n * keys share the same hash.\n */\ninternal class InternalHashCodeMap<K, V>(override val equality: EqualityComparator) : InternalMap<K, V> {\n\n    private var backingMap: dynamic = createJsMap()\n    override var size: Int = 0\n        private set\n\n    override fun put(key: K, value: V): V? {\n        val hashCode = equality.getHashCode(key)\n        val chainOrEntry = getChainOrEntryOrNull(hashCode)\n        if (chainOrEntry == null) {\n            // This is a new chain, put it to the map.\n            backingMap[hashCode] = SimpleEntry(key, value)\n        } else {\n            if (chainOrEntry !is Array<*>) {\n                // It is an entry\n                val entry: SimpleEntry<K, V> = chainOrEntry\n                if (equality.equals(entry.key, key)) {\n                    return entry.setValue(value)\n                } else {\n                    backingMap[hashCode] = arrayOf(entry, SimpleEntry(key, value))\n                    size++\n                    return null\n                }\n            } else {\n                // Chain already exists, perhaps key also exists.\n                val chain: Array<MutableEntry<K, V>> = chainOrEntry\n                val entry = chain.findEntryInChain(key)\n                if (entry != null) {\n                    return entry.setValue(value)\n                }\n                chain.asDynamic().push(SimpleEntry(key, value))\n            }\n        }\n        size++\n//        structureChanged(host)\n        return null\n    }\n\n    override fun remove(key: K): V? {\n        val hashCode = equality.getHashCode(key)\n        val chainOrEntry = getChainOrEntryOrNull(hashCode) ?: return null\n        if (chainOrEntry !is Array<*>) {\n            val entry: MutableEntry<K, V> = chainOrEntry\n            if (equality.equals(entry.key, key)) {\n                jsDeleteProperty(backingMap, hashCode)\n                size--\n                return entry.value\n            } else {\n                return null\n            }\n        } else {\n            val chain: Array<MutableEntry<K, V>> = chainOrEntry\n            for (index in chain.indices) {\n                val entry = chain[index]\n                if (equality.equals(key, entry.key)) {\n                    if (chain.size == 1) {\n                        chain.asDynamic().length = 0\n                        // remove the whole array\n                        jsDeleteProperty(backingMap, hashCode)\n                    } else {\n                        // splice out the entry we're removing\n                        chain.asDynamic().splice(index, 1)\n                    }\n                    size--\n//                structureChanged(host)\n                    return entry.value\n                }\n            }\n        }\n        return null\n    }\n\n    override fun clear() {\n        backingMap = createJsMap()\n        size = 0\n    }\n\n    override fun contains(key: K): Boolean = getEntry(key) != null\n\n    override fun get(key: K): V? = getEntry(key)?.value\n\n    private fun getEntry(key: K): MutableEntry<K, V>? {\n        val chainOrEntry = getChainOrEntryOrNull(equality.getHashCode(key)) ?: return null\n        if (chainOrEntry !is Array<*>) {\n            val entry: MutableEntry<K, V> = chainOrEntry\n            if (equality.equals(entry.key, key)) {\n                return entry\n            } else {\n                return null\n            }\n        } else {\n            val chain: Array<MutableEntry<K, V>> = chainOrEntry\n            return chain.findEntryInChain(key)\n        }\n    }\n\n    private fun Array<MutableEntry<K, V>>.findEntryInChain(key: K): MutableEntry<K, V>? =\n        firstOrNull { entry -> equality.equals(entry.key, key) }\n\n    override fun iterator(): MutableIterator<MutableEntry<K, V>> {\n\n        return object : MutableIterator<MutableEntry<K, V>> {\n            var state = -1 // -1 not ready, 0 - ready, 1 - done\n\n            val keys: Array<String> = js(\"Object\").keys(backingMap)\n            var keyIndex = -1\n\n            var chainOrEntry: dynamic = null\n            var isChain = false\n            var itemIndex = -1\n            var lastEntry: MutableEntry<K, V>? = null\n\n            private fun computeNext(): Int {\n                if (chainOrEntry != null && isChain) {\n                    val chainSize: Int = chainOrEntry.unsafeCast<Array<MutableEntry<K, V>>>().size\n                    if (++itemIndex < chainSize)\n                        return 0\n                }\n\n                if (++keyIndex < keys.size) {\n                    chainOrEntry = backingMap[keys[keyIndex]]\n                    isChain = chainOrEntry is Array<*>\n                    itemIndex = 0\n                    return 0\n                } else {\n                    chainOrEntry = null\n                    return 1\n                }\n            }\n\n            override fun hasNext(): Boolean {\n                if (state == -1)\n                    state = computeNext()\n                return state == 0\n            }\n\n            override fun next(): MutableEntry<K, V> {\n                if (!hasNext()) throw NoSuchElementException()\n                val lastEntry = if (isChain) {\n                    chainOrEntry.unsafeCast<Array<MutableEntry<K, V>>>()[itemIndex]\n                } else {\n                    chainOrEntry.unsafeCast<MutableEntry<K, V>>()\n                }\n                this.lastEntry = lastEntry\n                state = -1\n                return lastEntry\n            }\n\n            override fun remove() {\n                checkNotNull(lastEntry)\n                this@InternalHashCodeMap.remove(lastEntry!!.key)\n                lastEntry = null\n                // the chain being iterated just got modified by InternalHashCodeMap.remove\n                itemIndex--\n            }\n        }\n    }\n\n    private fun getChainOrEntryOrNull(hashCode: Int): dynamic {\n        val chainOrEntry = backingMap[hashCode]\n        return if (chainOrEntry === undefined) null else chainOrEntry\n    }\n\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT InternalStringMap\n * Copyright 2008 Google Inc.\n */\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * A simple wrapper around JavaScript Map for key type is string.\n *\n * Though this map is instantiated only with K=String, the K type is not fixed to String statically,\n * because we want to have it erased to Any? in order not to generate type-safe override bridges for\n * [get], [contains], [remove] etc, if they ever are generated.\n */\ninternal class InternalStringMap<K, V>(override val equality: EqualityComparator) : InternalMap<K, V> {\n\n    private var backingMap: dynamic = createJsMap()\n    override var size: Int = 0\n        private set\n\n//    /**\n//     * A mod count to track 'value' replacements in map to ensure that the 'value' that we have in the\n//     * iterator entry is guaranteed to be still correct.\n//     * This is to optimize for the common scenario where the values are not modified during\n//     * iterations where the entries are never stale.\n//     */\n//    private var valueMod: Int = 0\n\n    override operator fun contains(key: K): Boolean {\n        if (key !is String) return false\n        return backingMap[key] !== undefined\n    }\n\n    override operator fun get(key: K): V? {\n        if (key !is String) return null\n        val value = backingMap[key]\n        return if (value !== undefined) value.unsafeCast<V>() else null\n    }\n\n\n    override fun put(key: K, value: V): V? {\n        require(key is String)\n        val oldValue = backingMap[key]\n        backingMap[key] = value\n\n        if (oldValue === undefined) {\n            size++\n//            structureChanged(host)\n            return null\n        } else {\n//            valueMod++\n            return oldValue.unsafeCast<V>()\n        }\n    }\n\n    override fun remove(key: K): V? {\n        if (key !is String) return null\n        val value = backingMap[key]\n        if (value !== undefined) {\n            jsDeleteProperty(backingMap, key)\n            size--\n//            structureChanged(host)\n            return value.unsafeCast<V>()\n        } else {\n//            valueMod++\n            return null\n        }\n    }\n\n\n    override fun clear() {\n        backingMap = createJsMap()\n        size = 0\n    }\n\n\n    override fun iterator(): MutableIterator<MutableEntry<K, V>> {\n        return object : MutableIterator<MutableEntry<K, V>> {\n            private val keys: Array<String> = js(\"Object\").keys(backingMap)\n            private val iterator = keys.iterator()\n            private var lastKey: String? = null\n\n            override fun hasNext(): Boolean = iterator.hasNext()\n\n            override fun next(): MutableEntry<K, V> {\n                val key = iterator.next()\n                lastKey = key\n                @Suppress(\"UNCHECKED_CAST\")\n                return newMapEntry(key as K)\n            }\n\n            override fun remove() {\n                @Suppress(\"UNCHECKED_CAST\")\n                this@InternalStringMap.remove(checkNotNull(lastKey) as K)\n            }\n        }\n    }\n\n    private fun newMapEntry(key: K): MutableEntry<K, V> = object : MutableEntry<K, V> {\n        override val key: K get() = key\n        override val value: V get() = this@InternalStringMap[key].unsafeCast<V>()\n\n        override fun setValue(newValue: V): V = this@InternalStringMap.put(key, newValue).unsafeCast<V>()\n\n        override fun hashCode(): Int = AbstractMap.entryHashCode(this)\n        override fun toString(): String = AbstractMap.entryToString(this)\n        override fun equals(other: Any?): Boolean = AbstractMap.entryEquals(this, other)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT LinkedHashMap\n * Copyright 2008 Google Inc.\n */\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * Hash table based implementation of the [MutableMap] interface, which additionally preserves the insertion order\n * of entries during the iteration.\n *\n * The insertion order is preserved by maintaining a doubly-linked list of all of its entries.\n */\npublic actual open class LinkedHashMap<K, V> : HashMap<K, V>, MutableMap<K, V> {\n\n    /**\n     * The entry we use includes next/prev pointers for a doubly-linked circular\n     * list with a head node. This reduces the special cases we have to deal with\n     * in the list operations.\n\n     * Note that we duplicate the key from the underlying hash map so we can find\n     * the eldest entry. The alternative would have been to modify HashMap so more\n     * of the code was directly usable here, but this would have added some\n     * overhead to HashMap, or to reimplement most of the HashMap code here with\n     * small modifications. Paying a small storage cost only if you use\n     * LinkedHashMap and minimizing code size seemed like a better tradeoff\n     */\n    private inner class ChainEntry<K, V>(key: K, value: V) : AbstractMutableMap.SimpleEntry<K, V>(key, value) {\n        internal var next: ChainEntry<K, V>? = null\n        internal var prev: ChainEntry<K, V>? = null\n\n        override fun setValue(newValue: V): V {\n            this@LinkedHashMap.checkIsMutable()\n            return super.setValue(newValue)\n        }\n    }\n\n    private inner class EntrySet : AbstractMutableSet<MutableEntry<K, V>>() {\n\n        private inner class EntryIterator : MutableIterator<MutableEntry<K, V>> {\n            // The last entry that was returned from this iterator.\n            private var last: ChainEntry<K, V>? = null\n\n            // The next entry to return from this iterator.\n            private var next: ChainEntry<K, V>? = null\n\n            init {\n                next = head\n//                recordLastKnownStructure(map, this)\n            }\n\n            override fun hasNext(): Boolean {\n                return next !== null\n            }\n\n            override fun next(): MutableEntry<K, V> {\n//                checkStructuralChange(map, this)\n                if (!hasNext()) throw NoSuchElementException()\n\n                val current = next!!\n                last = current\n                next = current.next.takeIf { it !== head }\n                return current\n            }\n\n            override fun remove() {\n                check(last != null)\n                this@EntrySet.checkIsMutable()\n//                checkStructuralChange(map, this)\n\n                last!!.remove()\n                map.remove(last!!.key)\n//                recordLastKnownStructure(map, this)\n                last = null\n            }\n        }\n\n        override fun add(element: MutableEntry<K, V>): Boolean = throw UnsupportedOperationException(\"Add is not supported on entries\")\n        override fun clear() {\n            this@LinkedHashMap.clear()\n        }\n\n        override operator fun contains(element: MutableEntry<K, V>): Boolean = containsEntry(element)\n\n        override operator fun iterator(): MutableIterator<MutableEntry<K, V>> = EntryIterator()\n\n        override fun remove(element: MutableEntry<K, V>): Boolean {\n            checkIsMutable()\n            if (contains(element)) {\n                this@LinkedHashMap.remove(element.key)\n                return true\n            }\n            return false\n        }\n\n        override val size: Int get() = this@LinkedHashMap.size\n\n        override fun checkIsMutable(): Unit = this@LinkedHashMap.checkIsMutable()\n    }\n\n\n    /*\n   * The head of the insert order chain, which is a doubly-linked circular\n   * list.\n   *\n   * The most recently inserted node is at the end of the chain, ie.\n   * chain.prev.\n   */\n    private var head: ChainEntry<K, V>? = null\n\n    /**\n     * Add this node to the end of the chain.\n     */\n    private fun ChainEntry<K, V>.addToEnd() {\n        // This entry is not in the list.\n        check(next == null && prev == null)\n\n        val _head = head\n        if (_head == null) {\n            head = this\n            next = this\n            prev = this\n        } else {\n            // Chain is valid.\n            val _tail = checkNotNull(_head.prev)\n            // Update me.\n            prev = _tail\n            next = _head\n            // Update my new siblings: current head and old tail\n            _head.prev = this\n            _tail.next = this\n        }\n    }\n\n    /**\n     * Remove this node from the chain it is a part of.\n     */\n    private fun ChainEntry<K, V>.remove() {\n        if (this.next === this) {\n            // if this is single element, remove head\n            head = null\n        } else {\n            if (head === this) {\n                // if this is first element, move head to next\n                head = next\n            }\n            next!!.prev = prev\n            prev!!.next = next\n        }\n        next = null\n        prev = null\n    }\n\n    /*\n   * The hashmap that keeps track of our entries and the chain. Note that we\n   * duplicate the key here to eliminate changes to HashMap and minimize the\n   * code here, at the expense of additional space.\n   */\n    private val map: HashMap<K, ChainEntry<K, V>>\n\n    private var isReadOnly: Boolean = false\n\n    /**\n     * Constructs an empty [LinkedHashMap] instance.\n     */\n    actual constructor() : super() {\n        map = HashMap<K, ChainEntry<K, V>>()\n    }\n\n    internal constructor(backingMap: HashMap<K, Any>) : super() {\n        @Suppress(\"UNCHECKED_CAST\") // expected to work due to erasure\n        map = backingMap as HashMap<K, ChainEntry<K, V>>\n    }\n\n    /**\n     * Constructs an empty [LinkedHashMap] instance.\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) : super(initialCapacity, loadFactor) {\n        map = HashMap<K, ChainEntry<K, V>>()\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    /**\n     * Constructs an instance of [LinkedHashMap] filled with the contents of the specified [original] map.\n     */\n    actual constructor(original: Map<out K, V>) {\n        map = HashMap<K, ChainEntry<K, V>>()\n        this.putAll(original)\n    }\n\n    @PublishedApi\n    internal fun build(): Map<K, V> {\n        checkIsMutable()\n        isReadOnly = true\n        return this\n    }\n\n    actual override fun clear() {\n        checkIsMutable()\n        map.clear()\n        head = null\n    }\n\n\n//    override fun clone(): Any {\n//        return LinkedHashMap(this)\n//    }\n\n\n    actual override fun containsKey(key: K): Boolean = map.containsKey(key)\n\n    actual override fun containsValue(value: V): Boolean {\n        var node: ChainEntry<K, V> = head ?: return false\n        do {\n            if (node.value == value) {\n                return true\n            }\n            node = node.next!!\n        } while (node !== head)\n        return false\n    }\n\n\n    override fun createEntrySet(): MutableSet<MutableMap.MutableEntry<K, V>> = EntrySet()\n\n    actual override operator fun get(key: K): V? = map.get(key)?.value\n\n    actual override fun put(key: K, value: V): V? {\n        checkIsMutable()\n\n        val old = map.get(key)\n        if (old == null) {\n            val newEntry = ChainEntry(key, value)\n            map.put(key, newEntry)\n            newEntry.addToEnd()\n            return null\n        } else {\n            return old.setValue(value)\n        }\n    }\n\n    actual override fun remove(key: K): V? {\n        checkIsMutable()\n\n        val entry = map.remove(key)\n        if (entry != null) {\n            entry.remove()\n            return entry.value\n        }\n        return null\n    }\n\n    actual override val size: Int get() = map.size\n\n    internal override fun checkIsMutable() {\n        if (isReadOnly) throw UnsupportedOperationException()\n    }\n}\n\n/**\n * Constructs the specialized implementation of [LinkedHashMap] with [String] keys, which stores the keys as properties of\n * JS object without hashing them.\n */\npublic fun <V> linkedStringMapOf(vararg pairs: Pair<String, V>): LinkedHashMap<String, V> {\n    return LinkedHashMap<String, V>(stringMapOf<Any>()).apply { putAll(pairs) }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT LinkedHashSet\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * The implementation of the [MutableSet] interface, backed by a [LinkedHashMap] instance.\n *\n * This implementation preserves the insertion order of elements during the iteration.\n */\npublic actual open class LinkedHashSet<E> : HashSet<E>, MutableSet<E> {\n\n    internal constructor(map: LinkedHashMap<E, Any>) : super(map)\n\n    /**\n     * Constructs a new empty [LinkedHashSet].\n     */\n    actual constructor() : super(LinkedHashMap<E, Any>())\n\n    /**\n     * Constructs a new [LinkedHashSet] filled with the elements of the specified collection.\n     */\n    actual constructor(elements: Collection<E>) : super(LinkedHashMap<E, Any>()) {\n        addAll(elements)\n    }\n\n    /**\n     * Constructs a new empty [LinkedHashSet].\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) : super(LinkedHashMap<E, Any>(initialCapacity, loadFactor))\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    @PublishedApi\n    internal fun build(): Set<E> {\n        (map as LinkedHashMap<E, Any>).build()\n        return this\n    }\n\n    internal override fun checkIsMutable(): Unit = map.checkIsMutable()\n\n//    public override fun clone(): Any {\n//        return LinkedHashSet(this)\n//    }\n\n}\n\n/**\n * Creates a new instance of the specialized implementation of [LinkedHashSet] with the specified [String] elements,\n * which elements the keys as properties of JS object without hashing them.\n */\npublic fun linkedStringSetOf(vararg elements: String): LinkedHashSet<String> {\n    return LinkedHashSet(linkedStringMapOf<Any>()).apply { addAll(elements) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.io\n\ninternal abstract class BaseOutput {\n    open fun println() {\n        print(\"\\n\")\n    }\n\n    open fun println(message: Any?) {\n        print(message)\n        println()\n    }\n\n    abstract fun print(message: Any?)\n\n    open fun flush() {}\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"NodeJsOutput\")\ninternal class NodeJsOutput(val outputStream: dynamic) : BaseOutput() {\n    override fun print(message: Any?) {\n        // TODO: Using local variable because of bug in block decomposition lowering in IR backend\n        val messageString = String(message)\n        outputStream.write(messageString)\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"OutputToConsoleLog\")\ninternal class OutputToConsoleLog : BaseOutput() {\n    override fun print(message: Any?) {\n        console.log(message)\n    }\n\n    override fun println(message: Any?) {\n        console.log(message)\n    }\n\n    override fun println() {\n        console.log(\"\")\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it and use at try.kotl.in */\n@JsName(\"BufferedOutput\")\ninternal open class BufferedOutput : BaseOutput() {\n    var buffer = \"\"\n\n    override fun print(message: Any?) {\n        buffer += String(message)\n    }\n\n    override fun flush() {\n        buffer = \"\"\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"BufferedOutputToConsoleLog\")\ninternal class BufferedOutputToConsoleLog : BufferedOutput() {\n    override fun print(message: Any?) {\n        var s = String(message)\n        val i = s.nativeLastIndexOf(\"\\n\", 0)\n        if (i >= 0) {\n            buffer += s.substring(0, i)\n            flush()\n            s = s.substring(i + 1)\n        }\n        buffer += s\n    }\n\n    override fun flush() {\n        console.log(buffer)\n        buffer = \"\"\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it and use at try.kotl.in */\n@JsName(\"output\")\ninternal var output = run {\n    val isNode: Boolean = js(\"typeof process !== 'undefined' && process.versions && !!process.versions.node\")\n    if (isNode) NodeJsOutput(js(\"process.stdout\")) else BufferedOutputToConsoleLog()\n}\n\n@kotlin.internal.InlineOnly\nprivate inline fun String(value: Any?): String = js(\"String\")(value)\n\n/** Prints the line separator to the standard output stream. */\npublic actual fun println() {\n    output.println()\n}\n\n/** Prints the given [message] and the line separator to the standard output stream. */\npublic actual fun println(message: Any?) {\n    output.println(message)\n}\n\n/** Prints the given [message] to the standard output stream. */\npublic actual fun print(message: Any?) {\n    output.print(message)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.CoroutineSingletons.*\nimport kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal actual class SafeContinuation<in T>\ninternal actual constructor(\n    private val delegate: Continuation<T>,\n    initialResult: Any?\n) : Continuation<T> {\n    @PublishedApi\n    internal actual constructor(delegate: Continuation<T>) : this(delegate, UNDECIDED)\n\n    public actual override val context: CoroutineContext\n        get() = delegate.context\n\n    private var result: Any? = initialResult\n\n    public actual override fun resumeWith(result: Result<T>) {\n        val cur = this.result\n        when {\n            cur === UNDECIDED -> {\n                this.result = result.value\n            }\n            cur === COROUTINE_SUSPENDED -> {\n                this.result = RESUMED\n                delegate.resumeWith(result)\n            }\n            else -> throw IllegalStateException(\"Already resumed\")\n        }\n    }\n\n    @PublishedApi\n    internal actual fun getOrThrow(): Any? {\n        if (result === UNDECIDED) {\n            result = COROUTINE_SUSPENDED\n            return COROUTINE_SUSPENDED\n        }\n        val result = this.result\n        return when {\n            result === RESUMED -> COROUTINE_SUSPENDED // already called continuation, indicate COROUTINE_SUSPENDED upstream\n            result is Result.Failure -> throw result.exception\n            else -> result // either COROUTINE_SUSPENDED or data\n        }\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage org.w3c.dom.events\n\npublic fun EventListener(handler: (Event) -> Unit): EventListener = EventListenerHandler(handler)\n\nprivate class EventListenerHandler(private val handler: (Event) -> Unit) : EventListener {\n    public override fun handleEvent(event: Event) {\n        handler(event)\n    }\n\n    public override fun toString(): String = \"EventListenerHandler($handler)\"\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@JsName(\"throwNPE\")\ninternal fun throwNPE(message: String) {\n    throw NullPointerException(message)\n}\n\n@JsName(\"throwCCE\")\ninternal fun throwCCE() {\n    throw ClassCastException(\"Illegal cast\")\n}\n\n@JsName(\"throwISE\")\ninternal fun throwISE(message: String) {\n    throw IllegalStateException(message)\n}\n\n@JsName(\"throwUPAE\")\ninternal fun throwUPAE(propertyName: String) {\n    throw UninitializedPropertyAccessException(\"lateinit property ${propertyName} has not been initialized\")\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToBits\")\npublic actual fun Double.toBits(): Long = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout,\n * preserving `NaN` values exact layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToRawBits\")\npublic actual fun Double.toRawBits(): Long = definedExternally\n\n/**\n * Returns the [Double] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Double.Companion.fromBits(bits: Long): Double = js(\"Kotlin\").doubleFromBits(bits).unsafeCast<Double>()\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToBits\")\npublic actual fun Float.toBits(): Int = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout,\n * preserving `NaN` values exact layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToRawBits\")\npublic actual fun Float.toRawBits(): Int = definedExternally\n\n/**\n * Returns the [Float] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Float.Companion.fromBits(bits: Int): Float = js(\"Kotlin\").floatFromBits(bits).unsafeCast<Float>()\n\n\ninternal inline fun Long(low: Int, high: Int) = js(\"Kotlin\").Long.fromBits(low, high).unsafeCast<Long>()\ninternal inline val Long.low: Int get() = this.asDynamic().getLowBits().unsafeCast<Int>()\ninternal inline val Long.high: Int get() = this.asDynamic().getHighBits().unsafeCast<Int>()","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic actual fun Double.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic actual fun Float.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic actual fun Double.isInfinite(): Boolean = this == Double.POSITIVE_INFINITY || this == Double.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic actual fun Float.isInfinite(): Boolean = this == Float.POSITIVE_INFINITY || this == Float.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic actual fun Double.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic actual fun Float.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n\n/**\n * Counts the number of set bits in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.countOneBits(): Int {\n    // Hacker's Delight 5-1 algorithm\n    var v = this\n    v = (v and 0x55555555) + (v.ushr(1) and 0x55555555)\n    v = (v and 0x33333333) + (v.ushr(2) and 0x33333333)\n    v = (v and 0x0F0F0F0F) + (v.ushr(4) and 0x0F0F0F0F)\n    v = (v and 0x00FF00FF) + (v.ushr(8) and 0x00FF00FF)\n    v = (v and 0x0000FFFF) + (v.ushr(16))\n    return v\n}\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"DEPRECATION_ERROR\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Int.countLeadingZeroBits(): Int = kotlin.js.Math.clz32(this)\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.countTrailingZeroBits(): Int =\n    // Hacker's Delight 5-4 algorithm for expressing countTrailingZeroBits with countLeadingZeroBits\n    Int.SIZE_BITS - (this or -this).inv().countLeadingZeroBits()\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [Int] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.takeHighestOneBit(): Int =\n    if (this == 0) 0 else 1.shl(Int.SIZE_BITS - 1 - countLeadingZeroBits())\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [Int] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.takeLowestOneBit(): Int =\n    // Hacker's Delight 2-1 algorithm for isolating rightmost 1-bit\n    this and -this\n\n/**\n * Rotates the binary representation of this [Int] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 32)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.rotateLeft(bitCount: Int): Int =\n    shl(bitCount) or ushr(Int.SIZE_BITS - bitCount)\n\n\n/**\n * Rotates the binary representation of this [Int] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 32)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.rotateRight(bitCount: Int): Int =\n    shl(Int.SIZE_BITS - bitCount) or ushr(bitCount)\n\n\n/**\n * Counts the number of set bits in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.countOneBits(): Int =\n    high.countOneBits() + low.countOneBits()\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.countLeadingZeroBits(): Int =\n    when (val high = this.high) {\n        0 -> Int.SIZE_BITS + low.countLeadingZeroBits()\n        else -> high.countLeadingZeroBits()\n    }\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.countTrailingZeroBits(): Int =\n    when (val low = this.low) {\n        0 -> Int.SIZE_BITS + high.countTrailingZeroBits()\n        else -> low.countTrailingZeroBits()\n    }\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [Long] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.takeHighestOneBit(): Long =\n    when (val high = this.high) {\n        0 -> Long(low.takeHighestOneBit(), 0)\n        else -> Long(0, high.takeHighestOneBit())\n    }\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [Long] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.takeLowestOneBit(): Long =\n    when (val low = this.low) {\n        0 -> Long(0, high.takeLowestOneBit())\n        else -> Long(low.takeLowestOneBit(), 0)\n    }\n\n/**\n * Rotates the binary representation of this [Long] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 64)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Long.rotateLeft(bitCount: Int): Long {\n    if ((bitCount and 31) != 0) {\n        val low = this.low\n        val high = this.high\n        val newLow = low.shl(bitCount) or high.ushr(-bitCount)\n        val newHigh = high.shl(bitCount) or low.ushr(-bitCount)\n        return if ((bitCount and 32) == 0) Long(newLow, newHigh) else Long(newHigh, newLow)\n    } else {\n        return if ((bitCount and 32) == 0) this else Long(high, low)\n    }\n}\n\n\n/**\n * Rotates the binary representation of this [Long] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 64)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic actual inline fun Long.rotateRight(bitCount: Int): Long = rotateLeft(-bitCount)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\nimport kotlin.math.pow\n\ninternal actual fun defaultPlatformRandom(): Random =\n    Random(js(\"(Math.random() * Math.pow(2, 32)) | 0\").unsafeCast<Int>())\n\n\nprivate val INV_2_26: Double = 2.0.pow(-26)\nprivate val INV_2_53: Double = 2.0.pow(-53)\ninternal actual fun doubleFromParts(hi26: Int, low27: Int): Double =\n    hi26 * INV_2_26 + low27 * INV_2_53","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect.js.internal\n\nimport kotlin.reflect.*\n\ninternal abstract class KClassImpl<T : Any>(\n    internal open val jClass: JsClass<T>\n) : KClass<T> {\n\n    override val qualifiedName: String?\n        get() = TODO()\n\n    override fun equals(other: Any?): Boolean {\n        return other is KClassImpl<*> && jClass == other.jClass\n    }\n\n    // TODO: use FQN\n    override fun hashCode(): Int = simpleName?.hashCode() ?: 0\n\n    override fun toString(): String {\n        // TODO: use FQN\n        return \"class $simpleName\"\n    }\n}\n\ninternal class SimpleKClassImpl<T : Any>(jClass: JsClass<T>) : KClassImpl<T>(jClass) {\n    override val simpleName: String? = jClass.asDynamic().`$metadata$`?.simpleName.unsafeCast<String?>()\n\n    override fun isInstance(value: Any?): Boolean {\n        return jsIsType(value, jClass)\n    }\n}\n\ninternal class PrimitiveKClassImpl<T : Any>(\n    jClass: JsClass<T>,\n    private val givenSimpleName: String,\n    private val isInstanceFunction: (Any?) -> Boolean\n) : KClassImpl<T>(jClass) {\n    override fun equals(other: Any?): Boolean {\n        if (other !is PrimitiveKClassImpl<*>) return false\n        return super.equals(other) && givenSimpleName == other.givenSimpleName\n    }\n\n    override val simpleName: String? get() = givenSimpleName\n\n    override fun isInstance(value: Any?): Boolean {\n        return isInstanceFunction(value)\n    }\n}\n\ninternal object NothingKClassImpl : KClassImpl<Nothing>(js(\"Object\")) {\n    override val simpleName: String = \"Nothing\"\n\n    override fun isInstance(value: Any?): Boolean = false\n\n    override val jClass: JsClass<Nothing>\n        get() = throw UnsupportedOperationException(\"There's no native JS class for Nothing type\")\n\n    override fun equals(other: Any?): Boolean = other === this\n\n    override fun hashCode(): Int = 0\n}\n\ninternal class ErrorKClass : KClass<Nothing> {\n    override val simpleName: String? get() = error(\"Unknown simpleName for ErrorKClass\")\n    override val qualifiedName: String? get() = error(\"Unknown qualifiedName for ErrorKClass\")\n\n    override fun isInstance(value: Any?): Boolean = error(\"Can's check isInstance on ErrorKClass\")\n\n    override fun equals(other: Any?): Boolean = other === this\n\n    override fun hashCode(): Int = 0\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * The common interface of [InternalStringMap] and [InternalHashCodeMap].\n */\ninternal interface InternalMap<K, V> : MutableIterable<MutableMap.MutableEntry<K, V>> {\n    val equality: EqualityComparator\n    val size: Int\n    operator fun contains(key: K): Boolean\n    operator fun get(key: K): V?\n\n    fun put(key: K, value: V): V?\n    fun remove(key: K): V?\n    fun clear(): Unit\n\n    fun createJsMap(): dynamic {\n        val result = js(\"Object.create(null)\")\n        // force to switch object representation to dictionary mode\n        result[\"foo\"] = 1\n        jsDeleteProperty(result, \"foo\")\n        return result\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n\n@file:Suppress(\"UNUSED_PARAMETER\")\n\npackage kotlin.js\n\n@kotlin.internal.InlineOnly\ninternal inline fun jsDeleteProperty(obj: Any, property: Any) {\n    js(\"delete obj[property]\")\n}\n\n@kotlin.internal.InlineOnly\ninternal inline fun jsBitwiseOr(lhs: Any?, rhs: Any?): Int =\n    js(\"lhs | rhs\").unsafeCast<Int>()","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect.js.internal\n\nimport kotlin.js.JsClass\n\n@JsName(\"PrimitiveClasses\")\ninternal object PrimitiveClasses {\n    @JsName(\"anyClass\")\n    val anyClass = PrimitiveKClassImpl(js(\"Object\").unsafeCast<JsClass<Any>>(), \"Any\", { it is Any })\n\n    @JsName(\"numberClass\")\n    val numberClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Number>>(), \"Number\", { it is Number })\n\n    @JsName(\"nothingClass\")\n    val nothingClass = NothingKClassImpl\n\n    @JsName(\"booleanClass\")\n    val booleanClass = PrimitiveKClassImpl(js(\"Boolean\").unsafeCast<JsClass<Boolean>>(), \"Boolean\", { it is Boolean })\n\n    @JsName(\"byteClass\")\n    val byteClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Byte>>(), \"Byte\", { it is Byte })\n\n    @JsName(\"shortClass\")\n    val shortClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Short>>(), \"Short\", { it is Short })\n\n    @JsName(\"intClass\")\n    val intClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Int>>(), \"Int\", { it is Int })\n\n    @JsName(\"floatClass\")\n    val floatClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Float>>(), \"Float\", { it is Float })\n\n    @JsName(\"doubleClass\")\n    val doubleClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Double>>(), \"Double\", { it is Double })\n\n    @JsName(\"arrayClass\")\n    val arrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<Array<*>>>(), \"Array\", { it is Array<*> })\n\n    @JsName(\"stringClass\")\n    val stringClass = PrimitiveKClassImpl(js(\"String\").unsafeCast<JsClass<String>>(), \"String\", { it is String })\n\n    @JsName(\"throwableClass\")\n    val throwableClass = PrimitiveKClassImpl(js(\"Error\").unsafeCast<JsClass<Throwable>>(), \"Throwable\", { it is Throwable })\n\n    @JsName(\"booleanArrayClass\")\n    val booleanArrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<BooleanArray>>(), \"BooleanArray\", { it is BooleanArray })\n\n    @JsName(\"charArrayClass\")\n    val charArrayClass = PrimitiveKClassImpl(js(\"Uint16Array\").unsafeCast<JsClass<CharArray>>(), \"CharArray\", { it is CharArray })\n\n    @JsName(\"byteArrayClass\")\n    val byteArrayClass = PrimitiveKClassImpl(js(\"Int8Array\").unsafeCast<JsClass<ByteArray>>(), \"ByteArray\", { it is ByteArray })\n\n    @JsName(\"shortArrayClass\")\n    val shortArrayClass = PrimitiveKClassImpl(js(\"Int16Array\").unsafeCast<JsClass<ShortArray>>(), \"ShortArray\", { it is ShortArray })\n\n    @JsName(\"intArrayClass\")\n    val intArrayClass = PrimitiveKClassImpl(js(\"Int32Array\").unsafeCast<JsClass<IntArray>>(), \"IntArray\", { it is IntArray })\n\n    @JsName(\"longArrayClass\")\n    val longArrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<LongArray>>(), \"LongArray\", { it is LongArray })\n\n    @JsName(\"floatArrayClass\")\n    val floatArrayClass = PrimitiveKClassImpl(js(\"Float32Array\").unsafeCast<JsClass<FloatArray>>(), \"FloatArray\", { it is FloatArray })\n\n    @JsName(\"doubleArrayClass\")\n    val doubleArrayClass = PrimitiveKClassImpl(js(\"Float64Array\").unsafeCast<JsClass<DoubleArray>>(), \"DoubleArray\", { it is DoubleArray })\n\n    @JsName(\"functionClass\")\n    fun functionClass(arity: Int): KClassImpl<Any> {\n        return functionClasses.get(arity) ?: run {\n            val result = PrimitiveKClassImpl(js(\"Function\").unsafeCast<JsClass<Any>>(), \"Function$arity\",\n                                             { jsTypeOf(it) === \"function\" && it.asDynamic().length === arity })\n            functionClasses.asDynamic()[arity] = result\n            result\n        }\n    }\n}\n\nprivate val functionClasses = arrayOfNulls<KClassImpl<Any>>(0)","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\nimport kotlin.reflect.*\nimport kotlin.reflect.js.internal.*\n\n@JsName(\"getKClass\")\ninternal fun <T : Any> getKClass(jClass: Any /* JsClass<T> | Array<JsClass<T>> */): KClass<T> {\n    return if (js(\"Array\").isArray(jClass)) {\n        getKClassM(jClass.unsafeCast<Array<JsClass<T>>>())\n    } else {\n        getKClass1(jClass.unsafeCast<JsClass<T>>())\n    }\n}\n\n@JsName(\"getKClassM\")\ninternal fun <T : Any> getKClassM(jClasses: Array<JsClass<T>>): KClass<T> = when (jClasses.size) {\n    1 -> getKClass1(jClasses[0])\n    0 -> NothingKClassImpl.unsafeCast<KClass<T>>()\n    else -> ErrorKClass().unsafeCast<KClass<T>>()\n}\n\n@JsName(\"getKClassFromExpression\")\ninternal fun <T : Any> getKClassFromExpression(e: T): KClass<T> =\n    when (jsTypeOf(e)) {\n        \"string\" -> PrimitiveClasses.stringClass\n        \"number\" -> if (jsBitwiseOr(e, 0).asDynamic() === e) PrimitiveClasses.intClass else PrimitiveClasses.doubleClass\n        \"boolean\" -> PrimitiveClasses.booleanClass\n        \"function\" -> PrimitiveClasses.functionClass(e.asDynamic().length)\n        else -> {\n            when {\n                e is BooleanArray -> PrimitiveClasses.booleanArrayClass\n                e is CharArray -> PrimitiveClasses.charArrayClass\n                e is ByteArray -> PrimitiveClasses.byteArrayClass\n                e is ShortArray -> PrimitiveClasses.shortArrayClass\n                e is IntArray -> PrimitiveClasses.intArrayClass\n                e is LongArray -> PrimitiveClasses.longArrayClass\n                e is FloatArray -> PrimitiveClasses.floatArrayClass\n                e is DoubleArray -> PrimitiveClasses.doubleArrayClass\n                e is KClass<*> -> KClass::class\n                e is Array<*> -> PrimitiveClasses.arrayClass\n                else -> {\n                    val constructor = js(\"Object\").getPrototypeOf(e).constructor\n                    when {\n                        constructor === js(\"Object\") -> PrimitiveClasses.anyClass\n                        constructor === js(\"Error\") -> PrimitiveClasses.throwableClass\n                        else -> {\n                            val jsClass: JsClass<T> = constructor\n                            getKClass1(jsClass)\n                        }\n                    }\n                }\n            }\n        }\n    }.unsafeCast<KClass<T>>()\n\n@JsName(\"getKClass1\")\ninternal fun <T : Any> getKClass1(jClass: JsClass<T>): KClass<T> {\n    if (jClass === js(\"String\")) return PrimitiveClasses.stringClass.unsafeCast<KClass<T>>()\n\n    val metadata = jClass.asDynamic().`$metadata$`\n\n    return if (metadata != null) {\n        if (metadata.`$kClass$` == null) {\n            val kClass = SimpleKClassImpl(jClass)\n            metadata.`$kClass$` = kClass\n            kClass\n        } else {\n            metadata.`$kClass$`\n        }\n    } else {\n        SimpleKClassImpl(jClass)\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * Exposes the JavaScript [RegExp object](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp) to Kotlin.\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic external class RegExp(pattern: String, flags: String? = definedExternally) {\n\n    public fun test(str: String): Boolean\n\n    public fun exec(str: String): RegExpMatch?\n\n    public override fun toString(): String\n\n    /**\n     * The lastIndex is a read/write integer property of regular expressions that specifies the index at which to start the next match.\n     */\n    public var lastIndex: Int\n\n    public val global: Boolean\n    public val ignoreCase: Boolean\n    public val multiline: Boolean\n}\n\n/**\n * Resets the regular expression so that subsequent [RegExp.test] and [RegExp.exec] calls will match starting with the beginning of the input string.\n */\npublic fun RegExp.reset() {\n    lastIndex = 0\n}\n\n// TODO: Inherit from array or introduce asArray() extension\n/**\n * Represents the return value of [RegExp.exec].\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic external interface RegExpMatch {\n    public val index: Int\n    public val input: String\n    public val length: Int\n}\n\n/**\n * Returns the entire text matched by [RegExp.exec] if the [index] parameter is 0, or the text matched by the capturing parenthesis\n * at the given index.\n */\npublic inline operator fun RegExpMatch.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Converts the result of [RegExp.exec] to an array where the first element contains the entire matched text and each subsequent\n * element is the text matched by each capturing parenthesis.\n */\npublic inline fun RegExpMatch.asArray(): Array<out String?> = unsafeCast<Array<out String?>>()\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\npublic actual class StringBuilder actual constructor(content: String) : Appendable, CharSequence {\n    /**\n     * Constructs an empty string builder with the specified initial [capacity].\n     *\n     * In Kotlin/JS implementation of StringBuilder the initial capacity has no effect on the further performance of operations.\n     */\n    actual constructor(capacity: Int) : this() {\n    }\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    actual constructor(content: CharSequence) : this(content.toString()) {}\n\n    /** Constructs an empty string builder. */\n    actual constructor() : this(\"\")\n\n    private var string: String = if (content !== undefined) content else \"\"\n\n    actual override val length: Int\n        get() = string.asDynamic().length\n\n    actual override fun get(index: Int): Char =\n        string.getOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, length: $length}\") }\n\n    actual override fun subSequence(startIndex: Int, endIndex: Int): CharSequence = string.substring(startIndex, endIndex)\n\n    actual override fun append(value: Char): StringBuilder {\n        string += value\n        return this\n    }\n\n    actual override fun append(value: CharSequence?): StringBuilder {\n        string += value.toString()\n        return this\n    }\n\n    actual override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder =\n        this.appendRange(value ?: \"null\", startIndex, endIndex)\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    actual fun reverse(): StringBuilder {\n        var reversed = \"\"\n        var index = string.length - 1\n        while (index >= 0) {\n            val low = string[index--]\n            if (low.isLowSurrogate() && index >= 0) {\n                val high = string[index--]\n                if (high.isHighSurrogate()) {\n                    reversed = reversed + high + low\n                } else {\n                    reversed = reversed + low + high\n                }\n            } else {\n                reversed += low\n            }\n        }\n        string = reversed\n        return this\n    }\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    actual fun append(value: Any?): StringBuilder {\n        string += value.toString()\n        return this\n    }\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    actual fun append(value: Boolean): StringBuilder {\n        string += value\n        return this\n    }\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun append(value: CharArray): StringBuilder {\n        @OptIn(ExperimentalStdlibApi::class)\n        string += value.concatToString()\n        return this\n    }\n\n    @Deprecated(\"Provided for binary compatibility.\", level = DeprecationLevel.HIDDEN)\n    fun append(value: String): StringBuilder = append(value)\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are appended.\n     */\n    @SinceKotlin(\"1.3\")\n    actual fun append(value: String?): StringBuilder {\n        this.string += value ?: \"null\"\n        return this\n    }\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     *\n     * In Kotlin/JS implementation of StringBuilder the value returned from this method may not indicate the actual size of the backing storage.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    @Deprecated(\"Obtaining StringBuilder capacity is not supported in JS and common code.\", level = DeprecationLevel.ERROR)\n    actual fun capacity(): Int = length\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     *\n     * In Kotlin/JS implementation of StringBuilder the size of the backing storage is not extended to comply the given [minimumCapacity],\n     * thus calling this method has no effect on the further performance of operations.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun ensureCapacity(minimumCapacity: Int) {\n    }\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun indexOf(string: String): Int = this.string.asDynamic().indexOf(string)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun indexOf(string: String, startIndex: Int): Int = this.string.asDynamic().indexOf(string, startIndex)\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun lastIndexOf(string: String): Int = this.string.asDynamic().lastIndexOf(string)\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun lastIndexOf(string: String, startIndex: Int): Int {\n        if (string.isEmpty() && startIndex < 0) return -1\n        return this.string.asDynamic().lastIndexOf(string, startIndex)\n    }\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: Boolean): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: Char): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: CharArray): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        @OptIn(ExperimentalStdlibApi::class)\n        string = string.substring(0, index) + value.concatToString() + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: CharSequence?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value.toString() + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: Any?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value.toString() + string.substring(index)\n        return this\n    }\n\n    @Deprecated(\"Provided for binary compatibility.\", level = DeprecationLevel.HIDDEN)\n    fun insert(index: Int, value: String): StringBuilder = insert(index, value)\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: String?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        val toInsert = value ?: \"null\"\n        this.string = this.string.substring(0, index) + toInsert + this.string.substring(index)\n        return this\n    }\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun setLength(newLength: Int) {\n        if (newLength < 0) {\n            throw IllegalArgumentException(\"Negative new length: $newLength.\")\n        }\n\n        if (newLength <= length) {\n            string = string.substring(0, newLength)\n        } else {\n            for (i in length until newLength) {\n                string += '\\u0000'\n            }\n        }\n    }\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun substring(startIndex: Int): String {\n        AbstractList.checkPositionIndex(startIndex, length)\n\n        return string.substring(startIndex)\n    }\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun substring(startIndex: Int, endIndex: Int): String {\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n\n        return string.substring(startIndex, endIndex)\n    }\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     *\n     * In Kotlin/JS implementation of StringBuilder the size of the backing storage is always equal to the length of the string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun trimToSize() {\n    }\n\n    override fun toString(): String = string\n\n    /**\n     * Clears the content of this string builder making it empty and returns this instance.\n     *\n     * @sample samples.text.Strings.clearStringBuilder\n     */\n    @SinceKotlin(\"1.3\")\n    public fun clear(): StringBuilder {\n        string = \"\"\n        return this\n    }\n\n    /**\n     * Sets the character at the specified [index] to the specified [value].\n     *\n     * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public operator fun set(index: Int, value: Char) {\n        AbstractList.checkElementIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index + 1)\n    }\n\n    /**\n     * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n     *\n     * @param startIndex the beginning (inclusive) of the range to replace.\n     * @param endIndex the end (exclusive) of the range to replace.\n     * @param value the string to replace with.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder {\n        checkReplaceRange(startIndex, endIndex, length)\n\n        this.string = this.string.substring(0, startIndex) + value + this.string.substring(endIndex)\n        return this\n    }\n\n    private fun checkReplaceRange(startIndex: Int, endIndex: Int, length: Int) {\n        if (startIndex < 0 || startIndex > length) {\n            throw IndexOutOfBoundsException(\"startIndex: $startIndex, length: $length\")\n        }\n        if (startIndex > endIndex) {\n            throw IllegalArgumentException(\"startIndex($startIndex) > endIndex($endIndex)\")\n        }\n    }\n\n    /**\n     * Removes the character at the specified [index] from this string builder and returns this instance.\n     *\n     * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n     *\n     * @param index the index of `Char` to remove.\n     *\n     * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun deleteAt(index: Int): StringBuilder {\n        AbstractList.checkElementIndex(index, length)\n\n        string = string.substring(0, index) + string.substring(index + 1)\n        return this\n    }\n\n    /**\n     * Removes characters in the specified range from this string builder and returns this instance.\n     *\n     * @param startIndex the beginning (inclusive) of the range to remove.\n     * @param endIndex the end (exclusive) of the range to remove.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun deleteRange(startIndex: Int, endIndex: Int): StringBuilder {\n        checkReplaceRange(startIndex, endIndex, length)\n\n        string = string.substring(0, startIndex) + string.substring(endIndex)\n        return this\n    }\n\n    /**\n     * Copies characters from this string builder into the [destination] character array.\n     *\n     * @param destination the array to copy to.\n     * @param destinationOffset the position in the array to copy to, 0 by default.\n     * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n     * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n     *  or when that index is out of the [destination] array indices range.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length) {\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n        AbstractList.checkBoundsIndexes(destinationOffset, destinationOffset + endIndex - startIndex, destination.size)\n\n        var dstIndex = destinationOffset\n        for (index in startIndex until endIndex) {\n            destination[dstIndex++] = string[index]\n        }\n    }\n\n    /**\n     * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at specified [startIndex].\n     *\n     * @param value the array from which characters are appended.\n     * @param startIndex the beginning (inclusive) of the subarray to append.\n     * @param endIndex the end (exclusive) of the subarray to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder {\n        @OptIn(ExperimentalStdlibApi::class)\n        string += value.concatToString(startIndex, endIndex)\n        return this\n    }\n\n    /**\n     * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n     *\n     * @param value the character sequence from which a subsequence is appended.\n     * @param startIndex the beginning (inclusive) of the subsequence to append.\n     * @param endIndex the end (exclusive) of the subsequence to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder {\n        val stringCsq = value.toString()\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, stringCsq.length)\n\n        string += stringCsq.substring(startIndex, endIndex)\n        return this\n    }\n\n    /**\n     * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] array, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the array from which characters are inserted.\n     * @param startIndex the beginning (inclusive) of the subarray to insert.\n     * @param endIndex the end (exclusive) of the subarray to insert.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder {\n        AbstractList.checkPositionIndex(index, this.length)\n\n        @OptIn(ExperimentalStdlibApi::class)\n        string = string.substring(0, index) + value.concatToString(startIndex, endIndex) + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which a subsequence is inserted.\n     * @param startIndex the beginning (inclusive) of the subsequence to insert.\n     * @param endIndex the end (exclusive) of the subsequence to insert.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        val stringCsq = value.toString()\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, stringCsq.length)\n\n        string = string.substring(0, index) + stringCsq.substring(startIndex, endIndex) + string.substring(index)\n        return this\n    }\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.clear(): StringBuilder = this.clear()\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun StringBuilder.set(index: Int, value: Char) = this.set(index, value)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder =\n    this.setRange(startIndex, endIndex, value)\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.deleteAt(index: Int): StringBuilder = this.deleteAt(index)\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder = this.deleteRange(startIndex, endIndex)\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\", \"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length) =\n    this.toCharArray(destination, destinationOffset, startIndex, endIndex)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder =\n    this.appendRange(value, startIndex, endIndex)\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder =\n    this.appendRange(value, startIndex, endIndex)\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder =\n    this.insertRange(index, value, startIndex, endIndex)\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder =\n    this.insertRange(index, value, startIndex, endIndex)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n// actually \\s is enough to match all whitespace, but \\xA0 added because of different regexp behavior of Rhino used in Selenium tests\npublic actual fun Char.isWhitespace(): Boolean = toString().matches(\"[\\\\s\\\\xA0]\")\n\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.toLowerCase(): Char = js(\"String.fromCharCode\")(toInt()).toLowerCase().charCodeAt(0).unsafeCast<Int>().toChar()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.toUpperCase(): Char = js(\"String.fromCharCode\")(toInt()).toUpperCase().charCodeAt(0).unsafeCast<Int>().toChar()\n\n/**\n * Returns `true` if this character is a Unicode high-surrogate code unit (also known as leading-surrogate code unit).\n */\npublic actual fun Char.isHighSurrogate(): Boolean = this in Char.MIN_HIGH_SURROGATE..Char.MAX_HIGH_SURROGATE\n\n/**\n * Returns `true` if this character is a Unicode low-surrogate code unit (also known as trailing-surrogate code unit).\n */\npublic actual fun Char.isLowSurrogate(): Boolean = this in Char.MIN_LOW_SURROGATE..Char.MAX_LOW_SURROGATE\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n\n/**\n * Returns `true` if the content of this string is equal to the word \"true\", ignoring case, and `false` otherwise.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toBoolean(): Boolean = this.toBoolean()\n\n/**\n * Returns `true` if this string is not `null` and its content is equal to the word \"true\", ignoring case, and `false` otherwise.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun String?.toBoolean(): Boolean = this != null && this.toLowerCase() == \"true\"\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toByte(): Byte = toByteOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toByte(radix: Int): Byte = toByteOrNull(radix) ?: numberFormatError(this)\n\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toShort(): Short = toShortOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toShort(radix: Int): Short = toShortOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toInt(): Int = toIntOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toInt(radix: Int): Int = toIntOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toLong(): Long = toLongOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toLong(radix: Int): Long = toLongOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Double] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toDouble(): Double = (+(this.asDynamic())).unsafeCast<Double>().also {\n    if (it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n        numberFormatError(this)\n}\n\n/**\n * Parses the string as a [Float] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloat(): Float = toDouble().unsafeCast<Float>()\n\n/**\n * Parses the string as a [Double] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\npublic actual fun String.toDoubleOrNull(): Double? = (+(this.asDynamic())).unsafeCast<Double>().takeIf {\n    !(it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n}\n\n/**\n * Parses the string as a [Float] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloatOrNull(): Float? = toDoubleOrNull().unsafeCast<Float?>()\n\n/**\n * Returns a string representation of this [Byte] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Byte.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Short] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Short.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Int] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Int.toString(radix: Int): String = asDynamic().toString(checkRadix(radix))\n\nprivate fun String.isNaN(): Boolean = when (this.toLowerCase()) {\n    \"nan\", \"+nan\", \"-nan\" -> true\n    else -> false\n}\n\n/**\n * Checks whether the given [radix] is valid radix for string to number and number to string conversion.\n */\n@PublishedApi\ninternal actual fun checkRadix(radix: Int): Int {\n    if (radix !in 2..36) {\n        throw IllegalArgumentException(\"radix $radix was not in valid range 2..36\")\n    }\n    return radix\n}\n\ninternal actual fun digitOf(char: Char, radix: Int): Int = when {\n    char >= '0' && char <= '9' -> char - '0'\n    char >= 'A' && char <= 'Z' -> char - 'A' + 10\n    char >= 'a' && char <= 'z' -> char - 'a' + 10\n    else -> -1\n}.let { if (it >= radix) -1 else it }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Provides enumeration values to use to set regular expression options.\n */\npublic actual enum class RegexOption(val value: String) {\n    /** Enables case-insensitive matching. */\n    IGNORE_CASE(\"i\"),\n    /** Enables multiline mode.\n     *\n     * In multiline mode the expressions `^` and `$` match just after or just before,\n     * respectively, a line terminator or the end of the input sequence. */\n    MULTILINE(\"m\")\n}\n\n\n/**\n * Represents the results from a single capturing group within a [MatchResult] of [Regex].\n *\n * @param value The value of captured group.\n */\npublic actual data class MatchGroup(actual val value: String)\n\n\n/**\n * Represents a compiled regular expression.\n * Provides functions to match strings in text with a pattern, replace the found occurrences and split text around matches.\n *\n * For pattern syntax reference see [MDN RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_meaning_in_regular_expressions)\n * and [http://www.w3schools.com/jsref/jsref_obj_regexp.asp](https://www.w3schools.com/jsref/jsref_obj_regexp.asp).\n *\n * @constructor Creates a regular expression from the specified [pattern] string and the specified set of [options].\n */\npublic actual class Regex actual constructor(pattern: String, options: Set<RegexOption>) {\n\n    /** Creates a regular expression from the specified [pattern] string and the specified single [option].  */\n    public actual constructor(pattern: String, option: RegexOption) : this(pattern, setOf(option))\n\n    /** Creates a regular expression from the specified [pattern] string and the default options.  */\n    public actual constructor(pattern: String) : this(pattern, emptySet())\n\n\n    /** The pattern string of this regular expression. */\n    public actual val pattern: String = pattern\n    /** The set of options that were used to create this regular expression. */\n    public actual val options: Set<RegexOption> = options.toSet()\n    private val nativePattern: RegExp = RegExp(pattern, options.map { it.value }.joinToString(separator = \"\") + \"g\")\n\n    /** Indicates whether the regular expression matches the entire [input]. */\n    public actual infix fun matches(input: CharSequence): Boolean {\n        nativePattern.reset()\n        val match = nativePattern.exec(input.toString())\n        return match != null && match.index == 0 && nativePattern.lastIndex == input.length\n    }\n\n    /** Indicates whether the regular expression can find at least one match in the specified [input]. */\n    public actual fun containsMatchIn(input: CharSequence): Boolean {\n        nativePattern.reset()\n        return nativePattern.test(input.toString())\n    }\n\n    /** Returns the first match of a regular expression in the [input], beginning at the specified [startIndex].\n     *\n     * @param startIndex An index to start search with, by default 0. Must be not less than zero and not greater than `input.length()`\n     * @return An instance of [MatchResult] if match was found or `null` otherwise.\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of the [input] char sequence.\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun find(input: CharSequence, startIndex: Int = 0): MatchResult? {\n        if (startIndex < 0 || startIndex > input.length) {\n            throw IndexOutOfBoundsException(\"Start index out of bounds: $startIndex, input length: ${input.length}\")\n        }\n        return nativePattern.findNext(input.toString(), startIndex)\n    }\n\n    /**\n     * Returns a sequence of all occurrences of a regular expression within the [input] string, beginning at the specified [startIndex].\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of the [input] char sequence.\n     *\n     * @sample samples.text.Regexps.findAll\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun findAll(input: CharSequence, startIndex: Int = 0): Sequence<MatchResult> {\n        if (startIndex < 0 || startIndex > input.length) {\n            throw IndexOutOfBoundsException(\"Start index out of bounds: $startIndex, input length: ${input.length}\")\n        }\n        return generateSequence({ find(input, startIndex) }, { match -> match.next() })\n    }\n\n    /**\n     * Attempts to match the entire [input] CharSequence against the pattern.\n     *\n     * @return An instance of [MatchResult] if the entire input matches or `null` otherwise.\n     */\n    public actual fun matchEntire(input: CharSequence): MatchResult? {\n        if (pattern.startsWith('^') && pattern.endsWith('$'))\n            return find(input)\n        else\n            return Regex(\"^${pattern.trimStart('^').trimEnd('$')}$\", options).find(input)\n    }\n\n    /**\n     * Replaces all occurrences of this regular expression in the specified [input] string with specified [replacement] expression.\n     *\n     * @param replacement A replacement expression that can include substitutions. See [String.prototype.replace](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) function docs for details.\n     */\n    public actual fun replace(input: CharSequence, replacement: String): String = input.toString().nativeReplace(nativePattern, replacement)\n\n    /**\n     * Replaces all occurrences of this regular expression in the specified [input] string with the result of\n     * the given function [transform] that takes [MatchResult] and returns a string to be used as a\n     * replacement for that match.\n     */\n    public actual inline fun replace(input: CharSequence, transform: (MatchResult) -> CharSequence): String {\n        var match = find(input)\n        if (match == null) return input.toString()\n\n        var lastStart = 0\n        val length = input.length\n        val sb = StringBuilder(length)\n        do {\n            val foundMatch = match!!\n            sb.append(input, lastStart, foundMatch.range.start)\n            sb.append(transform(foundMatch))\n            lastStart = foundMatch.range.endInclusive + 1\n            match = foundMatch.next()\n        } while (lastStart < length && match != null)\n\n        if (lastStart < length) {\n            sb.append(input, lastStart, length)\n        }\n\n        return sb.toString()\n    }\n\n    /**\n     * Replaces the first occurrence of this regular expression in the specified [input] string with specified [replacement] expression.\n     *\n     * @param replacement A replacement expression that can include substitutions. See [String.prototype.replace](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) function docs for details.\n     */\n    public actual fun replaceFirst(input: CharSequence, replacement: String): String {\n        val nonGlobalOptions = options.map { it.value }.joinToString(separator = \"\")\n        return input.toString().nativeReplace(RegExp(pattern, nonGlobalOptions), replacement)\n    }\n\n    /**\n     * Splits the [input] CharSequence around matches of this regular expression.\n     *\n     * @param limit Non-negative value specifying the maximum number of substrings the string can be split to.\n     * Zero by default means no limit is set.\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun split(input: CharSequence, limit: Int = 0): List<String> {\n        require(limit >= 0) { \"Limit must be non-negative, but was $limit\" }\n        val matches = findAll(input).let { if (limit == 0) it else it.take(limit - 1) }\n        val result = mutableListOf<String>()\n        var lastStart = 0\n\n        for (match in matches) {\n            result.add(input.subSequence(lastStart, match.range.start).toString())\n            lastStart = match.range.endInclusive + 1\n        }\n        result.add(input.subSequence(lastStart, input.length).toString())\n        return result\n    }\n\n\n    /**\n     * Returns the string representation of this regular expression, namely the [pattern] of this regular expression.\n     *\n     * Note that another regular expression constructed from the same pattern string may have different [options]\n     * and may match strings differently.\n     */\n    public override fun toString(): String = nativePattern.toString()\n\n    actual companion object {\n        /**\n         * Returns a regular expression that matches the specified [literal] string literally.\n         * No characters of that string will have special meaning when searching for an occurrence of the regular expression.\n         */\n        public actual fun fromLiteral(literal: String): Regex = Regex(escape(literal))\n\n        /**\n         * Returns a regular expression pattern string that matches the specified [literal] string literally.\n         * No characters of that string will have special meaning when searching for an occurrence of the regular expression.\n         */\n        public actual fun escape(literal: String): String = literal.nativeReplace(patternEscape, \"\\\\$&\")\n\n        /**\n         * Returns a literal replacement expression for the specified [literal] string.\n         * No characters of that string will have special meaning when it is used as a replacement string in [Regex.replace] function.\n         */\n        public actual fun escapeReplacement(literal: String): String = literal.nativeReplace(replacementEscape, \"$$$$\")\n\n        private val patternEscape = RegExp(\"\"\"[-\\\\^$*+?.()|[\\]{}]\"\"\", \"g\")\n        private val replacementEscape = RegExp(\"\"\"\\$\"\"\", \"g\")\n    }\n}\n\n/** Creates a regular expression from the specified [pattern] string and the specified single [option].  */\n@Deprecated(\"Provided for binary compatibility\", level = DeprecationLevel.HIDDEN)\n@JsName(\"Regex_sb3q2\\$\")\npublic fun Regex_0(pattern: String, option: RegexOption): Regex = Regex(pattern, setOf(option))\n\n/** Creates a regular expression from the specified [pattern] string and the default options.  */\n@Deprecated(\"Provided for binary compatibility\", level = DeprecationLevel.HIDDEN)\n@JsName(\"Regex_61zpoe\\$\")\npublic fun Regex_1(pattern: String): Regex = Regex(pattern, emptySet())\n\n\n\n\nprivate fun RegExp.findNext(input: String, from: Int): MatchResult? {\n    this.lastIndex = from\n    val match = exec(input)\n    if (match == null) return null\n    val range = match.index..lastIndex - 1\n\n    return object : MatchResult {\n        override val range: IntRange = range\n        override val value: String\n            get() = match[0]!!\n\n        override val groups: MatchGroupCollection = object : MatchGroupCollection, AbstractCollection<MatchGroup?>() {\n            override val size: Int get() = match.length\n            override fun iterator(): Iterator<MatchGroup?> = indices.asSequence().map { this[it] }.iterator()\n            override fun get(index: Int): MatchGroup? = match[index]?.let { MatchGroup(it) }\n        }\n\n\n        private var groupValues_: List<String>? = null\n\n        override val groupValues: List<String>\n            get() {\n                if (groupValues_ == null) {\n                    groupValues_ = object : AbstractList<String>() {\n                        override val size: Int get() = match.length\n                        override fun get(index: Int): String = match[index] ?: \"\"\n                    }\n                }\n                return groupValues_!!\n            }\n\n        override fun next(): MatchResult? = this@findNext.findNext(input, if (range.isEmpty()) range.start + 1 else range.endInclusive + 1)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.appendRange(this, 0, startIndex)\n    sb.append(replacement)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.appendRange(this, 0, startIndex)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n * @sample samples.text.Strings.indexOf\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.comparisons\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\n\n/**\n * Returns the greater of two values.\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T): T {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Byte, b: Byte): Byte {\n    return Math.max(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Short, b: Short): Short {\n    return Math.max(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Int, b: Int): Int {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"DEPRECATION_ERROR\", \"NOTHING_TO_INLINE\")\npublic actual inline fun maxOf(a: Long, b: Long): Long {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Float, b: Float): Float {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Double, b: Double): Double {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of three values.\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T, c: T): T {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Short, b: Short, c: Short): Short {\n    return Math.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Int, b: Int, c: Int): Int {\n    return Math.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Long, b: Long, c: Long): Long {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Float, b: Float, c: Float): Float {\n    return Math.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Double, b: Double, c: Double): Double {\n    return Math.max(a, b, c)\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, vararg other: T): T {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Byte, vararg other: Byte): Byte {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Short, vararg other: Short): Short {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Int, vararg other: Int): Int {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Long, vararg other: Long): Long {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Float, vararg other: Float): Float {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Double, vararg other: Double): Double {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T): T {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Byte, b: Byte): Byte {\n    return Math.min(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Short, b: Short): Short {\n    return Math.min(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Int, b: Int): Int {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"DEPRECATION_ERROR\", \"NOTHING_TO_INLINE\")\npublic actual inline fun minOf(a: Long, b: Long): Long {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Float, b: Float): Float {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Double, b: Double): Double {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T, c: T): T {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Short, b: Short, c: Short): Short {\n    return Math.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Int, b: Int, c: Int): Int {\n    return Math.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Long, b: Long, c: Long): Long {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Float, b: Float, c: Float): Float {\n    return Math.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Double, b: Double, c: Double): Double {\n    return Math.min(a, b, c)\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun <T : Comparable<T>> minOf(a: T, vararg other: T): T {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Byte, vararg other: Byte): Byte {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Short, vararg other: Short): Short {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Int, vararg other: Int): Int {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Long, vararg other: Long): Long {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Float, vararg other: Float): Float {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Double, vararg other: Double): Double {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(ch: Char, fromIndex: Int): Int = nativeIndexOf(ch.toString(), fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(ch: Char, fromIndex: Int): Int = nativeLastIndexOf(ch.toString(), fromIndex)\n\n/**\n * Returns `true` if this string starts with the specified prefix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.startsWith(prefix: String, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeStartsWith(prefix, 0)\n    else\n        return regionMatches(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this string starting at the specified offset [startIndex] starts with the specified prefix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.startsWith(prefix: String, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeStartsWith(prefix, startIndex)\n    else\n        return regionMatches(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this string ends with the specified suffix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.endsWith(suffix: String, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeEndsWith(suffix)\n    else\n        return regionMatches(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\npublic fun String.matches(regex: String): Boolean {\n    val result = this.match(regex)\n    return result != null && result.size != 0\n}\n\npublic actual fun CharSequence.isBlank(): Boolean = length == 0 || (if (this is String) this else this.toString()).matches(\"^[\\\\s\\\\xA0]+$\")\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String?.equals(other: String?, ignoreCase: Boolean = false): Boolean =\n    if (this == null)\n        other == null\n    else if (!ignoreCase)\n        this == other\n    else\n        other != null && this.toLowerCase() == other.toLowerCase()\n\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharSequence.regionMatches(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean = false): Boolean =\n    regionMatchesImpl(thisOffset, other, otherOffset, length, ignoreCase)\n\n\n/**\n * Returns a copy of this string having its first letter titlecased using the rules of the default locale,\n * or the original string if it's empty or already starts with a title case letter.\n *\n * The title case of a character is usually the same as its upper case with several exceptions.\n * The particular list of characters with the special title case form depends on the underlying platform.\n *\n * @sample samples.text.Strings.capitalize\n */\npublic actual fun String.capitalize(): String {\n    return if (isNotEmpty()) substring(0, 1).toUpperCase() + substring(1) else this\n}\n\n/**\n * Returns a copy of this string having its first letter lowercased using the rules of the default locale,\n * or the original string if it's empty or already starts with a lower case letter.\n *\n * @sample samples.text.Strings.decapitalize\n */\npublic actual fun String.decapitalize(): String {\n    return if (isNotEmpty()) substring(0, 1).toLowerCase() + substring(1) else this\n}\n\n/**\n * Returns a string containing this char sequence repeated [n] times.\n * @throws [IllegalArgumentException] when n < 0.\n */\npublic actual fun CharSequence.repeat(n: Int): String {\n    require(n >= 0) { \"Count 'n' must be non-negative, but was $n.\" }\n    return when (n) {\n        0 -> \"\"\n        1 -> this.toString()\n        else -> {\n            var result = \"\"\n            if (!isEmpty()) {\n                var s = this.toString()\n                var count = n\n                while (true) {\n                    if ((count and 1) == 1) {\n                        result += s\n                    }\n                    count = count ushr 1\n                    if (count == 0) {\n                        break\n                    }\n                    s += s\n                }\n            }\n            return result\n        }\n    }\n}\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldValue), if (ignoreCase) \"gi\" else \"g\"), Regex.escapeReplacement(newValue))\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldChar.toString()), if (ignoreCase) \"gi\" else \"g\"), newChar.toString())\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replaceFirst(oldValue: String, newValue: String, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldValue), if (ignoreCase) \"i\" else \"\"), Regex.escapeReplacement(newValue))\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replaceFirst(oldChar: Char, newChar: Char, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldChar.toString()), if (ignoreCase) \"i\" else \"\"), newChar.toString())\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\nimport kotlin.js.JsName\n\n/**\n * Provides a skeletal implementation of the read-only [Collection] interface.\n *\n * @param E the type of elements contained in the collection. The collection is covariant in its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractCollection<out E> protected constructor() : Collection<E> {\n    abstract override val size: Int\n    abstract override fun iterator(): Iterator<E>\n\n    override fun contains(element: @UnsafeVariance E): Boolean = any { it == element }\n\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean =\n        elements.all { contains(it) } // use when js will support bound refs: elements.all(this::contains)\n\n    override fun isEmpty(): Boolean = size == 0\n\n    override fun toString(): String = joinToString(\", \", \"[\", \"]\") {\n        if (it === this) \"(this Collection)\" else it.toString()\n    }\n\n    /**\n     * Returns new array of type `Array<Any?>` with the elements of this collection.\n     */\n    @JsName(\"toArray\")\n    protected open fun toArray(): Array<Any?> = copyToArrayImpl(this)\n\n    /**\n     * Fills the provided [array] or creates new array of the same type\n     * and fills it with the elements of this collection.\n     */\n    protected open fun <T> toArray(array: Array<T>): Array<T> = copyToArrayImpl(this, array)\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractList\n * Copyright 2007 Google Inc.\n*/\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [List] interface.\n *\n * This class is intended to help implementing read-only lists so it doesn't support concurrent modification tracking.\n *\n * @param E the type of elements contained in the list. The list is covariant in its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractList<out E> protected constructor() : AbstractCollection<E>(), List<E> {\n    abstract override val size: Int\n    abstract override fun get(index: Int): E\n\n    override fun iterator(): Iterator<E> = IteratorImpl()\n\n    override fun indexOf(element: @UnsafeVariance E): Int = indexOfFirst { it == element }\n\n    override fun lastIndexOf(element: @UnsafeVariance E): Int = indexOfLast { it == element }\n\n    override fun listIterator(): ListIterator<E> = ListIteratorImpl(0)\n\n    override fun listIterator(index: Int): ListIterator<E> = ListIteratorImpl(index)\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<E> = SubList(this, fromIndex, toIndex)\n\n    private class SubList<out E>(private val list: AbstractList<E>, private val fromIndex: Int, toIndex: Int) : AbstractList<E>(), RandomAccess {\n        private var _size: Int = 0\n\n        init {\n            checkRangeIndexes(fromIndex, toIndex, list.size)\n            this._size = toIndex - fromIndex\n        }\n\n        override fun get(index: Int): E {\n            checkElementIndex(index, _size)\n\n            return list[fromIndex + index]\n        }\n\n        override val size: Int get() = _size\n    }\n\n    /**\n     * Compares this list with other list instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [List] of the same size, which contains the same elements in the same order.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is List<*>) return false\n\n        return orderedEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this list.\n     */\n    override fun hashCode(): Int = orderedHashCode(this)\n\n    private open inner class IteratorImpl : Iterator<E> {\n        /** the index of the item that will be returned on the next call to [next]`()` */\n        protected var index = 0\n\n        override fun hasNext(): Boolean = index < size\n\n        override fun next(): E {\n            if (!hasNext()) throw NoSuchElementException()\n            return get(index++)\n        }\n    }\n\n    /**\n     * Implementation of [ListIterator] for abstract lists.\n     */\n    private open inner class ListIteratorImpl(index: Int) : IteratorImpl(), ListIterator<E> {\n\n        init {\n            checkPositionIndex(index, this@AbstractList.size)\n            this.index = index\n        }\n\n        override fun hasPrevious(): Boolean = index > 0\n\n        override fun nextIndex(): Int = index\n\n        override fun previous(): E {\n            if (!hasPrevious()) throw NoSuchElementException()\n            return get(--index)\n        }\n\n        override fun previousIndex(): Int = index - 1\n    }\n\n    internal companion object {\n        internal fun checkElementIndex(index: Int, size: Int) {\n            if (index < 0 || index >= size) {\n                throw IndexOutOfBoundsException(\"index: $index, size: $size\")\n            }\n        }\n\n        internal fun checkPositionIndex(index: Int, size: Int) {\n            if (index < 0 || index > size) {\n                throw IndexOutOfBoundsException(\"index: $index, size: $size\")\n            }\n        }\n\n        internal fun checkRangeIndexes(fromIndex: Int, toIndex: Int, size: Int) {\n            if (fromIndex < 0 || toIndex > size) {\n                throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex, size: $size\")\n            }\n            if (fromIndex > toIndex) {\n                throw IllegalArgumentException(\"fromIndex: $fromIndex > toIndex: $toIndex\")\n            }\n        }\n\n        internal fun checkBoundsIndexes(startIndex: Int, endIndex: Int, size: Int) {\n            if (startIndex < 0 || endIndex > size) {\n                throw IndexOutOfBoundsException(\"startIndex: $startIndex, endIndex: $endIndex, size: $size\")\n            }\n            if (startIndex > endIndex) {\n                throw IllegalArgumentException(\"startIndex: $startIndex > endIndex: $endIndex\")\n            }\n        }\n\n        internal fun orderedHashCode(c: Collection<*>): Int {\n            var hashCode = 1\n            for (e in c) {\n                hashCode = 31 * hashCode + (e?.hashCode() ?: 0)\n            }\n            return hashCode\n        }\n\n        internal fun orderedEquals(c: Collection<*>, other: Collection<*>): Boolean {\n            if (c.size != other.size) return false\n\n            val otherIterator = other.iterator()\n            for (elem in c) {\n                val elemOther = otherIterator.next()\n                if (elem != elemOther) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractMap\n * Copyright 2007 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [Map] interface.\n *\n * The implementor is required to implement [entries] property, which should return read-only set of map entries.\n *\n * @param K the type of map keys. The map is invariant in its key type.\n * @param V the type of map values. The map is covariant in its value type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractMap<K, out V> protected constructor() : Map<K, V> {\n\n    override fun containsKey(key: K): Boolean {\n        return implFindEntry(key) != null\n    }\n\n    override fun containsValue(value: @UnsafeVariance V): Boolean = entries.any { it.value == value }\n\n    internal fun containsEntry(entry: Map.Entry<*, *>?): Boolean {\n        // since entry comes from @UnsafeVariance parameters it can be virtually anything\n        if (entry !is Map.Entry<*, *>) return false\n        val key = entry.key\n        val value = entry.value\n        val ourValue = get(key)\n\n        if (value != ourValue) {\n            return false\n        }\n\n        // Perhaps it was null and we don't contain the key?\n        if (ourValue == null && !containsKey(key)) {\n            return false\n        }\n\n        return true\n    }\n\n\n    /**\n     * Compares this map with other instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [Map] of the same size, all entries of which are contained in the [entries] set of this map.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Map<*, *>) return false\n        if (size != other.size) return false\n\n        return other.entries.all { containsEntry(it) }\n    }\n\n    override operator fun get(key: K): V? = implFindEntry(key)?.value\n\n\n    /**\n     * Returns the hash code value for this map.\n     *\n     * It is the same as the hashCode of [entries] set.\n     */\n    override fun hashCode(): Int = entries.hashCode()\n\n    override fun isEmpty(): Boolean = size == 0\n    override val size: Int get() = entries.size\n\n    /**\n     * Returns a read-only [Set] of all keys in this map.\n     *\n     * Accessing this property first time creates a keys view from [entries].\n     * All subsequent accesses just return the created instance.\n     */\n    override val keys: Set<K>\n        get() {\n            if (_keys == null) {\n                _keys = object : AbstractSet<K>() {\n                    override operator fun contains(element: K): Boolean = containsKey(element)\n\n                    override operator fun iterator(): Iterator<K> {\n                        val entryIterator = entries.iterator()\n                        return object : Iterator<K> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): K = entryIterator.next().key\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMap.size\n                }\n            }\n            return _keys!!\n        }\n\n    @kotlin.jvm.Volatile\n    private var _keys: Set<K>? = null\n\n\n    override fun toString(): String = entries.joinToString(\", \", \"{\", \"}\") { toString(it) }\n\n    private fun toString(entry: Map.Entry<K, V>): String = toString(entry.key) + \"=\" + toString(entry.value)\n\n    private fun toString(o: Any?): String = if (o === this) \"(this Map)\" else o.toString()\n\n    /**\n     * Returns a read-only [Collection] of all values in this map.\n     *\n     * Accessing this property first time creates a values view from [entries].\n     * All subsequent accesses just return the created instance.\n     */\n    override val values: Collection<V>\n        get() {\n            if (_values == null) {\n                _values = object : AbstractCollection<V>() {\n                    override operator fun contains(element: @UnsafeVariance V): Boolean = containsValue(element)\n\n                    override operator fun iterator(): Iterator<V> {\n                        val entryIterator = entries.iterator()\n                        return object : Iterator<V> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): V = entryIterator.next().value\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMap.size\n                }\n            }\n            return _values!!\n        }\n\n    @kotlin.jvm.Volatile\n    private var _values: Collection<V>? = null\n\n    private fun implFindEntry(key: K): Map.Entry<K, V>? = entries.firstOrNull { it.key == key }\n\n    internal companion object {\n\n        internal fun entryHashCode(e: Map.Entry<*, *>): Int = with(e) { (key?.hashCode() ?: 0) xor (value?.hashCode() ?: 0) }\n        internal fun entryToString(e: Map.Entry<*, *>): String = with(e) { \"$key=$value\" }\n        internal fun entryEquals(e: Map.Entry<*, *>, other: Any?): Boolean {\n            if (other !is Map.Entry<*, *>) return false\n            return e.key == other.key && e.value == other.value\n        }\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [Set] interface.\n *\n * This class is intended to help implementing read-only sets so it doesn't support concurrent modification tracking.\n *\n * @param E the type of elements contained in the set. The set is covariant in its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractSet<out E> protected constructor() : AbstractCollection<E>(), Set<E> {\n\n    /**\n     * Compares this set with other set instance with the unordered structural equality.\n     *\n     * @return true, if [other] instance is a [Set] of the same size, all elements of which are contained in this set.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Set<*>) return false\n        return setEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this set.\n     */\n    override fun hashCode(): Int = unorderedHashCode(this)\n\n    internal companion object {\n        internal fun unorderedHashCode(c: Collection<*>): Int {\n            var hashCode = 0\n            for (element in c) {\n                hashCode += (element?.hashCode() ?: 0)\n            }\n            return hashCode\n        }\n\n        internal fun setEquals(c: Set<*>, other: Set<*>): Boolean {\n            if (c.size != other.size) return false\n            return c.containsAll(other)\n        }\n    }\n\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Data class representing a value from a collection or sequence, along with its index in that collection or sequence.\n *\n * @property value the underlying value.\n * @property index the index of the value in the collection or sequence.\n */\npublic data class IndexedValue<out T>(public val index: Int, public val value: T)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n/**\n * Returns the value for the given key, or the implicit default value for this map.\n * By default no implicit value is provided for maps and a [NoSuchElementException] is thrown.\n * To create a map with implicit default value use [withDefault] method.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and no implicit default was provided for that map.\n */\n@kotlin.jvm.JvmName(\"getOrImplicitDefaultNullable\")\n@PublishedApi\ninternal fun <K, V> Map<K, V>.getOrImplicitDefault(key: K): V {\n    if (this is MapWithDefault)\n        return this.getOrImplicitDefault(key)\n\n    return getOrElseNullable(key, { throw NoSuchElementException(\"Key $key is missing in the map.\") })\n}\n\n/**\n * Returns a wrapper of this read-only map, having the implicit default value provided with the specified function [defaultValue].\n *\n * This implicit default value is used when the original map doesn't contain a value for the key specified\n * and a value is obtained with [Map.getValue] function, for example when properties are delegated to the map.\n *\n * When this map already has an implicit default value provided with a former call to [withDefault], it is being replaced by this call.\n */\npublic fun <K, V> Map<K, V>.withDefault(defaultValue: (key: K) -> V): Map<K, V> =\n    when (this) {\n        is MapWithDefault -> this.map.withDefault(defaultValue)\n        else -> MapWithDefaultImpl(this, defaultValue)\n    }\n\n/**\n * Returns a wrapper of this mutable map, having the implicit default value provided with the specified function [defaultValue].\n *\n * This implicit default value is used when the original map doesn't contain a value for the key specified\n * and a value is obtained with [Map.getValue] function, for example when properties are delegated to the map.\n *\n * When this map already has an implicit default value provided with a former call to [withDefault], it is being replaced by this call.\n */\n@kotlin.jvm.JvmName(\"withDefaultMutable\")\npublic fun <K, V> MutableMap<K, V>.withDefault(defaultValue: (key: K) -> V): MutableMap<K, V> =\n    when (this) {\n        is MutableMapWithDefault -> this.map.withDefault(defaultValue)\n        else -> MutableMapWithDefaultImpl(this, defaultValue)\n    }\n\n\nprivate interface MapWithDefault<K, out V> : Map<K, V> {\n    public val map: Map<K, V>\n    public fun getOrImplicitDefault(key: K): V\n}\n\nprivate interface MutableMapWithDefault<K, V> : MutableMap<K, V>, MapWithDefault<K, V> {\n    public override val map: MutableMap<K, V>\n}\n\n\nprivate class MapWithDefaultImpl<K, out V>(public override val map: Map<K, V>, private val default: (key: K) -> V) : MapWithDefault<K, V> {\n    override fun equals(other: Any?): Boolean = map.equals(other)\n    override fun hashCode(): Int = map.hashCode()\n    override fun toString(): String = map.toString()\n    override val size: Int get() = map.size\n    override fun isEmpty(): Boolean = map.isEmpty()\n    override fun containsKey(key: K): Boolean = map.containsKey(key)\n    override fun containsValue(value: @UnsafeVariance V): Boolean = map.containsValue(value)\n    override fun get(key: K): V? = map.get(key)\n    override val keys: Set<K> get() = map.keys\n    override val values: Collection<V> get() = map.values\n    override val entries: Set<Map.Entry<K, V>> get() = map.entries\n\n    override fun getOrImplicitDefault(key: K): V = map.getOrElseNullable(key, { default(key) })\n}\n\nprivate class MutableMapWithDefaultImpl<K, V>(public override val map: MutableMap<K, V>, private val default: (key: K) -> V) : MutableMapWithDefault<K, V> {\n    override fun equals(other: Any?): Boolean = map.equals(other)\n    override fun hashCode(): Int = map.hashCode()\n    override fun toString(): String = map.toString()\n    override val size: Int get() = map.size\n    override fun isEmpty(): Boolean = map.isEmpty()\n    override fun containsKey(key: K): Boolean = map.containsKey(key)\n    override fun containsValue(value: @UnsafeVariance V): Boolean = map.containsValue(value)\n    override fun get(key: K): V? = map.get(key)\n    override val keys: MutableSet<K> get() = map.keys\n    override val values: MutableCollection<V> get() = map.values\n    override val entries: MutableSet<MutableMap.MutableEntry<K, V>> get() = map.entries\n\n    override fun put(key: K, value: V): V? = map.put(key, value)\n    override fun remove(key: K): V? = map.remove(key)\n    override fun putAll(from: Map<out K, V>) = map.putAll(from)\n    override fun clear() = map.clear()\n\n    override fun getOrImplicitDefault(key: K): V = map.getOrElseNullable(key, { default(key) })\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeFirst(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(0)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeFirstOrNull(): T? = if (isEmpty()) null else removeAt(0)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeLast(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(lastIndex)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeLastOrNull(): T? = if (isEmpty()) null else removeAt(lastIndex)\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n@file:OptIn(ExperimentalTypeInference::class)\n\npackage kotlin.sequences\n\nimport kotlin.coroutines.*\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.experimental.ExperimentalTypeInference\n\n/**\n * Builds a [Sequence] lazily yielding values one by one.\n *\n * @see kotlin.sequences.generateSequence\n *\n * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n * @sample samples.collections.Sequences.Building.buildFibonacciSequence\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> sequence(@BuilderInference block: suspend SequenceScope<T>.() -> Unit): Sequence<T> = Sequence { iterator(block) }\n\n@SinceKotlin(\"1.3\")\n@Deprecated(\"Use 'sequence { }' function instead.\", ReplaceWith(\"sequence(builderAction)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> buildSequence(@BuilderInference noinline builderAction: suspend SequenceScope<T>.() -> Unit): Sequence<T> = Sequence { iterator(builderAction) }\n\n/**\n * Builds an [Iterator] lazily yielding values one by one.\n *\n * @sample samples.collections.Sequences.Building.buildIterator\n * @sample samples.collections.Iterables.Building.iterable\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> iterator(@BuilderInference block: suspend SequenceScope<T>.() -> Unit): Iterator<T> {\n    val iterator = SequenceBuilderIterator<T>()\n    iterator.nextStep = block.createCoroutineUnintercepted(receiver = iterator, completion = iterator)\n    return iterator\n}\n\n@SinceKotlin(\"1.3\")\n@Deprecated(\"Use 'iterator { }' function instead.\", ReplaceWith(\"iterator(builderAction)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> buildIterator(@BuilderInference noinline builderAction: suspend SequenceScope<T>.() -> Unit): Iterator<T> = iterator(builderAction)\n\n/**\n * The scope for yielding values of a [Sequence] or an [Iterator], provides [yield] and [yieldAll] suspension functions.\n *\n * @see sequence\n * @see iterator\n *\n * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n * @sample samples.collections.Sequences.Building.buildFibonacciSequence\n */\n@RestrictsSuspension\n@SinceKotlin(\"1.3\")\npublic abstract class SequenceScope<in T> internal constructor() {\n    /**\n     * Yields a value to the [Iterator] being built and suspends\n     * until the next value is requested.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     * @sample samples.collections.Sequences.Building.buildFibonacciSequence\n     */\n    public abstract suspend fun yield(value: T)\n\n    /**\n     * Yields all values from the `iterator` to the [Iterator] being built\n     * and suspends until all these values are iterated and the next one is requested.\n     *\n     * The sequence of values returned by the given iterator can be potentially infinite.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     */\n    public abstract suspend fun yieldAll(iterator: Iterator<T>)\n\n    /**\n     * Yields a collections of values to the [Iterator] being built\n     * and suspends until all these values are iterated and the next one is requested.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     */\n    public suspend fun yieldAll(elements: Iterable<T>) {\n        if (elements is Collection && elements.isEmpty()) return\n        return yieldAll(elements.iterator())\n    }\n\n    /**\n     * Yields potentially infinite sequence of values  to the [Iterator] being built\n     * and suspends until all these values are iterated and the next one is requested.\n     *\n     * The sequence can be potentially infinite.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     */\n    public suspend fun yieldAll(sequence: Sequence<T>) = yieldAll(sequence.iterator())\n}\n\n@Deprecated(\"Use SequenceScope class instead.\", ReplaceWith(\"SequenceScope<T>\"), level = DeprecationLevel.ERROR)\npublic typealias SequenceBuilder<T> = SequenceScope<T>\n\nprivate typealias State = Int\n\nprivate const val State_NotReady: State = 0\nprivate const val State_ManyNotReady: State = 1\nprivate const val State_ManyReady: State = 2\nprivate const val State_Ready: State = 3\nprivate const val State_Done: State = 4\nprivate const val State_Failed: State = 5\n\nprivate class SequenceBuilderIterator<T> : SequenceScope<T>(), Iterator<T>, Continuation<Unit> {\n    private var state = State_NotReady\n    private var nextValue: T? = null\n    private var nextIterator: Iterator<T>? = null\n    var nextStep: Continuation<Unit>? = null\n\n    override fun hasNext(): Boolean {\n        while (true) {\n            when (state) {\n                State_NotReady -> {}\n                State_ManyNotReady ->\n                    if (nextIterator!!.hasNext()) {\n                        state = State_ManyReady\n                        return true\n                    } else {\n                        nextIterator = null\n                    }\n                State_Done -> return false\n                State_Ready, State_ManyReady -> return true\n                else -> throw exceptionalState()\n            }\n\n            state = State_Failed\n            val step = nextStep!!\n            nextStep = null\n            step.resume(Unit)\n        }\n    }\n\n    override fun next(): T {\n        when (state) {\n            State_NotReady, State_ManyNotReady -> return nextNotReady()\n            State_ManyReady -> {\n                state = State_ManyNotReady\n                return nextIterator!!.next()\n            }\n            State_Ready -> {\n                state = State_NotReady\n                @Suppress(\"UNCHECKED_CAST\")\n                val result = nextValue as T\n                nextValue = null\n                return result\n            }\n            else -> throw exceptionalState()\n        }\n    }\n\n    private fun nextNotReady(): T {\n        if (!hasNext()) throw NoSuchElementException() else return next()\n    }\n\n    private fun exceptionalState(): Throwable = when (state) {\n        State_Done -> NoSuchElementException()\n        State_Failed -> IllegalStateException(\"Iterator has failed.\")\n        else -> IllegalStateException(\"Unexpected state of the iterator: $state\")\n    }\n\n\n    override suspend fun yield(value: T) {\n        nextValue = value\n        state = State_Ready\n        return suspendCoroutineUninterceptedOrReturn { c ->\n            nextStep = c\n            COROUTINE_SUSPENDED\n        }\n    }\n\n    override suspend fun yieldAll(iterator: Iterator<T>) {\n        if (!iterator.hasNext()) return\n        nextIterator = iterator\n        state = State_ManyReady\n        return suspendCoroutineUninterceptedOrReturn { c ->\n            nextStep = c\n            COROUTINE_SUSPENDED\n        }\n    }\n\n    // Completion continuation implementation\n    override fun resumeWith(result: Result<Unit>) {\n        result.getOrThrow() // just rethrow exception if it is there\n        state = State_Done\n    }\n\n    override val context: CoroutineContext\n        get() = EmptyCoroutineContext\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T) -> Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n    }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n    }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n    }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n    }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenComparator.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparison(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@then.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n    Comparator<T> { a, b ->\n        val previousCompare = this@thenDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n    }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> -1\n            b == null -> 1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> 1\n            b == null -> -1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T : Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>) : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\n/**\n * Marks coroutine context element that intercepts coroutine continuations.\n * The coroutines framework uses [ContinuationInterceptor.Key] to retrieve the interceptor and\n * intercepts all coroutine continuations with [interceptContinuation] invocations.\n *\n * [ContinuationInterceptor] behaves like a [polymorphic element][AbstractCoroutineContextKey], meaning that\n * its implementation delegates [get][CoroutineContext.Element.get] and [minusKey][CoroutineContext.Element.minusKey]\n * to [getPolymorphicElement] and [minusPolymorphicKey] respectively.\n * [ContinuationInterceptor] subtypes can be extracted from the coroutine context using either [ContinuationInterceptor.Key]\n * or subtype key if it extends [AbstractCoroutineContextKey].\n */\n@SinceKotlin(\"1.3\")\npublic interface ContinuationInterceptor : CoroutineContext.Element {\n    /**\n     * The key that defines *the* context interceptor.\n     */\n    companion object Key : CoroutineContext.Key<ContinuationInterceptor>\n\n    /**\n     * Returns continuation that wraps the original [continuation], thus intercepting all resumptions.\n     * This function is invoked by coroutines framework when needed and the resulting continuations are\n     * cached internally per each instance of the original [continuation].\n     *\n     * This function may simply return original [continuation] if it does not want to intercept this particular continuation.\n     *\n     * When the original [continuation] completes, coroutine framework invokes [releaseInterceptedContinuation]\n     * with the resulting continuation if it was intercepted, that is if `interceptContinuation` had previously\n     * returned a different continuation instance.\n     */\n    public fun <T> interceptContinuation(continuation: Continuation<T>): Continuation<T>\n\n    /**\n     * Invoked for the continuation instance returned by [interceptContinuation] when the original\n     * continuation completes and will not be used anymore. This function is invoked only if [interceptContinuation]\n     * had returned a different continuation instance from the one it was invoked with.\n     *\n     * Default implementation does nothing.\n     *\n     * @param continuation Continuation instance returned by this interceptor's [interceptContinuation] invocation.\n     */\n    public fun releaseInterceptedContinuation(continuation: Continuation<*>) {\n        /* do nothing by default */\n    }\n\n    public override operator fun <E : CoroutineContext.Element> get(key: CoroutineContext.Key<E>): E? {\n        // getPolymorphicKey specialized for ContinuationInterceptor key\n        @OptIn(ExperimentalStdlibApi::class)\n        if (key is AbstractCoroutineContextKey<*, *>) {\n            @Suppress(\"UNCHECKED_CAST\")\n            return if (key.isSubKey(this.key)) key.tryCast(this) as? E else null\n        }\n        @Suppress(\"UNCHECKED_CAST\")\n        return if (ContinuationInterceptor === key) this as E else null\n    }\n\n\n    public override fun minusKey(key: CoroutineContext.Key<*>): CoroutineContext {\n        // minusPolymorphicKey specialized for ContinuationInterceptor key\n        @OptIn(ExperimentalStdlibApi::class)\n        if (key is AbstractCoroutineContextKey<*, *>) {\n            return if (key.isSubKey(this.key) && key.tryCast(this) != null) EmptyCoroutineContext else this\n        }\n        return if (ContinuationInterceptor === key) EmptyCoroutineContext else this\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\n/**\n * Persistent context for the coroutine. It is an indexed set of [Element] instances.\n * An indexed set is a mix between a set and a map.\n * Every element in this set has a unique [Key].\n */\n@SinceKotlin(\"1.3\")\npublic interface CoroutineContext {\n    /**\n     * Returns the element with the given [key] from this context or `null`.\n     */\n    public operator fun <E : Element> get(key: Key<E>): E?\n\n    /**\n     * Accumulates entries of this context starting with [initial] value and applying [operation]\n     * from left to right to current accumulator value and each element of this context.\n     */\n    public fun <R> fold(initial: R, operation: (R, Element) -> R): R\n\n    /**\n     * Returns a context containing elements from this context and elements from  other [context].\n     * The elements from this context with the same key as in the other one are dropped.\n     */\n    public operator fun plus(context: CoroutineContext): CoroutineContext =\n        if (context === EmptyCoroutineContext) this else // fast path -- avoid lambda creation\n            context.fold(this) { acc, element ->\n                val removed = acc.minusKey(element.key)\n                if (removed === EmptyCoroutineContext) element else {\n                    // make sure interceptor is always last in the context (and thus is fast to get when present)\n                    val interceptor = removed[ContinuationInterceptor]\n                    if (interceptor == null) CombinedContext(removed, element) else {\n                        val left = removed.minusKey(ContinuationInterceptor)\n                        if (left === EmptyCoroutineContext) CombinedContext(element, interceptor) else\n                            CombinedContext(CombinedContext(left, element), interceptor)\n                    }\n                }\n            }\n\n    /**\n     * Returns a context containing elements from this context, but without an element with\n     * the specified [key].\n     */\n    public fun minusKey(key: Key<*>): CoroutineContext\n\n    /**\n     * Key for the elements of [CoroutineContext]. [E] is a type of element with this key.\n     */\n    public interface Key<E : Element>\n\n    /**\n     * An element of the [CoroutineContext]. An element of the coroutine context is a singleton context by itself.\n     */\n    public interface Element : CoroutineContext {\n        /**\n         * A key of this coroutine context element.\n         */\n        public val key: Key<*>\n\n        public override operator fun <E : Element> get(key: Key<E>): E? =\n            @Suppress(\"UNCHECKED_CAST\")\n            if (this.key == key) this as E else null\n\n        public override fun <R> fold(initial: R, operation: (R, Element) -> R): R =\n            operation(initial, this)\n\n        public override fun minusKey(key: Key<*>): CoroutineContext =\n            if (this.key == key) EmptyCoroutineContext else this\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.CoroutineContext.Element\nimport kotlin.coroutines.CoroutineContext.Key\n\n/**\n * Base class for [CoroutineContext.Element] implementations.\n */\n@SinceKotlin(\"1.3\")\npublic abstract class AbstractCoroutineContextElement(public override val key: Key<*>) : Element\n\n/**\n * Base class for [CoroutineContext.Key] associated with polymorphic [CoroutineContext.Element] implementation.\n * Polymorphic element implementation implies delegating its [get][Element.get] and [minusKey][Element.minusKey]\n * to [getPolymorphicElement] and [minusPolymorphicKey] respectively.\n *\n * Polymorphic elements can be extracted from the coroutine context using both element key and its supertype key.\n * Example of polymorphic elements:\n * ```\n * open class BaseElement : CoroutineContext.Element {\n *     companion object Key : CoroutineContext.Key<BaseElement>\n *     override val key: CoroutineContext.Key<*> get() = Key\n *     // It is important to use getPolymorphicKey and minusPolymorphicKey\n *     override fun <E : CoroutineContext.Element> get(key: CoroutineContext.Key<E>): E? = getPolymorphicElement(key)\n *     override fun minusKey(key: CoroutineContext.Key<*>): CoroutineContext = minusPolymorphicKey(key)\n * }\n *\n * class DerivedElement : BaseElement() {\n *     companion object Key : AbstractCoroutineContextKey<BaseElement, DerivedElement>(BaseElement, { it as? DerivedElement })\n * }\n * // Now it is possible to query both `BaseElement` and `DerivedElement`\n * someContext[BaseElement] // Returns BaseElement?, non-null both for BaseElement and DerivedElement instances\n * someContext[DerivedElement] // Returns DerivedElement?, non-null only for DerivedElement instance\n * ```\n * @param B base class of a polymorphic element\n * @param baseKey an instance of base key\n * @param E element type associated with the current key\n * @param safeCast a function that can safely cast abstract [CoroutineContext.Element] to the concrete [E] type\n *                 and return the element if it is a subtype of [E] or `null` otherwise.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic abstract class AbstractCoroutineContextKey<B : Element, E : B>(\n    baseKey: Key<B>,\n    private val safeCast: (element: Element) -> E?\n) : Key<E> {\n    private val topmostKey: Key<*> = if (baseKey is AbstractCoroutineContextKey<*, *>) baseKey.topmostKey else baseKey\n\n    internal fun tryCast(element: Element): E? = safeCast(element)\n    internal fun isSubKey(key: Key<*>): Boolean = key === this || topmostKey === key\n}\n\n/**\n * Returns the current element if it is associated with the given [key] in a polymorphic manner or `null` otherwise.\n * This method returns non-null value if either [Element.key] is equal to the given [key] or if the [key] is associated\n * with [Element.key] via [AbstractCoroutineContextKey].\n * See [AbstractCoroutineContextKey] for the example of usage.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <E : Element> Element.getPolymorphicElement(key: Key<E>): E? {\n    if (key is AbstractCoroutineContextKey<*, *>) {\n        @Suppress(\"UNCHECKED_CAST\")\n        return if (key.isSubKey(this.key)) key.tryCast(this) as? E else null\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return if (this.key === key) this as E else null\n}\n\n/**\n * Returns empty coroutine context if the element is associated with the given [key] in a polymorphic manner\n * or `null` otherwise.\n * This method returns empty context if either [Element.key] is equal to the given [key] or if the [key] is associated\n * with [Element.key] via [AbstractCoroutineContextKey].\n * See [AbstractCoroutineContextKey] for the example of usage.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun Element.minusPolymorphicKey(key: Key<*>): CoroutineContext {\n    if (key is AbstractCoroutineContextKey<*, *>) {\n        return if (key.isSubKey(this.key) && key.tryCast(this) != null) EmptyCoroutineContext else this\n    }\n    return if (this.key === key) EmptyCoroutineContext else this\n}\n\n/**\n * An empty coroutine context.\n */\n@SinceKotlin(\"1.3\")\npublic object EmptyCoroutineContext : CoroutineContext, Serializable {\n    private const val serialVersionUID: Long = 0\n    private fun readResolve(): Any = EmptyCoroutineContext\n\n    public override fun <E : Element> get(key: Key<E>): E? = null\n    public override fun <R> fold(initial: R, operation: (R, Element) -> R): R = initial\n    public override fun plus(context: CoroutineContext): CoroutineContext = context\n    public override fun minusKey(key: Key<*>): CoroutineContext = this\n    public override fun hashCode(): Int = 0\n    public override fun toString(): String = \"EmptyCoroutineContext\"\n}\n\n//--------------------- internal impl ---------------------\n\n// this class is not exposed, but is hidden inside implementations\n// this is a left-biased list, so that `plus` works naturally\n@SinceKotlin(\"1.3\")\ninternal class CombinedContext(\n    private val left: CoroutineContext,\n    private val element: Element\n) : CoroutineContext, Serializable {\n\n    override fun <E : Element> get(key: Key<E>): E? {\n        var cur = this\n        while (true) {\n            cur.element[key]?.let { return it }\n            val next = cur.left\n            if (next is CombinedContext) {\n                cur = next\n            } else {\n                return next[key]\n            }\n        }\n    }\n\n    public override fun <R> fold(initial: R, operation: (R, Element) -> R): R =\n        operation(left.fold(initial, operation), element)\n\n    public override fun minusKey(key: Key<*>): CoroutineContext {\n        element[key]?.let { return left }\n        val newLeft = left.minusKey(key)\n        return when {\n            newLeft === left -> this\n            newLeft === EmptyCoroutineContext -> element\n            else -> CombinedContext(newLeft, element)\n        }\n    }\n\n    private fun size(): Int {\n        var cur = this\n        var size = 2\n        while (true) {\n            cur = cur.left as? CombinedContext ?: return size\n            size++\n        }\n    }\n\n    private fun contains(element: Element): Boolean =\n        get(element.key) == element\n\n    private fun containsAll(context: CombinedContext): Boolean {\n        var cur = context\n        while (true) {\n            if (!contains(cur.element)) return false\n            val next = cur.left\n            if (next is CombinedContext) {\n                cur = next\n            } else {\n                return contains(next as Element)\n            }\n        }\n    }\n\n    override fun equals(other: Any?): Boolean =\n        this === other || other is CombinedContext && other.size() == size() && other.containsAll(this)\n\n    override fun hashCode(): Int = left.hashCode() + element.hashCode()\n\n    override fun toString(): String =\n        \"[\" + fold(\"\") { acc, element ->\n            if (acc.isEmpty()) element.toString() else \"$acc, $element\"\n        } + \"]\"\n\n    private fun writeReplace(): Any {\n        val n = size()\n        val elements = arrayOfNulls<CoroutineContext>(n)\n        var index = 0\n        fold(Unit) { _, element -> elements[index++] = element }\n        check(index == n)\n        @Suppress(\"UNCHECKED_CAST\")\n        return Serialized(elements as Array<CoroutineContext>)\n    }\n\n    private class Serialized(val elements: Array<CoroutineContext>) : Serializable {\n        companion object {\n            private const val serialVersionUID: Long = 0L\n        }\n\n        private fun readResolve(): Any = elements.fold(EmptyCoroutineContext, CoroutineContext::plus)\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"IntrinsicsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.coroutines.intrinsics\n\nimport kotlin.contracts.*\nimport kotlin.coroutines.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Obtains the current continuation instance inside suspend functions and either suspends\n * currently running coroutine or returns result immediately without suspension.\n *\n * If the [block] returns the special [COROUTINE_SUSPENDED] value, it means that suspend function did suspend the execution and will\n * not return any result immediately. In this case, the [Continuation] provided to the [block] shall be\n * resumed by invoking [Continuation.resumeWith] at some moment in the\n * future when the result becomes available to resume the computation.\n *\n * Otherwise, the return value of the [block] must have a type assignable to [T] and represents the result of this suspend function.\n * It means that the execution was not suspended and the [Continuation] provided to the [block] shall not be invoked.\n * As the result type of the [block] is declared as `Any?` and cannot be correctly type-checked,\n * its proper return type remains on the conscience of the suspend function's author.\n *\n * Invocation of [Continuation.resumeWith] resumes coroutine directly in the invoker's thread without going through the\n * [ContinuationInterceptor] that might be present in the coroutine's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n *\n * Note that it is not recommended to call either [Continuation.resume] nor [Continuation.resumeWithException] functions synchronously\n * in the same stackframe where suspension function is run. Use [suspendCoroutine] as a safer way to obtain current\n * continuation instance.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\n@Suppress(\"UNUSED_PARAMETER\", \"RedundantSuspendModifier\")\npublic suspend inline fun <T> suspendCoroutineUninterceptedOrReturn(crossinline block: (Continuation<T>) -> Any?): T {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    throw NotImplementedError(\"Implementation of suspendCoroutineUninterceptedOrReturn is intrinsic\")\n}\n\n/**\n * This value is used as a return value of [suspendCoroutineUninterceptedOrReturn] `block` argument to state that\n * the execution was suspended and will not return any result immediately.\n *\n * **Note: this value should not be used in general code.** Using it outside of the context of\n * `suspendCoroutineUninterceptedOrReturn` function return value  (including, but not limited to,\n * storing this value in other properties, returning it from other functions, etc)\n * can lead to unspecified behavior of the code.\n */\n// It is implemented as property with getter to avoid ProGuard <clinit> problem with multifile IntrinsicsKt class\n@SinceKotlin(\"1.3\")\npublic val COROUTINE_SUSPENDED: Any get() = CoroutineSingletons.COROUTINE_SUSPENDED\n\n// Using enum here ensures two important properties:\n//  1. It makes SafeContinuation serializable with all kinds of serialization frameworks (since all of them natively support enums)\n//  2. It improves debugging experience, since you clearly see toString() value of those objects and what package they come from\n@SinceKotlin(\"1.3\")\n@PublishedApi // This class is Published API via serialized representation of SafeContinuation, don't rename/move\ninternal enum class CoroutineSingletons { COROUTINE_SUSPENDED, UNDECIDED, RESUMED }\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\nimport kotlin.math.nextDown\n\n/**\n * An abstract class that is implemented by random number generator algorithms.\n *\n * The companion object [Random.Default] is the default instance of [Random].\n *\n * To get a seeded instance of random generator use [Random] function.\n *\n * @sample samples.random.Randoms.defaultRandom\n */\n@SinceKotlin(\"1.3\")\npublic abstract class Random {\n\n    /**\n     * Gets the next random [bitCount] number of bits.\n     *\n     * Generates an `Int` whose lower [bitCount] bits are filled with random values and the remaining upper bits are zero.\n     *\n     * @param bitCount number of bits to generate, must be in range 0..32, otherwise the behavior is unspecified.\n     *\n     * @sample samples.random.Randoms.nextBits\n     */\n    public abstract fun nextBits(bitCount: Int): Int\n\n    /**\n     * Gets the next random `Int` from the random number generator.\n     *\n     * Generates an `Int` random value uniformly distributed between `Int.MIN_VALUE` and `Int.MAX_VALUE` (inclusive).\n     *\n     * @sample samples.random.Randoms.nextInt\n     */\n    public open fun nextInt(): Int = nextBits(32)\n\n    /**\n     * Gets the next random non-negative `Int` from the random number generator less than the specified [until] bound.\n     *\n     * Generates an `Int` random value uniformly distributed between `0` (inclusive) and the specified [until] bound (exclusive).\n     *\n     * @param until must be positive.\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     *\n     * @sample samples.random.Randoms.nextIntFromUntil\n     */\n    public open fun nextInt(until: Int): Int = nextInt(0, until)\n\n    /**\n     * Gets the next random `Int` from the random number generator in the specified range.\n     *\n     * Generates an `Int` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     *\n     * @sample samples.random.Randoms.nextIntFromUntil\n     */\n    public open fun nextInt(from: Int, until: Int): Int {\n        checkRangeBounds(from, until)\n        val n = until - from\n        if (n > 0 || n == Int.MIN_VALUE) {\n            val rnd = if (n and -n == n) {\n                val bitCount = fastLog2(n)\n                nextBits(bitCount)\n            } else {\n                var v: Int\n                do {\n                    val bits = nextInt().ushr(1)\n                    v = bits % n\n                } while (bits - v + (n - 1) < 0)\n                v\n            }\n            return from + rnd\n        } else {\n            while (true) {\n                val rnd = nextInt()\n                if (rnd in from until until) return rnd\n            }\n        }\n    }\n\n    /**\n     * Gets the next random `Long` from the random number generator.\n     *\n     * Generates a `Long` random value uniformly distributed between `Long.MIN_VALUE` and `Long.MAX_VALUE` (inclusive).\n     *\n     * @sample samples.random.Randoms.nextLong\n     */\n    public open fun nextLong(): Long = nextInt().toLong().shl(32) + nextInt()\n\n    /**\n     * Gets the next random non-negative `Long` from the random number generator less than the specified [until] bound.\n     *\n     * Generates a `Long` random value uniformly distributed between `0` (inclusive) and the specified [until] bound (exclusive).\n     *\n     * @param until must be positive.\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     *\n     * @sample samples.random.Randoms.nextLongFromUntil\n     */\n    public open fun nextLong(until: Long): Long = nextLong(0, until)\n\n    /**\n     * Gets the next random `Long` from the random number generator in the specified range.\n     *\n     * Generates a `Long` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     *\n     * @sample samples.random.Randoms.nextLongFromUntil\n     */\n    public open fun nextLong(from: Long, until: Long): Long {\n        checkRangeBounds(from, until)\n        val n = until - from\n        if (n > 0) {\n            val rnd: Long\n            if (n and -n == n) {\n                val nLow = n.toInt()\n                val nHigh = (n ushr 32).toInt()\n                rnd = when {\n                    nLow != 0 -> {\n                        val bitCount = fastLog2(nLow)\n                        // toUInt().toLong()\n                        nextBits(bitCount).toLong() and 0xFFFF_FFFF\n                    }\n                    nHigh == 1 ->\n                        // toUInt().toLong()\n                        nextInt().toLong() and 0xFFFF_FFFF\n                    else -> {\n                        val bitCount = fastLog2(nHigh)\n                        nextBits(bitCount).toLong().shl(32) + nextInt()\n                    }\n                }\n            } else {\n                var v: Long\n                do {\n                    val bits = nextLong().ushr(1)\n                    v = bits % n\n                } while (bits - v + (n - 1) < 0)\n                rnd = v\n            }\n            return from + rnd\n        } else {\n            while (true) {\n                val rnd = nextLong()\n                if (rnd in from until until) return rnd\n            }\n        }\n    }\n\n    /**\n     * Gets the next random [Boolean] value.\n     *\n     * @sample samples.random.Randoms.nextBoolean\n     */\n    public open fun nextBoolean(): Boolean = nextBits(1) != 0\n\n    /**\n     * Gets the next random [Double] value uniformly distributed between 0 (inclusive) and 1 (exclusive).\n     *\n     * @sample samples.random.Randoms.nextDouble\n     */\n    public open fun nextDouble(): Double = doubleFromParts(nextBits(26), nextBits(27))\n\n    /**\n     * Gets the next random non-negative `Double` from the random number generator less than the specified [until] bound.\n     *\n     * Generates a `Double` random value uniformly distributed between 0 (inclusive) and [until] (exclusive).\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     *\n     * @sample samples.random.Randoms.nextDoubleFromUntil\n     */\n    public open fun nextDouble(until: Double): Double = nextDouble(0.0, until)\n\n    /**\n     * Gets the next random `Double` from the random number generator in the specified range.\n     *\n     * Generates a `Double` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * [from] and [until] must be finite otherwise the behavior is unspecified.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     *\n     * @sample samples.random.Randoms.nextDoubleFromUntil\n     */\n    public open fun nextDouble(from: Double, until: Double): Double {\n        checkRangeBounds(from, until)\n        val size = until - from\n        val r = if (size.isInfinite() && from.isFinite() && until.isFinite()) {\n            val r1 = nextDouble() * (until / 2 - from / 2)\n            from + r1 + r1\n        } else {\n            from + nextDouble() * size\n        }\n        return if (r >= until) until.nextDown() else r\n    }\n\n    /**\n     * Gets the next random [Float] value uniformly distributed between 0 (inclusive) and 1 (exclusive).\n     *\n     * @sample samples.random.Randoms.nextFloat\n     */\n    public open fun nextFloat(): Float = nextBits(24) / (1 shl 24).toFloat()\n\n    /**\n     * Fills a subrange of the specified byte [array] starting from [fromIndex] inclusive and ending [toIndex] exclusive\n     * with random bytes.\n     *\n     * @return [array] with the subrange filled with random bytes.\n     *\n     * @sample samples.random.Randoms.nextBytes\n     */\n    public open fun nextBytes(array: ByteArray, fromIndex: Int = 0, toIndex: Int = array.size): ByteArray {\n        require(fromIndex in 0..array.size && toIndex in 0..array.size) { \"fromIndex ($fromIndex) or toIndex ($toIndex) are out of range: 0..${array.size}.\" }\n        require(fromIndex <= toIndex) { \"fromIndex ($fromIndex) must be not greater than toIndex ($toIndex).\" }\n\n        val steps = (toIndex - fromIndex) / 4\n\n        var position = fromIndex\n        repeat(steps) {\n            val v = nextInt()\n            array[position] = v.toByte()\n            array[position + 1] = v.ushr(8).toByte()\n            array[position + 2] = v.ushr(16).toByte()\n            array[position + 3] = v.ushr(24).toByte()\n            position += 4\n        }\n\n        val remainder = toIndex - position\n        val vr = nextBits(remainder * 8)\n        for (i in 0 until remainder) {\n            array[position + i] = vr.ushr(i * 8).toByte()\n        }\n\n        return array\n    }\n\n    /**\n     * Fills the specified byte [array] with random bytes and returns it.\n     *\n     * @return [array] filled with random bytes.\n     *\n     * @sample samples.random.Randoms.nextBytes\n     */\n    public open fun nextBytes(array: ByteArray): ByteArray = nextBytes(array, 0, array.size)\n\n    /**\n     * Creates a byte array of the specified [size], filled with random bytes.\n     *\n     * @sample samples.random.Randoms.nextBytes\n     */\n    public open fun nextBytes(size: Int): ByteArray = nextBytes(ByteArray(size))\n\n\n    /**\n     * The default random number generator.\n     *\n     * On JVM this generator is thread-safe, its methods can be invoked from multiple threads.\n     *\n     * @sample samples.random.Randoms.defaultRandom\n     */\n    companion object Default : Random() {\n\n        private val defaultRandom: Random = defaultPlatformRandom()\n\n        override fun nextBits(bitCount: Int): Int = defaultRandom.nextBits(bitCount)\n        override fun nextInt(): Int = defaultRandom.nextInt()\n        override fun nextInt(until: Int): Int = defaultRandom.nextInt(until)\n        override fun nextInt(from: Int, until: Int): Int = defaultRandom.nextInt(from, until)\n\n        override fun nextLong(): Long = defaultRandom.nextLong()\n        override fun nextLong(until: Long): Long = defaultRandom.nextLong(until)\n        override fun nextLong(from: Long, until: Long): Long = defaultRandom.nextLong(from, until)\n\n        override fun nextBoolean(): Boolean = defaultRandom.nextBoolean()\n\n        override fun nextDouble(): Double = defaultRandom.nextDouble()\n        override fun nextDouble(until: Double): Double = defaultRandom.nextDouble(until)\n        override fun nextDouble(from: Double, until: Double): Double = defaultRandom.nextDouble(from, until)\n\n        override fun nextFloat(): Float = defaultRandom.nextFloat()\n\n        override fun nextBytes(array: ByteArray): ByteArray = defaultRandom.nextBytes(array)\n        override fun nextBytes(size: Int): ByteArray = defaultRandom.nextBytes(size)\n        override fun nextBytes(array: ByteArray, fromIndex: Int, toIndex: Int): ByteArray = defaultRandom.nextBytes(array, fromIndex, toIndex)\n    }\n}\n\n/**\n * Returns a repeatable random number generator seeded with the given [seed] `Int` value.\n *\n * Two generators with the same seed produce the same sequence of values within the same version of Kotlin runtime.\n *\n * *Note:* Future versions of Kotlin may change the algorithm of this seeded number generator so that it will return\n * a sequence of values different from the current one for a given seed.\n *\n * On JVM the returned generator is NOT thread-safe. Do not invoke it from multiple threads without proper synchronization.\n *\n * @sample samples.random.Randoms.seededRandom\n */\n@SinceKotlin(\"1.3\")\npublic fun Random(seed: Int): Random = XorWowRandom(seed, seed.shr(31))\n\n/**\n * Returns a repeatable random number generator seeded with the given [seed] `Long` value.\n *\n * Two generators with the same seed produce the same sequence of values within the same version of Kotlin runtime.\n *\n * *Note:* Future versions of Kotlin may change the algorithm of this seeded number generator so that it will return\n * a sequence of values different from the current one for a given seed.\n *\n * On JVM the returned generator is NOT thread-safe. Do not invoke it from multiple threads without proper synchronization.\n *\n * @sample samples.random.Randoms.seededRandom\n */\n@SinceKotlin(\"1.3\")\npublic fun Random(seed: Long): Random = XorWowRandom(seed.toInt(), seed.shr(32).toInt())\n\n\n\n/**\n * Gets the next random `Int` from the random number generator in the specified [range].\n *\n * Generates an `Int` random value uniformly distributed in the specified [range]:\n * from `range.start` inclusive to `range.endInclusive` inclusive.\n *\n * @throws IllegalArgumentException if [range] is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun Random.nextInt(range: IntRange): Int = when {\n    range.isEmpty() -> throw IllegalArgumentException(\"Cannot get random in empty range: $range\")\n    range.last < Int.MAX_VALUE -> nextInt(range.first, range.last + 1)\n    range.first > Int.MIN_VALUE -> nextInt(range.first - 1, range.last) + 1\n    else -> nextInt()\n}\n\n/**\n * Gets the next random `Long` from the random number generator in the specified [range].\n *\n * Generates a `Long` random value uniformly distributed in the specified [range]:\n * from `range.start` inclusive to `range.endInclusive` inclusive.\n *\n * @throws IllegalArgumentException if [range] is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun Random.nextLong(range: LongRange): Long = when {\n    range.isEmpty() -> throw IllegalArgumentException(\"Cannot get random in empty range: $range\")\n    range.last < Long.MAX_VALUE -> nextLong(range.first, range.last + 1)\n    range.first > Long.MIN_VALUE -> nextLong(range.first - 1, range.last) + 1\n    else -> nextLong()\n}\n\n\ninternal expect fun defaultPlatformRandom(): Random\ninternal expect fun doubleFromParts(hi26: Int, low27: Int): Double\n\n@OptIn(ExperimentalStdlibApi::class)\ninternal fun fastLog2(value: Int): Int = 31 - value.countLeadingZeroBits()\n\n/** Takes upper [bitCount] bits (0..32) from this number. */\ninternal fun Int.takeUpperBits(bitCount: Int): Int =\n    this.ushr(32 - bitCount) and (-bitCount).shr(31)\n\ninternal fun checkRangeBounds(from: Int, until: Int) = require(until > from) { boundsErrorMessage(from, until) }\ninternal fun checkRangeBounds(from: Long, until: Long) = require(until > from) { boundsErrorMessage(from, until) }\ninternal fun checkRangeBounds(from: Double, until: Double) = require(until > from) { boundsErrorMessage(from, until) }\n\ninternal fun boundsErrorMessage(from: Any, until: Any) = \"Random range is empty: [$from, $until).\"\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\n/**\n * Random number generator, using Marsaglia's \"xorwow\" algorithm\n *\n * Cycles after 2^192 - 2^32 repetitions.\n *\n * For more details, see Marsaglia, George (July 2003). \"Xorshift RNGs\". Journal of Statistical Software. 8 (14). doi:10.18637/jss.v008.i14\n *\n * Available at https://www.jstatsoft.org/v08/i14/paper\n *\n */\ninternal class XorWowRandom\ninternal constructor(\n    private var x: Int,\n    private var y: Int,\n    private var z: Int,\n    private var w: Int,\n    private var v: Int,\n    private var addend: Int\n) : Random() {\n\n    internal constructor(seed1: Int, seed2: Int) :\n            this(seed1, seed2, 0, 0, seed1.inv(), (seed1 shl 10) xor (seed2 ushr 4))\n\n    init {\n        require((x or y or z or w or v) != 0) { \"Initial state must have at least one non-zero element.\" }\n\n        // some trivial seeds can produce several values with zeroes in upper bits, so we discard first 64\n        repeat(64) { nextInt() }\n    }\n\n    override fun nextInt(): Int {\n        // Equivalent to the xorxow algorithm\n        // From Marsaglia, G. 2003. Xorshift RNGs. J. Statis. Soft. 8, 14, p. 5\n        var t = x\n        t = t xor (t ushr 2)\n        x = y\n        y = z\n        z = w\n        val v0 = v\n        w = v0\n        t = (t xor (t shl 1)) xor v0 xor (v0 shl 4)\n        v = t\n        addend += 362437\n        return t + addend\n    }\n\n    override fun nextBits(bitCount: Int): Int =\n        nextInt().takeUpperBits(bitCount)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"RangesKt\")\n\npackage kotlin.ranges\n\n/**\n * Represents a range of [Comparable] values.\n */\nprivate open class ComparableRange<T : Comparable<T>>(\n    override val start: T,\n    override val endInclusive: T\n) : ClosedRange<T> {\n\n    override fun equals(other: Any?): Boolean {\n        return other is ComparableRange<*> && (isEmpty() && other.isEmpty() ||\n                start == other.start && endInclusive == other.endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * start.hashCode() + endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$start..$endInclusive\"\n}\n\n/**\n * Creates a range from this [Comparable] value to the specified [that] value.\n *\n * This value needs to be smaller than [that] value, otherwise the returned range will be empty.\n * @sample samples.ranges.Ranges.rangeFromComparable\n */\npublic operator fun <T : Comparable<T>> T.rangeTo(that: T): ClosedRange<T> = ComparableRange(this, that)\n\n\n/**\n * Represents a range of floating point numbers.\n * Extends [ClosedRange] interface providing custom operation [lessThanOrEquals] for comparing values of range domain type.\n *\n * This interface is implemented by floating point ranges returned by [Float.rangeTo] and [Double.rangeTo] operators to\n * achieve IEEE-754 comparison order instead of total order of floating point numbers.\n */\n@SinceKotlin(\"1.1\")\npublic interface ClosedFloatingPointRange<T : Comparable<T>> : ClosedRange<T> {\n    override fun contains(value: T): Boolean = lessThanOrEquals(start, value) && lessThanOrEquals(value, endInclusive)\n    override fun isEmpty(): Boolean = !lessThanOrEquals(start, endInclusive)\n\n    /**\n     * Compares two values of range domain type and returns true if first is less than or equal to second.\n     */\n    fun lessThanOrEquals(a: T, b: T): Boolean\n}\n\n\n/**\n * A closed range of values of type `Double`.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n */\nprivate class ClosedDoubleRange(\n    start: Double,\n    endInclusive: Double\n) : ClosedFloatingPointRange<Double> {\n    private val _start = start\n    private val _endInclusive = endInclusive\n    override val start: Double get() = _start\n    override val endInclusive: Double get() = _endInclusive\n\n    override fun lessThanOrEquals(a: Double, b: Double): Boolean = a <= b\n\n    override fun contains(value: Double): Boolean = value >= _start && value <= _endInclusive\n    override fun isEmpty(): Boolean = !(_start <= _endInclusive)\n\n    override fun equals(other: Any?): Boolean {\n        return other is ClosedDoubleRange && (isEmpty() && other.isEmpty() ||\n                _start == other._start && _endInclusive == other._endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * _start.hashCode() + _endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$_start..$_endInclusive\"\n}\n\n/**\n * Creates a range from this [Double] value to the specified [that] value.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n * @sample samples.ranges.Ranges.rangeFromDouble\n */\n@SinceKotlin(\"1.1\")\npublic operator fun Double.rangeTo(that: Double): ClosedFloatingPointRange<Double> = ClosedDoubleRange(this, that)\n\n\n/**\n * A closed range of values of type `Float`.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n */\nprivate class ClosedFloatRange(\n    start: Float,\n    endInclusive: Float\n) : ClosedFloatingPointRange<Float> {\n    private val _start = start\n    private val _endInclusive = endInclusive\n    override val start: Float get() = _start\n    override val endInclusive: Float get() = _endInclusive\n\n    override fun lessThanOrEquals(a: Float, b: Float): Boolean = a <= b\n\n    override fun contains(value: Float): Boolean = value >= _start && value <= _endInclusive\n    override fun isEmpty(): Boolean = !(_start <= _endInclusive)\n\n    override fun equals(other: Any?): Boolean {\n        return other is ClosedFloatRange && (isEmpty() && other.isEmpty() ||\n                _start == other._start && _endInclusive == other._endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * _start.hashCode() + _endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$_start..$_endInclusive\"\n}\n\n/**\n * Creates a range from this [Float] value to the specified [that] value.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n * @sample samples.ranges.Ranges.rangeFromFloat\n */\n@SinceKotlin(\"1.1\")\npublic operator fun Float.rangeTo(that: Float): ClosedFloatingPointRange<Float> = ClosedFloatRange(this, that)\n\n\n/**\n * Returns `true` if this iterable range contains the specified [element].\n *\n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <T, R> R.contains(element: T?): Boolean where T : Any, R : Iterable<T>, R : ClosedRange<T> =\n    element != null && contains(element)\n\n\ninternal fun checkStepIsPositive(isPositive: Boolean, step: Number) {\n    if (!isPositive) throw IllegalArgumentException(\"Step must be positive, was: $step.\")\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * An object to which char sequences and values can be appended.\n */\nexpect interface Appendable {\n    /**\n     * Appends the specified character [value] to this Appendable and returns this instance.\n     *\n     * @param value the character to append.\n     */\n    fun append(value: Char): Appendable\n\n    /**\n     * Appends the specified character sequence [value] to this Appendable and returns this instance.\n     *\n     * @param value the character sequence to append. If [value] is `null`, then the four characters `\"null\"` are appended to this Appendable.\n     */\n    fun append(value: CharSequence?): Appendable\n\n    /**\n     * Appends a subsequence of the specified character sequence [value] to this Appendable and returns this instance.\n     *\n     * @param value the character sequence from which a subsequence is appended. If [value] is `null`,\n     *  then characters are appended as if [value] contained the four characters `\"null\"`.\n     * @param startIndex the beginning (inclusive) of the subsequence to append.\n     * @param endIndex the end (exclusive) of the subsequence to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     */\n    fun append(value: CharSequence?, startIndex: Int, endIndex: Int): Appendable\n}\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this Appendable and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T : Appendable> T.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): T {\n    @Suppress(\"UNCHECKED_CAST\")\n    return append(value, startIndex, endIndex) as T\n}\n\n/**\n * Appends all arguments to the given [Appendable].\n */\npublic fun <T : Appendable> T.append(vararg value: CharSequence?): T {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/** Appends a line feed character (`\\n`) to this Appendable. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun Appendable.appendLine(): Appendable = append('\\n')\n\n/** Appends value to the given Appendable and a line feed character (`\\n`) after it. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun Appendable.appendLine(value: CharSequence?): Appendable = append(value).appendLine()\n\n/** Appends value to the given Appendable and a line feed character (`\\n`) after it. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun Appendable.appendLine(value: Char): Appendable = append(value).appendLine()\n\n\ninternal fun <T> Appendable.appendElement(element: T, transform: ((T) -> CharSequence)?) {\n    when {\n        transform != null -> append(transform(element))\n        element is CharSequence? -> append(element)\n        element is Char -> append(element)\n        else -> append(element.toString())\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CharsKt\")\n\npackage kotlin.text\n\n/**\n * Concatenates this Char and a String.\n *\n * @sample samples.text.Chars.plus\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun Char.plus(other: String): String = this.toString() + other\n\n/**\n * Returns `true` if this character is equal to the [other] character, optionally ignoring character case.\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n *\n * Two characters are considered the same ignoring case if at least one of the following is `true`:\n *   - The two characters are the same (as compared by the == operator)\n *   - Applying the method [toUpperCase] to each character produces the same result\n *   - Applying the method [toLowerCase] to each character produces the same result\n *\n * @sample samples.text.Chars.equals\n */\npublic fun Char.equals(other: Char, ignoreCase: Boolean = false): Boolean {\n    if (this == other) return true\n    if (!ignoreCase) return false\n\n    if (this.toUpperCase() == other.toUpperCase()) return true\n    if (this.toLowerCase() == other.toLowerCase()) return true\n    return false\n}\n\n/**\n * Returns `true` if this character is a Unicode surrogate code unit.\n */\npublic fun Char.isSurrogate(): Boolean = this in Char.MIN_SURROGATE..Char.MAX_SURROGATE\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Trims leading whitespace characters followed by [marginPrefix] from every line of a source string and removes\n * the first and the last lines if they are blank (notice difference blank vs empty).\n *\n * Doesn't affect a line if it doesn't contain [marginPrefix] except the first and the last blank lines.\n *\n * Doesn't preserve the original line endings.\n *\n * @param marginPrefix non-blank string, which is used as a margin delimiter. Default is `|` (pipe character).\n *\n * @sample samples.text.Strings.trimMargin\n * @see trimIndent\n * @see kotlin.text.isWhitespace\n */\npublic fun String.trimMargin(marginPrefix: String = \"|\"): String =\n    replaceIndentByMargin(\"\", marginPrefix)\n\n/**\n * Detects indent by [marginPrefix] as it does [trimMargin] and replace it with [newIndent].\n *\n * @param marginPrefix non-blank string, which is used as a margin delimiter. Default is `|` (pipe character).\n */\npublic fun String.replaceIndentByMargin(newIndent: String = \"\", marginPrefix: String = \"|\"): String {\n    require(marginPrefix.isNotBlank()) { \"marginPrefix must be non-blank string.\" }\n    val lines = lines()\n\n    return lines.reindent(length + newIndent.length * lines.size, getIndentFunction(newIndent), { line ->\n        val firstNonWhitespaceIndex = line.indexOfFirst { !it.isWhitespace() }\n\n        when {\n            firstNonWhitespaceIndex == -1 -> null\n            line.startsWith(marginPrefix, firstNonWhitespaceIndex) -> line.substring(firstNonWhitespaceIndex + marginPrefix.length)\n            else -> null\n        }\n    })\n}\n\n/**\n * Detects a common minimal indent of all the input lines, removes it from every line and also removes the first and the last\n * lines if they are blank (notice difference blank vs empty).\n *\n * Note that blank lines do not affect the detected indent level.\n *\n * In case if there are non-blank lines with no leading whitespace characters (no indent at all) then the\n * common indent is 0, and therefore this function doesn't change the indentation.\n *\n * Doesn't preserve the original line endings.\n *\n * @sample samples.text.Strings.trimIndent\n * @see trimMargin\n * @see kotlin.text.isBlank\n */\npublic fun String.trimIndent(): String = replaceIndent(\"\")\n\n/**\n * Detects a common minimal indent like it does [trimIndent] and replaces it with the specified [newIndent].\n */\npublic fun String.replaceIndent(newIndent: String = \"\"): String {\n    val lines = lines()\n\n    val minCommonIndent = lines\n        .filter(String::isNotBlank)\n        .map(String::indentWidth)\n        .minOrNull() ?: 0\n\n    return lines.reindent(length + newIndent.length * lines.size, getIndentFunction(newIndent), { line -> line.drop(minCommonIndent) })\n}\n\n/**\n * Prepends [indent] to every line of the original string.\n *\n * Doesn't preserve the original line endings.\n */\npublic fun String.prependIndent(indent: String = \"    \"): String =\n    lineSequence()\n        .map {\n            when {\n                it.isBlank() -> {\n                    when {\n                        it.length < indent.length -> indent\n                        else -> it\n                    }\n                }\n                else -> indent + it\n            }\n        }\n        .joinToString(\"\\n\")\n\nprivate fun String.indentWidth(): Int = indexOfFirst { !it.isWhitespace() }.let { if (it == -1) length else it }\n\nprivate fun getIndentFunction(indent: String) = when {\n    indent.isEmpty() -> { line: String -> line }\n    else -> { line: String -> indent + line }\n}\n\nprivate inline fun List<String>.reindent(\n    resultSizeEstimate: Int,\n    indentAddFunction: (String) -> String,\n    indentCutFunction: (String) -> String?\n): String {\n    val lastIndex = lastIndex\n    return mapIndexedNotNull { index, value ->\n        if ((index == 0 || index == lastIndex) && value.isBlank())\n            null\n        else\n            indentCutFunction(value)?.let(indentAddFunction) ?: value\n    }\n        .joinTo(StringBuilder(resultSizeEstimate), \"\\n\")\n        .toString()\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * Represents a collection of captured groups in a single match of a regular expression.\n *\n * This collection has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n *\n * An element of the collection at the particular index can be `null`,\n * if the corresponding group in the regular expression is optional and\n * there was no match captured by that group.\n */\npublic interface MatchGroupCollection : Collection<MatchGroup?> {\n\n    /** Returns a group with the specified [index].\n     *\n     * @return An instance of [MatchGroup] if the group with the specified [index] was matched or `null` otherwise.\n     *\n     * Groups are indexed from 1 to the count of groups in the regular expression. A group with the index 0\n     * corresponds to the entire match.\n     */\n    public operator fun get(index: Int): MatchGroup?\n}\n\n/**\n * Extends [MatchGroupCollection] by introducing a way to get matched groups by name, when regex supports it.\n */\n@SinceKotlin(\"1.1\")\npublic interface MatchNamedGroupCollection : MatchGroupCollection {\n    /**\n     * Returns a named group with the specified [name].\n     * @return An instance of [MatchGroup] if the group with the specified [name] was matched or `null` otherwise.\n     * @throws IllegalArgumentException if there is no group with the specified [name] defined in the regex pattern.\n     * @throws UnsupportedOperationException if getting named groups isn't supported on the current platform.\n     */\n    public operator fun get(name: String): MatchGroup?\n}\n\n/**\n * Represents the results from a single regular expression match.\n */\npublic interface MatchResult {\n    /** The range of indices in the original string where match was captured. */\n    public val range: IntRange\n    /** The substring from the input string captured by this match. */\n    public val value: String\n    /**\n     * A collection of groups matched by the regular expression.\n     *\n     * This collection has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n     * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n     */\n    public val groups: MatchGroupCollection\n    /**\n     * A list of matched indexed group values.\n     *\n     * This list has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n     * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n     *\n     * If the group in the regular expression is optional and there were no match captured by that group,\n     * corresponding item in [groupValues] is an empty string.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public val groupValues: List<String>\n\n    /**\n     * An instance of [MatchResult.Destructured] wrapper providing components for destructuring assignment of group values.\n     *\n     * component1 corresponds to the value of the first group, component2 — of the second, and so on.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public val destructured: Destructured get() = Destructured(this)\n\n    /** Returns a new [MatchResult] with the results for the next match, starting at the position\n     *  at which the last match ended (at the character after the last matched character).\n     */\n    public fun next(): MatchResult?\n\n    /**\n     * Provides components for destructuring assignment of group values.\n     *\n     * [component1] corresponds to the value of the first group, [component2] — of the second, and so on.\n     *\n     * If the group in the regular expression is optional and there were no match captured by that group,\n     * corresponding component value is an empty string.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public class Destructured internal constructor(public val match: MatchResult) {\n        @kotlin.internal.InlineOnly\n        public operator inline fun component1():  String = match.groupValues[1]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component2():  String = match.groupValues[2]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component3():  String = match.groupValues[3]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component4():  String = match.groupValues[4]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component5():  String = match.groupValues[5]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component6():  String = match.groupValues[6]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component7():  String = match.groupValues[7]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component8():  String = match.groupValues[8]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component9():  String = match.groupValues[9]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component10(): String = match.groupValues[10]\n\n        /**\n         *  Returns destructured group values as a list of strings.\n         *  First value in the returned list corresponds to the value of the first group, and so on.\n         *\n         * @sample samples.text.Regexps.matchDestructuringToGroupValues\n         */\n        public fun toList(): List<String> = match.groupValues.subList(1, match.groupValues.size)\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"LazyKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\ninternal object UNINITIALIZED_VALUE\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\ninternal class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"TuplesKt\")\n\npackage kotlin\n\n\n/**\n * Represents a generic pair of two values.\n *\n * There is no meaning attached to values in this class, it can be used for any purpose.\n * Pair exhibits value semantics, i.e. two pairs are equal if both components are equal.\n *\n * An example of decomposing it into values:\n * @sample samples.misc.Tuples.pairDestructuring\n *\n * @param A type of the first value.\n * @param B type of the second value.\n * @property first First value.\n * @property second Second value.\n * @constructor Creates a new instance of Pair.\n */\npublic data class Pair<out A, out B>(\n    public val first: A,\n    public val second: B\n) : Serializable {\n\n    /**\n     * Returns string representation of the [Pair] including its [first] and [second] values.\n     */\n    public override fun toString(): String = \"($first, $second)\"\n}\n\n/**\n * Creates a tuple of type [Pair] from this and [that].\n *\n * This can be useful for creating [Map] literals with less noise, for example:\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic infix fun <A, B> A.to(that: B): Pair<A, B> = Pair(this, that)\n\n/**\n * Converts this pair into a list.\n * @sample samples.misc.Tuples.pairToList\n */\npublic fun <T> Pair<T, T>.toList(): List<T> = listOf(first, second)\n\n/**\n * Represents a triad of values\n *\n * There is no meaning attached to values in this class, it can be used for any purpose.\n * Triple exhibits value semantics, i.e. two triples are equal if all three components are equal.\n * An example of decomposing it into values:\n * @sample samples.misc.Tuples.tripleDestructuring\n *\n * @param A type of the first value.\n * @param B type of the second value.\n * @param C type of the third value.\n * @property first First value.\n * @property second Second value.\n * @property third Third value.\n */\npublic data class Triple<out A, out B, out C>(\n    public val first: A,\n    public val second: B,\n    public val third: C\n) : Serializable {\n\n    /**\n     * Returns string representation of the [Triple] including its [first], [second] and [third] values.\n     */\n    public override fun toString(): String = \"($first, $second, $third)\"\n}\n\n/**\n * Converts this triple into a list.\n * @sample samples.misc.Tuples.tripleToList\n */\npublic fun <T> Triple<T, T, T>.toList(): List<T> = listOf(first, second, third)\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UByteArray\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@PublishedApi\ninternal constructor(@PublishedApi internal val storage: ByteArray) : Collection<UByte> {\n\n    /** Creates a new array of the specified [size], with all elements initialized to zero. */\n    public constructor(size: Int) : this(ByteArray(size))\n\n    /**\n     * Returns the array element at the given [index]. This method can be called using the index operator.\n     *\n     * If the [index] is out of bounds of this array, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n     * where the behavior is unspecified.\n     */\n    public operator fun get(index: Int): UByte = storage[index].toUByte()\n\n    /**\n     * Sets the element at the given [index] to the given [value]. This method can be called using the index operator.\n     *\n     * If the [index] is out of bounds of this array, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n     * where the behavior is unspecified.\n     */\n    public operator fun set(index: Int, value: UByte) {\n        storage[index] = value.toByte()\n    }\n\n    /** Returns the number of elements in the array. */\n    public override val size: Int get() = storage.size\n\n    /** Creates an iterator over the elements of the array. */\n    public override operator fun iterator(): UByteIterator = Iterator(storage)\n\n    private class Iterator(private val array: ByteArray) : UByteIterator() {\n        private var index = 0\n        override fun hasNext() = index < array.size\n        override fun nextUByte() = if (index < array.size) array[index++].toUByte() else throw NoSuchElementException(index.toString())\n    }\n\n    override fun contains(element: UByte): Boolean {\n        // TODO: Eliminate this check after KT-30016 gets fixed.\n        // Currently JS BE does not generate special bridge method for this method.\n        @Suppress(\"USELESS_CAST\")\n        if ((element as Any?) !is UByte) return false\n\n        return storage.contains(element.toByte())\n    }\n\n    override fun containsAll(elements: Collection<UByte>): Boolean {\n        return (elements as Collection<*>).all { it is UByte && storage.contains(it.toByte()) }\n    }\n\n    override fun isEmpty(): Boolean = this.storage.size == 0\n}\n\n/**\n * Creates a new array of the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each array element sequentially starting from the first one.\n * It should return the value for an array element given its index.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray(size: Int, init: (Int) -> UByte): UByteArray {\n    return UByteArray(ByteArray(size) { index -> init(index).toByte() })\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ubyteArrayOf(vararg elements: UByte): UByteArray = elements\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class ULong @PublishedApi internal constructor(@PublishedApi internal val data: Long) : Comparable<ULong> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of ULong can have.\n         */\n        public const val MIN_VALUE: ULong = ULong(0)\n\n        /**\n         * A constant holding the maximum value an instance of ULong can have.\n         */\n        public const val MAX_VALUE: ULong = ULong(-1)\n\n        /**\n         * The number of bytes used to represent an instance of ULong in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 8\n\n        /**\n         * The number of bits used to represent an instance of ULong in a binary form.\n         */\n        public const val SIZE_BITS: Int = 64\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.compareTo(other.toULong())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.compareTo(other.toULong())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.compareTo(other.toULong())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: ULong): Int = ulongCompare(this.data, other.data)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): ULong = this.plus(other.toULong())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): ULong = this.plus(other.toULong())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): ULong = this.plus(other.toULong())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = ULong(this.data.plus(other.data))\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): ULong = this.minus(other.toULong())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): ULong = this.minus(other.toULong())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): ULong = this.minus(other.toULong())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = ULong(this.data.minus(other.data))\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): ULong = this.times(other.toULong())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): ULong = this.times(other.toULong())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): ULong = this.times(other.toULong())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = ULong(this.data.times(other.data))\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): ULong = this.div(other.toULong())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): ULong = this.div(other.toULong())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): ULong = this.div(other.toULong())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = ulongDivide(this, other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): ULong = this.rem(other.toULong())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): ULong = this.rem(other.toULong())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): ULong = this.rem(other.toULong())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = ulongRemainder(this, other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): ULong = ULong(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): ULong = ULong(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: ULong): ULongRange = ULongRange(this, other)\n\n    /** Shifts this value left by the [bitCount] number of bits. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shl(bitCount: Int): ULong = ULong(data shl bitCount)\n    /** Shifts this value right by the [bitCount] number of bits, filling the leftmost bits with zeros. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shr(bitCount: Int): ULong = ULong(data ushr bitCount)\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: ULong): ULong = ULong(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: ULong): ULong = ULong(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: ULong): ULong = ULong(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): ULong = ULong(data.inv())\n\n    /**\n     * Converts this [ULong] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `ULong`.\n     *\n     * The resulting `Byte` value is represented by the least significant 8 bits of this `ULong` value.\n     * Note that the resulting `Byte` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    /**\n     * Converts this [ULong] value to [Short].\n     *\n     * If this value is less than or equals to [Short.MAX_VALUE], the resulting `Short` value represents\n     * the same numerical value as this `ULong`.\n     *\n     * The resulting `Short` value is represented by the least significant 16 bits of this `ULong` value.\n     * Note that the resulting `Short` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort()\n    /**\n     * Converts this [ULong] value to [Int].\n     *\n     * If this value is less than or equals to [Int.MAX_VALUE], the resulting `Int` value represents\n     * the same numerical value as this `ULong`.\n     *\n     * The resulting `Int` value is represented by the least significant 32 bits of this `ULong` value.\n     * Note that the resulting `Int` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt()\n    /**\n     * Converts this [ULong] value to [Long].\n     *\n     * If this value is less than or equals to [Long.MAX_VALUE], the resulting `Long` value represents\n     * the same numerical value as this `ULong`. Otherwise the result is negative.\n     *\n     * The resulting `Long` value has the same binary representation as this `ULong` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data\n\n    /**\n     * Converts this [ULong] value to [UByte].\n     *\n     * If this value is less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n     * the same numerical value as this `ULong`.\n     *\n     * The resulting `UByte` value is represented by the least significant 8 bits of this `ULong` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    /**\n     * Converts this [ULong] value to [UShort].\n     *\n     * If this value is less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n     * the same numerical value as this `ULong`.\n     *\n     * The resulting `UShort` value is represented by the least significant 16 bits of this `ULong` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = data.toUShort()\n    /**\n     * Converts this [ULong] value to [UInt].\n     *\n     * If this value is less than or equals to [UInt.MAX_VALUE], the resulting `UInt` value represents\n     * the same numerical value as this `ULong`.\n     *\n     * The resulting `UInt` value is represented by the least significant 32 bits of this `ULong` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = data.toUInt()\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = this\n\n    /**\n     * Converts this [ULong] value to [Float].\n     *\n     * The resulting value is the closest `Float` to this `ULong` value.\n     * In case when this `ULong` value is exactly between two `Float`s,\n     * the one with zero at least significant bit of mantissa is selected.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toDouble().toFloat()\n    /**\n     * Converts this [ULong] value to [Double].\n     *\n     * The resulting value is the closest `Double` to this `ULong` value.\n     * In case when this `ULong` value is exactly between two `Double`s,\n     * the one with zero at least significant bit of mantissa is selected.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = ulongToDouble(data)\n\n    public override fun toString(): String = ulongToString(data)\n\n}\n\n/**\n * Converts this [Byte] value to [ULong].\n *\n * If this value is positive, the resulting `ULong` value represents the same numerical value as this `Byte`.\n *\n * The least significant 8 bits of the resulting `ULong` value are the same as the bits of this `Byte` value,\n * whereas the most significant 56 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toULong(): ULong = ULong(this.toLong())\n/**\n * Converts this [Short] value to [ULong].\n *\n * If this value is positive, the resulting `ULong` value represents the same numerical value as this `Short`.\n *\n * The least significant 16 bits of the resulting `ULong` value are the same as the bits of this `Short` value,\n * whereas the most significant 48 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toULong(): ULong = ULong(this.toLong())\n/**\n * Converts this [Int] value to [ULong].\n *\n * If this value is positive, the resulting `ULong` value represents the same numerical value as this `Int`.\n *\n * The least significant 32 bits of the resulting `ULong` value are the same as the bits of this `Int` value,\n * whereas the most significant 32 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toULong(): ULong = ULong(this.toLong())\n/**\n * Converts this [Long] value to [ULong].\n *\n * If this value is positive, the resulting `ULong` value represents the same numerical value as this `Long`.\n *\n * The resulting `ULong` value has the same binary representation as this `Long` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toULong(): ULong = ULong(this)\n\n/**\n * Converts this [Float] value to [ULong].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Float` value is negative or `NaN`, [ULong.MAX_VALUE] if it's bigger than `ULong.MAX_VALUE`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Float.toULong(): ULong = doubleToULong(this.toDouble())\n/**\n * Converts this [Double] value to [ULong].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Double` value is negative or `NaN`, [ULong.MAX_VALUE] if it's bigger than `ULong.MAX_VALUE`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Double.toULong(): ULong = doubleToULong(this)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.experimental\n\n/** Performs a bitwise AND operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Byte.and(other: Byte): Byte = (this.toInt() and other.toInt()).toByte()\n\n/** Performs a bitwise OR operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Byte.or(other: Byte): Byte = (this.toInt() or other.toInt()).toByte()\n\n/** Performs a bitwise XOR operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Byte.xor(other: Byte): Byte = (this.toInt() xor other.toInt()).toByte()\n\n/** Inverts the bits in this value. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun Byte.inv(): Byte = (this.toInt().inv()).toByte()\n\n\n/** Performs a bitwise AND operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Short.and(other: Short): Short = (this.toInt() and other.toInt()).toShort()\n\n/** Performs a bitwise OR operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Short.or(other: Short): Short = (this.toInt() or other.toInt()).toShort()\n\n/** Performs a bitwise XOR operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Short.xor(other: Short): Short = (this.toInt() xor other.toInt()).toShort()\n\n/** Inverts the bits in this value. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun Short.inv(): Short = (this.toInt().inv()).toShort()\n\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n\n\nimport kotlin.internal.*\n\n/**\n * A range of values of type `UInt`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic class UIntRange(start: UInt, endInclusive: UInt) : UIntProgression(start, endInclusive, 1), ClosedRange<UInt> {\n    override val start: UInt get() = first\n    override val endInclusive: UInt get() = last\n\n    override fun contains(value: UInt): Boolean = first <= value && value <= last\n\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is UIntRange && (isEmpty() && other.isEmpty() ||\n                first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * first.toInt() + last.toInt())\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type UInt. */\n        public val EMPTY: UIntRange = UIntRange(UInt.MAX_VALUE, UInt.MIN_VALUE)\n    }\n}\n\n/**\n * A progression of values of type `UInt`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic open class UIntProgression\ninternal constructor(\n    start: UInt,\n    endInclusive: UInt,\n    step: Int\n) : Iterable<UInt> {\n    init {\n        if (step == 0.toInt()) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Int.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: UInt = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: UInt = getProgressionLastElement(start, endInclusive, step)\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Int = step\n\n    override fun iterator(): UIntIterator = UIntProgressionIterator(first, last, step)\n\n    /** Checks if the progression is empty. */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is UIntProgression && (isEmpty() && other.isEmpty() ||\n                first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * first.toInt() + last.toInt()) + step.toInt())\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates UIntProgression within the specified bounds of a closed range.\n\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Int.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: UInt, rangeEnd: UInt, step: Int): UIntProgression = UIntProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n\n/**\n * An iterator over a progression of values of type `UInt`.\n * @property step the number by which the value is incremented on each step.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\nprivate class UIntProgressionIterator(first: UInt, last: UInt, step: Int) : UIntIterator() {\n    private val finalElement = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private val step = step.toUInt() // use 2-complement math for negative steps\n    private var next = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextUInt(): UInt {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        } else {\n            next += step\n        }\n        return value\n    }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.collections\n\n/** An iterator over a sequence of values of type `UByte`. */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic abstract class UByteIterator : Iterator<UByte> {\n    override final fun next() = nextUByte()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextUByte(): UByte\n}\n\n/** An iterator over a sequence of values of type `UShort`. */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic abstract class UShortIterator : Iterator<UShort> {\n    override final fun next() = nextUShort()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextUShort(): UShort\n}\n\n/** An iterator over a sequence of values of type `UInt`. */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic abstract class UIntIterator : Iterator<UInt> {\n    override final fun next() = nextUInt()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextUInt(): UInt\n}\n\n/** An iterator over a sequence of values of type `ULong`. */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic abstract class ULongIterator : Iterator<ULong> {\n    override final fun next() = nextULong()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextULong(): ULong\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n\n\nimport kotlin.internal.*\n\n/**\n * A range of values of type `ULong`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic class ULongRange(start: ULong, endInclusive: ULong) : ULongProgression(start, endInclusive, 1), ClosedRange<ULong> {\n    override val start: ULong get() = first\n    override val endInclusive: ULong get() = last\n\n    override fun contains(value: ULong): Boolean = first <= value && value <= last\n\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is ULongRange && (isEmpty() && other.isEmpty() ||\n                first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (first xor (first shr 32)).toInt() + (last xor (last shr 32)).toInt())\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type ULong. */\n        public val EMPTY: ULongRange = ULongRange(ULong.MAX_VALUE, ULong.MIN_VALUE)\n    }\n}\n\n/**\n * A progression of values of type `ULong`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic open class ULongProgression\ninternal constructor(\n    start: ULong,\n    endInclusive: ULong,\n    step: Long\n) : Iterable<ULong> {\n    init {\n        if (step == 0.toLong()) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Long.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Long.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: ULong = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: ULong = getProgressionLastElement(start, endInclusive, step)\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Long = step\n\n    override fun iterator(): ULongIterator = ULongProgressionIterator(first, last, step)\n\n    /** Checks if the progression is empty. */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is ULongProgression && (isEmpty() && other.isEmpty() ||\n                first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * (first xor (first shr 32)).toInt() + (last xor (last shr 32)).toInt()) + (step xor (step ushr 32)).toInt())\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates ULongProgression within the specified bounds of a closed range.\n\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Long.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: ULong, rangeEnd: ULong, step: Long): ULongProgression = ULongProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n\n/**\n * An iterator over a progression of values of type `ULong`.\n * @property step the number by which the value is incremented on each step.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\nprivate class ULongProgressionIterator(first: ULong, last: ULong, step: Long) : ULongIterator() {\n    private val finalElement = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private val step = step.toULong() // use 2-complement math for negative steps\n    private var next = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextULong(): ULong {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        } else {\n            next += step\n        }\n        return value\n    }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:OptIn(ExperimentalUnsignedTypes::class)\npackage kotlin.internal\n\n// (a - b) mod c\nprivate fun differenceModulo(a: UInt, b: UInt, c: UInt): UInt {\n    val ac = a % c\n    val bc = b % c\n    return if (ac >= bc) ac - bc else ac - bc + c\n}\n\nprivate fun differenceModulo(a: ULong, b: ULong, c: ULong): ULong {\n    val ac = a % c\n    val bc = b % c\n    return if (ac >= bc) ac - bc else ac - bc + c\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun getProgressionLastElement(start: UInt, end: UInt, step: Int): UInt = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step.toUInt())\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, (-step).toUInt())\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun getProgressionLastElement(start: ULong, end: ULong, step: Long): ULong = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step.toULong())\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, (-step).toULong())\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"UStringsKt\")  // string representation of unsigned numbers\n\npackage kotlin.text\n\n/**\n * Returns a string representation of this [Byte] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n//@kotlin.internal.InlineOnly\npublic /*inline*/ fun UByte.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Short] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n//@kotlin.internal.InlineOnly\npublic /*inline*/ fun UShort.toString(radix: Int): String = this.toInt().toString(radix)\n\n\n/**\n * Returns a string representation of this [Int] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n//@kotlin.internal.InlineOnly\npublic /*inline*/ fun UInt.toString(radix: Int): String = this.toLong().toString(radix)\n\n/**\n * Returns a string representation of this [Long] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULong.toString(radix: Int): String = ulongToString(this.toLong(), checkRadix(radix))\n\n\n/**\n * Parses the string as a signed [UByte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUByte(): UByte = toUByteOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a signed [UByte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUByte(radix: Int): UByte = toUByteOrNull(radix) ?: numberFormatError(this)\n\n\n/**\n * Parses the string as a [UShort] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUShort(): UShort = toUShortOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [UShort] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUShort(radix: Int): UShort = toUShortOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as an [UInt] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUInt(): UInt = toUIntOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as an [UInt] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUInt(radix: Int): UInt = toUIntOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [ULong] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toULong(): ULong = toULongOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [ULong] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toULong(radix: Int): ULong = toULongOrNull(radix) ?: numberFormatError(this)\n\n\n\n\n\n/**\n * Parses the string as an [UByte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUByteOrNull(): UByte? = toUByteOrNull(radix = 10)\n\n/**\n * Parses the string as an [UByte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUByteOrNull(radix: Int): UByte? {\n    val int = this.toUIntOrNull(radix) ?: return null\n    if (int > UByte.MAX_VALUE) return null\n    return int.toUByte()\n}\n\n/**\n * Parses the string as an [UShort] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUShortOrNull(): UShort? = toUShortOrNull(radix = 10)\n\n/**\n * Parses the string as an [UShort] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUShortOrNull(radix: Int): UShort? {\n    val int = this.toUIntOrNull(radix) ?: return null\n    if (int > UShort.MAX_VALUE) return null\n    return int.toUShort()\n}\n\n/**\n * Parses the string as an [UInt] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUIntOrNull(): UInt? = toUIntOrNull(radix = 10)\n\n/**\n * Parses the string as an [UInt] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUIntOrNull(radix: Int): UInt? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val limit: UInt = UInt.MAX_VALUE\n    val start: Int\n\n    val firstChar = this[0]\n    if (firstChar < '0') {\n        if (length == 1 || firstChar != '+') return null\n        start = 1\n    } else {\n        start = 0\n    }\n\n    val limitForMaxRadix = 119304647u  //  limit / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    val uradix = radix.toUInt()\n    var result = 0u\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result > limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / uradix\n\n                if (result > limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= uradix\n\n        val beforeAdding = result\n        result += digit.toUInt()\n        if (result < beforeAdding) return null // overflow has happened\n    }\n\n    return result\n}\n\n/**\n * Parses the string as an [ULong] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toULongOrNull(): ULong? = toULongOrNull(radix = 10)\n\n/**\n * Parses the string as an [ULong] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toULongOrNull(radix: Int): ULong? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val limit: ULong = ULong.MAX_VALUE\n    val start: Int\n\n    val firstChar = this[0]\n    if (firstChar < '0') {\n        if (length == 1 || firstChar != '+') return null\n        start = 1\n    } else {\n        start = 0\n    }\n\n\n    val limitForMaxRadix = 512409557603043100uL  //  limit / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    val uradix = radix.toULong()\n    var result = 0uL\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result > limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / uradix\n\n                if (result > limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= uradix\n\n        val beforeAdding = result\n        result += digit.toUInt()\n        if (result < beforeAdding) return null // overflow has happened\n    }\n\n    return result\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns a [List] containing all key-value pairs.\n */\npublic fun <K, V> Map<out K, V>.toList(): List<Pair<K, V>> {\n    if (size == 0)\n        return emptyList()\n    val iterator = entries.iterator()\n    if (!iterator.hasNext())\n        return emptyList()\n    val first = iterator.next()\n    if (!iterator.hasNext())\n        return listOf(first.toPair())\n    val result = ArrayList<Pair<K, V>>(size)\n    result.add(first.toPair())\n    do {\n        result.add(iterator.next().toPair())\n    } while (iterator.hasNext())\n    return result\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.\n * \n * @sample samples.collections.Maps.Transformations.flatMap\n */\npublic inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each entry in the original map.\n * \n * @sample samples.collections.Maps.Transformations.mapToList\n */\npublic inline fun <K, V, R> Map<out K, V>.map(transform: (Map.Entry<K, V>) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each entry in the original map.\n * \n * @sample samples.collections.Maps.Transformations.mapNotNull\n */\npublic inline fun <K, V, R : Any> Map<out K, V>.mapNotNull(transform: (Map.Entry<K, V>) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each entry in the original map\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <K, V, R : Any, C : MutableCollection<in R>> Map<out K, V>.mapNotNullTo(destination: C, transform: (Map.Entry<K, V>) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each entry of the original map\n * and appends the results to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.mapTo(destination: C, transform: (Map.Entry<K, V>) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns `true` if all entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <K, V> Map<out K, V>.all(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if map has at least one entry.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <K, V> Map<out K, V>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one entry matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.any(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of entries in this map.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of entries matching the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.count(predicate: (Map.Entry<K, V>) -> Boolean): Int {\n    if (isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Performs the given [action] on each entry.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <K, V> Map<out K, V>.forEach(action: (Map.Entry<K, V>) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first entry yielding the largest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxByOrNull(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.maxByOrNull(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxOf(selector: (Map.Entry<K, V>) -> Double): Double {\n    return entries.maxOf(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxOf(selector: (Map.Entry<K, V>) -> Float): Float {\n    return entries.maxOf(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxOf(selector: (Map.Entry<K, V>) -> R): R {\n    return entries.maxOf(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxOfOrNull(selector: (Map.Entry<K, V>) -> Double): Double? {\n    return entries.maxOfOrNull(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxOfOrNull(selector: (Map.Entry<K, V>) -> Float): Float? {\n    return entries.maxOfOrNull(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxOfOrNull(selector: (Map.Entry<K, V>) -> R): R? {\n    return entries.maxOfOrNull(selector)\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each entry in the map.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R> Map<out K, V>.maxOfWith(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R {\n    return entries.maxOfWith(comparator, selector)\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each entry in the map or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R> Map<out K, V>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R? {\n    return entries.maxOfWithOrNull(comparator, selector)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first entry having the largest value according to the provided [comparator] or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxWithOrNull(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first entry yielding the smallest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minByOrNull(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.minByOrNull(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minOf(selector: (Map.Entry<K, V>) -> Double): Double {\n    return entries.minOf(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minOf(selector: (Map.Entry<K, V>) -> Float): Float {\n    return entries.minOf(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minOf(selector: (Map.Entry<K, V>) -> R): R {\n    return entries.minOf(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minOfOrNull(selector: (Map.Entry<K, V>) -> Double): Double? {\n    return entries.minOfOrNull(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minOfOrNull(selector: (Map.Entry<K, V>) -> Float): Float? {\n    return entries.minOfOrNull(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minOfOrNull(selector: (Map.Entry<K, V>) -> R): R? {\n    return entries.minOfOrNull(selector)\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each entry in the map.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R> Map<out K, V>.minOfWith(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R {\n    return entries.minOfWith(comparator, selector)\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each entry in the map or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R> Map<out K, V>.minOfWithOrNull(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R? {\n    return entries.minOfWithOrNull(comparator, selector)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <K, V> Map<out K, V>.minWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first entry having the smallest value according to the provided [comparator] or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minWithOrNull(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.minWithOrNull(comparator)\n}\n\n/**\n * Returns `true` if the map has no entries.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <K, V> Map<out K, V>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.none(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each entry and returns the map itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K, V, M : Map<out K, V>> M.onEach(action: (Map.Entry<K, V>) -> Unit): M {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each entry, providing sequential index with the entry,\n * and returns the map itself afterwards.\n * @param [action] function that takes the index of an entry and the entry itself\n * and performs the action on the entry.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V, M : Map<out K, V>> M.onEachIndexed(action: (index: Int, Map.Entry<K, V>) -> Unit): M {\n    return apply { entries.forEachIndexed(action) }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original map returning its entries when being iterated.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.asIterable(): Iterable<Map.Entry<K, V>> {\n    return entries\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original map returning its entries when being iterated.\n */\npublic fun <K, V> Map<out K, V>.asSequence(): Sequence<Map.Entry<K, V>> {\n    return entries.asSequence()\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns a set containing all elements of the original set except the given [element].\n * \n * The returned set preserves the element iteration order of the original set.\n */\npublic operator fun <T> Set<T>.minus(element: T): Set<T> {\n    val result = LinkedHashSet<T>(mapCapacity(size))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a set containing all elements of the original set except the elements contained in the given [elements] array.\n * \n * The returned set preserves the element iteration order of the original set.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Set<T>.minus(elements: Array<out T>): Set<T> {\n    val result = LinkedHashSet<T>(this)\n    result.removeAll(elements)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set except the elements contained in the given [elements] collection.\n * \n * The returned set preserves the element iteration order of the original set.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Set<T>.minus(elements: Iterable<T>): Set<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toSet()\n    if (other is Set)\n        return this.filterNotTo(LinkedHashSet<T>()) { it in other }\n    val result = LinkedHashSet<T>(this)\n    result.removeAll(other)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set except the elements contained in the given [elements] sequence.\n * \n * The returned set preserves the element iteration order of the original set.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Set<T>.minus(elements: Sequence<T>): Set<T> {\n    val result = LinkedHashSet<T>(this)\n    result.removeAll(elements)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set except the given [element].\n * \n * The returned set preserves the element iteration order of the original set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>.minusElement(element: T): Set<T> {\n    return minus(element)\n}\n\n/**\n * Returns a set containing all elements of the original set and then the given [element] if it isn't already in this set.\n * \n * The returned set preserves the element iteration order of the original set.\n */\npublic operator fun <T> Set<T>.plus(element: T): Set<T> {\n    val result = LinkedHashSet<T>(mapCapacity(size + 1))\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set and the given [elements] array,\n * which aren't already in this set.\n * \n * The returned set preserves the element iteration order of the original set.\n */\npublic operator fun <T> Set<T>.plus(elements: Array<out T>): Set<T> {\n    val result = LinkedHashSet<T>(mapCapacity(this.size + elements.size))\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set and the given [elements] collection,\n * which aren't already in this set.\n * The returned set preserves the element iteration order of the original set.\n */\npublic operator fun <T> Set<T>.plus(elements: Iterable<T>): Set<T> {\n    val result = LinkedHashSet<T>(mapCapacity(elements.collectionSizeOrNull()?.let { this.size + it } ?: this.size * 2))\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set and the given [elements] sequence,\n * which aren't already in this set.\n * \n * The returned set preserves the element iteration order of the original set.\n */\npublic operator fun <T> Set<T>.plus(elements: Sequence<T>): Set<T> {\n    val result = LinkedHashSet<T>(mapCapacity(this.size * 2))\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set and then the given [element] if it isn't already in this set.\n * \n * The returned set preserves the element iteration order of the original set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>.plusElement(element: T): Set<T> {\n    return plus(element)\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"UArraysKt\")\n@file:kotlin.jvm.JvmPackageName(\"kotlin.collections.unsigned\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component1(): UInt {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component1(): ULong {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component1(): UByte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component1(): UShort {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component2(): UInt {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component2(): ULong {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component2(): UByte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component2(): UShort {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component3(): UInt {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component3(): ULong {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component3(): UByte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component3(): UShort {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component4(): UInt {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component4(): ULong {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component4(): UByte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component4(): UShort {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component5(): UInt {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component5(): ULong {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component5(): UByte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component5(): UShort {\n    return get(4)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UIntArray.elementAt(index: Int): UInt\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun ULongArray.elementAt(index: Int): ULong\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UByteArray.elementAt(index: Int): UByte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UShortArray.elementAt(index: Int): UShort\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> UInt): UInt {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> ULong): ULong {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> UByte): UByte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> UShort): UShort {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.elementAtOrNull(index: Int): UInt? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.elementAtOrNull(index: Int): ULong? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.elementAtOrNull(index: Int): UByte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.elementAtOrNull(index: Int): UShort? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.find(predicate: (UInt) -> Boolean): UInt? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.find(predicate: (ULong) -> Boolean): ULong? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.find(predicate: (UByte) -> Boolean): UByte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.find(predicate: (UShort) -> Boolean): UShort? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.findLast(predicate: (UInt) -> Boolean): UInt? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.findLast(predicate: (ULong) -> Boolean): ULong? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.findLast(predicate: (UByte) -> Boolean): UByte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.findLast(predicate: (UShort) -> Boolean): UShort? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.first(): UInt {\n    return storage.first().toUInt()\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.first(): ULong {\n    return storage.first().toULong()\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.first(): UByte {\n    return storage.first().toUByte()\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.first(): UShort {\n    return storage.first().toUShort()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.first(predicate: (UInt) -> Boolean): UInt {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.first(predicate: (ULong) -> Boolean): ULong {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.first(predicate: (UByte) -> Boolean): UByte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.first(predicate: (UShort) -> Boolean): UShort {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.firstOrNull(): UInt? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.firstOrNull(): ULong? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.firstOrNull(): UByte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.firstOrNull(): UShort? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.firstOrNull(predicate: (UInt) -> Boolean): UInt? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.firstOrNull(predicate: (ULong) -> Boolean): ULong? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.firstOrNull(predicate: (UByte) -> Boolean): UByte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.firstOrNull(predicate: (UShort) -> Boolean): UShort? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.getOrElse(index: Int, defaultValue: (Int) -> UInt): UInt {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.getOrElse(index: Int, defaultValue: (Int) -> ULong): ULong {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.getOrElse(index: Int, defaultValue: (Int) -> UByte): UByte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.getOrElse(index: Int, defaultValue: (Int) -> UShort): UShort {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.getOrNull(index: Int): UInt? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.getOrNull(index: Int): ULong? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.getOrNull(index: Int): UByte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.getOrNull(index: Int): UShort? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.indexOf(element: UInt): Int {\n    return storage.indexOf(element.toInt())\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.indexOf(element: ULong): Int {\n    return storage.indexOf(element.toLong())\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.indexOf(element: UByte): Int {\n    return storage.indexOf(element.toByte())\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.indexOf(element: UShort): Int {\n    return storage.indexOf(element.toShort())\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.indexOfFirst(predicate: (UInt) -> Boolean): Int {\n    return storage.indexOfFirst { predicate(it.toUInt()) }\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.indexOfFirst(predicate: (ULong) -> Boolean): Int {\n    return storage.indexOfFirst { predicate(it.toULong()) }\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.indexOfFirst(predicate: (UByte) -> Boolean): Int {\n    return storage.indexOfFirst { predicate(it.toUByte()) }\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.indexOfFirst(predicate: (UShort) -> Boolean): Int {\n    return storage.indexOfFirst { predicate(it.toUShort()) }\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.indexOfLast(predicate: (UInt) -> Boolean): Int {\n    return storage.indexOfLast { predicate(it.toUInt()) }\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.indexOfLast(predicate: (ULong) -> Boolean): Int {\n    return storage.indexOfLast { predicate(it.toULong()) }\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.indexOfLast(predicate: (UByte) -> Boolean): Int {\n    return storage.indexOfLast { predicate(it.toUByte()) }\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.indexOfLast(predicate: (UShort) -> Boolean): Int {\n    return storage.indexOfLast { predicate(it.toUShort()) }\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.last(): UInt {\n    return storage.last().toUInt()\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.last(): ULong {\n    return storage.last().toULong()\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.last(): UByte {\n    return storage.last().toUByte()\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.last(): UShort {\n    return storage.last().toUShort()\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.last(predicate: (UInt) -> Boolean): UInt {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.last(predicate: (ULong) -> Boolean): ULong {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.last(predicate: (UByte) -> Boolean): UByte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.last(predicate: (UShort) -> Boolean): UShort {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.lastIndexOf(element: UInt): Int {\n    return storage.lastIndexOf(element.toInt())\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.lastIndexOf(element: ULong): Int {\n    return storage.lastIndexOf(element.toLong())\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.lastIndexOf(element: UByte): Int {\n    return storage.lastIndexOf(element.toByte())\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.lastIndexOf(element: UShort): Int {\n    return storage.lastIndexOf(element.toShort())\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.lastOrNull(): UInt? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.lastOrNull(): ULong? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.lastOrNull(): UByte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.lastOrNull(): UShort? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.lastOrNull(predicate: (UInt) -> Boolean): UInt? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.lastOrNull(predicate: (ULong) -> Boolean): ULong? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.lastOrNull(predicate: (UByte) -> Boolean): UByte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.lastOrNull(predicate: (UShort) -> Boolean): UShort? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.random(): UInt {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.random(): ULong {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.random(): UByte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.random(): UShort {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.random(random: Random): UInt {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.random(random: Random): ULong {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.random(random: Random): UByte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.random(random: Random): UShort {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.randomOrNull(): UInt? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.randomOrNull(): ULong? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.randomOrNull(): UByte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.randomOrNull(): UShort? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\npublic fun UIntArray.randomOrNull(random: Random): UInt? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\npublic fun ULongArray.randomOrNull(random: Random): ULong? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\npublic fun UByteArray.randomOrNull(random: Random): UByte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\npublic fun UShortArray.randomOrNull(random: Random): UShort? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.single(): UInt {\n    return storage.single().toUInt()\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.single(): ULong {\n    return storage.single().toULong()\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.single(): UByte {\n    return storage.single().toUByte()\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.single(): UShort {\n    return storage.single().toUShort()\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.single(predicate: (UInt) -> Boolean): UInt {\n    var single: UInt? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as UInt\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.single(predicate: (ULong) -> Boolean): ULong {\n    var single: ULong? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as ULong\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.single(predicate: (UByte) -> Boolean): UByte {\n    var single: UByte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as UByte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.single(predicate: (UShort) -> Boolean): UShort {\n    var single: UShort? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as UShort\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.singleOrNull(): UInt? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.singleOrNull(): ULong? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.singleOrNull(): UByte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.singleOrNull(): UShort? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.singleOrNull(predicate: (UInt) -> Boolean): UInt? {\n    var single: UInt? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.singleOrNull(predicate: (ULong) -> Boolean): ULong? {\n    var single: ULong? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.singleOrNull(predicate: (UByte) -> Boolean): UByte? {\n    var single: UByte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.singleOrNull(predicate: (UShort) -> Boolean): UShort? {\n    var single: UShort? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.drop(n: Int): List<UInt> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.drop(n: Int): List<ULong> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.drop(n: Int): List<UByte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.drop(n: Int): List<UShort> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.dropLast(n: Int): List<UInt> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.dropLast(n: Int): List<ULong> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.dropLast(n: Int): List<UByte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.dropLast(n: Int): List<UShort> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.dropLastWhile(predicate: (UInt) -> Boolean): List<UInt> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.dropLastWhile(predicate: (ULong) -> Boolean): List<ULong> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.dropLastWhile(predicate: (UByte) -> Boolean): List<UByte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.dropLastWhile(predicate: (UShort) -> Boolean): List<UShort> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.dropWhile(predicate: (UInt) -> Boolean): List<UInt> {\n    var yielding = false\n    val list = ArrayList<UInt>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.dropWhile(predicate: (ULong) -> Boolean): List<ULong> {\n    var yielding = false\n    val list = ArrayList<ULong>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.dropWhile(predicate: (UByte) -> Boolean): List<UByte> {\n    var yielding = false\n    val list = ArrayList<UByte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.dropWhile(predicate: (UShort) -> Boolean): List<UShort> {\n    var yielding = false\n    val list = ArrayList<UShort>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.filter(predicate: (UInt) -> Boolean): List<UInt> {\n    return filterTo(ArrayList<UInt>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.filter(predicate: (ULong) -> Boolean): List<ULong> {\n    return filterTo(ArrayList<ULong>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.filter(predicate: (UByte) -> Boolean): List<UByte> {\n    return filterTo(ArrayList<UByte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.filter(predicate: (UShort) -> Boolean): List<UShort> {\n    return filterTo(ArrayList<UShort>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.filterIndexed(predicate: (index: Int, UInt) -> Boolean): List<UInt> {\n    return filterIndexedTo(ArrayList<UInt>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.filterIndexed(predicate: (index: Int, ULong) -> Boolean): List<ULong> {\n    return filterIndexedTo(ArrayList<ULong>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.filterIndexed(predicate: (index: Int, UByte) -> Boolean): List<UByte> {\n    return filterIndexedTo(ArrayList<UByte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.filterIndexed(predicate: (index: Int, UShort) -> Boolean): List<UShort> {\n    return filterIndexedTo(ArrayList<UShort>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UInt>> UIntArray.filterIndexedTo(destination: C, predicate: (index: Int, UInt) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in ULong>> ULongArray.filterIndexedTo(destination: C, predicate: (index: Int, ULong) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UByte>> UByteArray.filterIndexedTo(destination: C, predicate: (index: Int, UByte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UShort>> UShortArray.filterIndexedTo(destination: C, predicate: (index: Int, UShort) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.filterNot(predicate: (UInt) -> Boolean): List<UInt> {\n    return filterNotTo(ArrayList<UInt>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.filterNot(predicate: (ULong) -> Boolean): List<ULong> {\n    return filterNotTo(ArrayList<ULong>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.filterNot(predicate: (UByte) -> Boolean): List<UByte> {\n    return filterNotTo(ArrayList<UByte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.filterNot(predicate: (UShort) -> Boolean): List<UShort> {\n    return filterNotTo(ArrayList<UShort>(), predicate)\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UInt>> UIntArray.filterNotTo(destination: C, predicate: (UInt) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in ULong>> ULongArray.filterNotTo(destination: C, predicate: (ULong) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UByte>> UByteArray.filterNotTo(destination: C, predicate: (UByte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UShort>> UShortArray.filterNotTo(destination: C, predicate: (UShort) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UInt>> UIntArray.filterTo(destination: C, predicate: (UInt) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in ULong>> ULongArray.filterTo(destination: C, predicate: (ULong) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UByte>> UByteArray.filterTo(destination: C, predicate: (UByte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UShort>> UShortArray.filterTo(destination: C, predicate: (UShort) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.slice(indices: IntRange): List<UInt> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.slice(indices: IntRange): List<ULong> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.slice(indices: IntRange): List<UByte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.slice(indices: IntRange): List<UShort> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.slice(indices: Iterable<Int>): List<UInt> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<UInt>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.slice(indices: Iterable<Int>): List<ULong> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<ULong>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.slice(indices: Iterable<Int>): List<UByte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<UByte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.slice(indices: Iterable<Int>): List<UShort> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<UShort>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sliceArray(indices: Collection<Int>): UIntArray {\n    return UIntArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sliceArray(indices: Collection<Int>): ULongArray {\n    return ULongArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sliceArray(indices: Collection<Int>): UByteArray {\n    return UByteArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sliceArray(indices: Collection<Int>): UShortArray {\n    return UShortArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sliceArray(indices: IntRange): UIntArray {\n    return UIntArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sliceArray(indices: IntRange): ULongArray {\n    return ULongArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sliceArray(indices: IntRange): UByteArray {\n    return UByteArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sliceArray(indices: IntRange): UShortArray {\n    return UShortArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.take(n: Int): List<UInt> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<UInt>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.take(n: Int): List<ULong> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<ULong>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.take(n: Int): List<UByte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<UByte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.take(n: Int): List<UShort> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<UShort>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.takeLast(n: Int): List<UInt> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<UInt>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.takeLast(n: Int): List<ULong> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<ULong>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.takeLast(n: Int): List<UByte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<UByte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.takeLast(n: Int): List<UShort> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<UShort>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.takeLastWhile(predicate: (UInt) -> Boolean): List<UInt> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.takeLastWhile(predicate: (ULong) -> Boolean): List<ULong> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.takeLastWhile(predicate: (UByte) -> Boolean): List<UByte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.takeLastWhile(predicate: (UShort) -> Boolean): List<UShort> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.takeWhile(predicate: (UInt) -> Boolean): List<UInt> {\n    val list = ArrayList<UInt>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.takeWhile(predicate: (ULong) -> Boolean): List<ULong> {\n    val list = ArrayList<ULong>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.takeWhile(predicate: (UByte) -> Boolean): List<UByte> {\n    val list = ArrayList<UByte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.takeWhile(predicate: (UShort) -> Boolean): List<UShort> {\n    val list = ArrayList<UShort>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reverse(): Unit {\n    storage.reverse()\n}\n\n/**\n * Reverses elements in the array in-place.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reverse(): Unit {\n    storage.reverse()\n}\n\n/**\n * Reverses elements in the array in-place.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reverse(): Unit {\n    storage.reverse()\n}\n\n/**\n * Reverses elements in the array in-place.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reverse(): Unit {\n    storage.reverse()\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    storage.reverse(fromIndex, toIndex)\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    storage.reverse(fromIndex, toIndex)\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    storage.reverse(fromIndex, toIndex)\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    storage.reverse(fromIndex, toIndex)\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.reversed(): List<UInt> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.reversed(): List<ULong> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.reversed(): List<UByte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.reversed(): List<UShort> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reversedArray(): UIntArray {\n    return UIntArray(storage.reversedArray())\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reversedArray(): ULongArray {\n    return ULongArray(storage.reversedArray())\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reversedArray(): UByteArray {\n    return UByteArray(storage.reversedArray())\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reversedArray(): UShortArray {\n    return UShortArray(storage.reversedArray())\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sorted(): List<UInt> {\n    return copyOf().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sorted(): List<ULong> {\n    return copyOf().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sorted(): List<UByte> {\n    return copyOf().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sorted(): List<UShort> {\n    return copyOf().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sortedArray(): UIntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sortedArray(): ULongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sortedArray(): UByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sortedArray(): UShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sortedArrayDescending(): UIntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sortedArrayDescending(): ULongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sortedArrayDescending(): UByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sortedArrayDescending(): UShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sortedDescending(): List<UInt> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sortedDescending(): List<ULong> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sortedDescending(): List<UByte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sortedDescending(): List<UShort> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns an array of type [ByteArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.asByteArray(): ByteArray {\n    return storage\n}\n\n/**\n * Returns an array of type [IntArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.asIntArray(): IntArray {\n    return storage\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UIntArray.asList(): List<UInt>\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun ULongArray.asList(): List<ULong>\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UByteArray.asList(): List<UByte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UShortArray.asList(): List<UShort>\n\n/**\n * Returns an array of type [LongArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.asLongArray(): LongArray {\n    return storage\n}\n\n/**\n * Returns an array of type [ShortArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.asShortArray(): ShortArray {\n    return storage\n}\n\n/**\n * Returns an array of type [UByteArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.asUByteArray(): UByteArray {\n    return UByteArray(this)\n}\n\n/**\n * Returns an array of type [UIntArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.asUIntArray(): UIntArray {\n    return UIntArray(this)\n}\n\n/**\n * Returns an array of type [ULongArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.asULongArray(): ULongArray {\n    return ULongArray(this)\n}\n\n/**\n * Returns an array of type [UShortArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.asUShortArray(): UShortArray {\n    return UShortArray(this)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic infix fun UIntArray.contentEquals(other: UIntArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic infix fun ULongArray.contentEquals(other: ULongArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic infix fun UByteArray.contentEquals(other: UByteArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic infix fun UShortArray.contentEquals(other: UShortArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic infix fun UIntArray?.contentEquals(other: UIntArray?): Boolean {\n    return this?.storage.contentEquals(other?.storage)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic infix fun ULongArray?.contentEquals(other: ULongArray?): Boolean {\n    return this?.storage.contentEquals(other?.storage)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic infix fun UByteArray?.contentEquals(other: UByteArray?): Boolean {\n    return this?.storage.contentEquals(other?.storage)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic infix fun UShortArray?.contentEquals(other: UShortArray?): Boolean {\n    return this?.storage.contentEquals(other?.storage)\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray?.contentHashCode(): Int {\n    return this?.storage.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray?.contentHashCode(): Int {\n    return this?.storage.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray?.contentHashCode(): Int {\n    return this?.storage.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray?.contentHashCode(): Int {\n    return this?.storage.contentHashCode()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.3\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray?.contentToString(): String {\n    return this?.joinToString(\", \", \"[\", \"]\") ?: \"null\"\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray?.contentToString(): String {\n    return this?.joinToString(\", \", \"[\", \"]\") ?: \"null\"\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray?.contentToString(): String {\n    return this?.joinToString(\", \", \"[\", \"]\") ?: \"null\"\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray?.contentToString(): String {\n    return this?.joinToString(\", \", \"[\", \"]\") ?: \"null\"\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyInto(destination: UIntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): UIntArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyInto(destination: ULongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ULongArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyInto(destination: UByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): UByteArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyInto(destination: UShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): UShortArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyOf(): UIntArray {\n    return UIntArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyOf(): ULongArray {\n    return ULongArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyOf(): UByteArray {\n    return UByteArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyOf(): UShortArray {\n    return UShortArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyOf(newSize: Int): UIntArray {\n    return UIntArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyOf(newSize: Int): ULongArray {\n    return ULongArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyOf(newSize: Int): UByteArray {\n    return UByteArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyOf(newSize: Int): UShortArray {\n    return UShortArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyOfRange(fromIndex: Int, toIndex: Int): UIntArray {\n    return UIntArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyOfRange(fromIndex: Int, toIndex: Int): ULongArray {\n    return ULongArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyOfRange(fromIndex: Int, toIndex: Int): UByteArray {\n    return UByteArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyOfRange(fromIndex: Int, toIndex: Int): UShortArray {\n    return UShortArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.fill(element: UInt, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    storage.fill(element.toInt(), fromIndex, toIndex)\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.fill(element: ULong, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    storage.fill(element.toLong(), fromIndex, toIndex)\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.fill(element: UByte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    storage.fill(element.toByte(), fromIndex, toIndex)\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.fill(element: UShort, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    storage.fill(element.toShort(), fromIndex, toIndex)\n}\n\n/**\n * Returns the range of valid indices for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UIntArray.indices: IntRange\n    get() = storage.indices\n\n/**\n * Returns the range of valid indices for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val ULongArray.indices: IntRange\n    get() = storage.indices\n\n/**\n * Returns the range of valid indices for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UByteArray.indices: IntRange\n    get() = storage.indices\n\n/**\n * Returns the range of valid indices for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UShortArray.indices: IntRange\n    get() = storage.indices\n\n/**\n * Returns the last valid index for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UIntArray.lastIndex: Int\n    get() = storage.lastIndex\n\n/**\n * Returns the last valid index for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val ULongArray.lastIndex: Int\n    get() = storage.lastIndex\n\n/**\n * Returns the last valid index for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UByteArray.lastIndex: Int\n    get() = storage.lastIndex\n\n/**\n * Returns the last valid index for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UShortArray.lastIndex: Int\n    get() = storage.lastIndex\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.plus(element: UInt): UIntArray {\n    return UIntArray(storage + element.toInt())\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.plus(element: ULong): ULongArray {\n    return ULongArray(storage + element.toLong())\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.plus(element: UByte): UByteArray {\n    return UByteArray(storage + element.toByte())\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.plus(element: UShort): UShortArray {\n    return UShortArray(storage + element.toShort())\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic operator fun UIntArray.plus(elements: Collection<UInt>): UIntArray {\n    var index = size\n    val result = storage.copyOf(size + elements.size)\n    for (element in elements) result[index++] = element.toInt()\n    return UIntArray(result)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic operator fun ULongArray.plus(elements: Collection<ULong>): ULongArray {\n    var index = size\n    val result = storage.copyOf(size + elements.size)\n    for (element in elements) result[index++] = element.toLong()\n    return ULongArray(result)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic operator fun UByteArray.plus(elements: Collection<UByte>): UByteArray {\n    var index = size\n    val result = storage.copyOf(size + elements.size)\n    for (element in elements) result[index++] = element.toByte()\n    return UByteArray(result)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic operator fun UShortArray.plus(elements: Collection<UShort>): UShortArray {\n    var index = size\n    val result = storage.copyOf(size + elements.size)\n    for (element in elements) result[index++] = element.toShort()\n    return UShortArray(result)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.plus(elements: UIntArray): UIntArray {\n    return UIntArray(storage + elements.storage)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.plus(elements: ULongArray): ULongArray {\n    return ULongArray(storage + elements.storage)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.plus(elements: UByteArray): UByteArray {\n    return UByteArray(storage + elements.storage)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.plus(elements: UShortArray): UShortArray {\n    return UShortArray(storage + elements.storage)\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sort(): Unit {\n    if (size > 1) sortArray(this, 0, size)\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sort(): Unit {\n    if (size > 1) sortArray(this, 0, size)\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sort(): Unit {\n    if (size > 1) sortArray(this, 0, size)\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sort(): Unit {\n    if (size > 1) sortArray(this, 0, size)\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArray(this, fromIndex, toIndex)\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArray(this, fromIndex, toIndex)\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArray(this, fromIndex, toIndex)\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArray(this, fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Returns an array of type [ByteArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.toByteArray(): ByteArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns an array of type [IntArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.toIntArray(): IntArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns an array of type [LongArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.toLongArray(): LongArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns an array of type [ShortArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.toShortArray(): ShortArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.toTypedArray(): Array<UInt> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.toTypedArray(): Array<ULong> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.toTypedArray(): Array<UByte> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.toTypedArray(): Array<UShort> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of UByte containing all of the elements of this generic array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UByte>.toUByteArray(): UByteArray {\n    return UByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of type [UByteArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.toUByteArray(): UByteArray {\n    return UByteArray(this.copyOf())\n}\n\n/**\n * Returns an array of UInt containing all of the elements of this generic array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UInt>.toUIntArray(): UIntArray {\n    return UIntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of type [UIntArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.toUIntArray(): UIntArray {\n    return UIntArray(this.copyOf())\n}\n\n/**\n * Returns an array of ULong containing all of the elements of this generic array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out ULong>.toULongArray(): ULongArray {\n    return ULongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of type [ULongArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.toULongArray(): ULongArray {\n    return ULongArray(this.copyOf())\n}\n\n/**\n * Returns an array of UShort containing all of the elements of this generic array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UShort>.toUShortArray(): UShortArray {\n    return UShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of type [UShortArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.toUShortArray(): UShortArray {\n    return UShortArray(this.copyOf())\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> UIntArray.associateWith(valueSelector: (UInt) -> V): Map<UInt, V> {\n    val result = LinkedHashMap<UInt, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> ULongArray.associateWith(valueSelector: (ULong) -> V): Map<ULong, V> {\n    val result = LinkedHashMap<ULong, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> UByteArray.associateWith(valueSelector: (UByte) -> V): Map<UByte, V> {\n    val result = LinkedHashMap<UByte, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> UShortArray.associateWith(valueSelector: (UShort) -> V): Map<UShort, V> {\n    val result = LinkedHashMap<UShort, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in UInt, in V>> UIntArray.associateWithTo(destination: M, valueSelector: (UInt) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in ULong, in V>> ULongArray.associateWithTo(destination: M, valueSelector: (ULong) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in UByte, in V>> UByteArray.associateWithTo(destination: M, valueSelector: (UByte) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in UShort, in V>> UShortArray.associateWithTo(destination: M, valueSelector: (UShort) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.flatMap(transform: (UInt) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.flatMap(transform: (ULong) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.flatMap(transform: (UByte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.flatMap(transform: (UShort) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.flatMapIndexed(transform: (index: Int, UInt) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.flatMapIndexed(transform: (index: Int, ULong) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.flatMapIndexed(transform: (index: Int, UByte) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.flatMapIndexed(transform: (index: Int, UShort) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UIntArray.flatMapIndexedTo(destination: C, transform: (index: Int, UInt) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ULongArray.flatMapIndexedTo(destination: C, transform: (index: Int, ULong) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UByteArray.flatMapIndexedTo(destination: C, transform: (index: Int, UByte) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UShortArray.flatMapIndexedTo(destination: C, transform: (index: Int, UShort) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UIntArray.flatMapTo(destination: C, transform: (UInt) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ULongArray.flatMapTo(destination: C, transform: (ULong) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UByteArray.flatMapTo(destination: C, transform: (UByte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UShortArray.flatMapTo(destination: C, transform: (UShort) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K> UIntArray.groupBy(keySelector: (UInt) -> K): Map<K, List<UInt>> {\n    return groupByTo(LinkedHashMap<K, MutableList<UInt>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K> ULongArray.groupBy(keySelector: (ULong) -> K): Map<K, List<ULong>> {\n    return groupByTo(LinkedHashMap<K, MutableList<ULong>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K> UByteArray.groupBy(keySelector: (UByte) -> K): Map<K, List<UByte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<UByte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K> UShortArray.groupBy(keySelector: (UShort) -> K): Map<K, List<UShort>> {\n    return groupByTo(LinkedHashMap<K, MutableList<UShort>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> UIntArray.groupBy(keySelector: (UInt) -> K, valueTransform: (UInt) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> ULongArray.groupBy(keySelector: (ULong) -> K, valueTransform: (ULong) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> UByteArray.groupBy(keySelector: (UByte) -> K, valueTransform: (UByte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> UShortArray.groupBy(keySelector: (UShort) -> K, valueTransform: (UShort) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, M : MutableMap<in K, MutableList<UInt>>> UIntArray.groupByTo(destination: M, keySelector: (UInt) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<UInt>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, M : MutableMap<in K, MutableList<ULong>>> ULongArray.groupByTo(destination: M, keySelector: (ULong) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<ULong>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, M : MutableMap<in K, MutableList<UByte>>> UByteArray.groupByTo(destination: M, keySelector: (UByte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<UByte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, M : MutableMap<in K, MutableList<UShort>>> UShortArray.groupByTo(destination: M, keySelector: (UShort) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<UShort>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> UIntArray.groupByTo(destination: M, keySelector: (UInt) -> K, valueTransform: (UInt) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ULongArray.groupByTo(destination: M, keySelector: (ULong) -> K, valueTransform: (ULong) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> UByteArray.groupByTo(destination: M, keySelector: (UByte) -> K, valueTransform: (UByte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> UShortArray.groupByTo(destination: M, keySelector: (UShort) -> K, valueTransform: (UShort) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.map(transform: (UInt) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.map(transform: (ULong) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.map(transform: (UByte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.map(transform: (UShort) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.mapIndexed(transform: (index: Int, UInt) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.mapIndexed(transform: (index: Int, ULong) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.mapIndexed(transform: (index: Int, UByte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.mapIndexed(transform: (index: Int, UShort) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UIntArray.mapIndexedTo(destination: C, transform: (index: Int, UInt) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ULongArray.mapIndexedTo(destination: C, transform: (index: Int, ULong) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UByteArray.mapIndexedTo(destination: C, transform: (index: Int, UByte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UShortArray.mapIndexedTo(destination: C, transform: (index: Int, UShort) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UIntArray.mapTo(destination: C, transform: (UInt) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ULongArray.mapTo(destination: C, transform: (ULong) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UByteArray.mapTo(destination: C, transform: (UByte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UShortArray.mapTo(destination: C, transform: (UShort) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.withIndex(): Iterable<IndexedValue<UInt>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.withIndex(): Iterable<IndexedValue<ULong>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.withIndex(): Iterable<IndexedValue<UByte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.withIndex(): Iterable<IndexedValue<UShort>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.all(predicate: (UInt) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.all(predicate: (ULong) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.all(predicate: (UByte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.all(predicate: (UShort) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.any(): Boolean {\n    return storage.any()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.any(): Boolean {\n    return storage.any()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.any(): Boolean {\n    return storage.any()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.any(): Boolean {\n    return storage.any()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.any(predicate: (UInt) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.any(predicate: (ULong) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.any(predicate: (UByte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.any(predicate: (UShort) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.count(predicate: (UInt) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.count(predicate: (ULong) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.count(predicate: (UByte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.count(predicate: (UShort) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.fold(initial: R, operation: (acc: R, UInt) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.fold(initial: R, operation: (acc: R, ULong) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.fold(initial: R, operation: (acc: R, UByte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.fold(initial: R, operation: (acc: R, UShort) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, UInt) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, ULong) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, UByte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, UShort) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.foldRight(initial: R, operation: (UInt, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.foldRight(initial: R, operation: (ULong, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.foldRight(initial: R, operation: (UByte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.foldRight(initial: R, operation: (UShort, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.foldRightIndexed(initial: R, operation: (index: Int, UInt, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.foldRightIndexed(initial: R, operation: (index: Int, ULong, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.foldRightIndexed(initial: R, operation: (index: Int, UByte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.foldRightIndexed(initial: R, operation: (index: Int, UShort, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.forEach(action: (UInt) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.forEach(action: (ULong) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.forEach(action: (UByte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.forEach(action: (UShort) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.forEachIndexed(action: (index: Int, UInt) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.forEachIndexed(action: (index: Int, ULong) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.forEachIndexed(action: (index: Int, UByte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.forEachIndexed(action: (index: Int, UShort) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.max(): UInt? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.max(): ULong? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.max(): UByte? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.max(): UShort? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.maxBy(selector: (UInt) -> R): UInt? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.maxBy(selector: (ULong) -> R): ULong? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.maxBy(selector: (UByte) -> R): UByte? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.maxBy(selector: (UShort) -> R): UShort? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.maxByOrNull(selector: (UInt) -> R): UInt? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.maxByOrNull(selector: (ULong) -> R): ULong? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.maxByOrNull(selector: (UByte) -> R): UByte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.maxByOrNull(selector: (UShort) -> R): UShort? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.maxOf(selector: (UInt) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.maxOf(selector: (ULong) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.maxOf(selector: (UByte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.maxOf(selector: (UShort) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.maxOf(selector: (UInt) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.maxOf(selector: (ULong) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.maxOf(selector: (UByte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.maxOf(selector: (UShort) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.maxOf(selector: (UInt) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.maxOf(selector: (ULong) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.maxOf(selector: (UByte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.maxOf(selector: (UShort) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.maxOfOrNull(selector: (UInt) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.maxOfOrNull(selector: (ULong) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.maxOfOrNull(selector: (UByte) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.maxOfOrNull(selector: (UShort) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.maxOfOrNull(selector: (UInt) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.maxOfOrNull(selector: (ULong) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.maxOfOrNull(selector: (UByte) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.maxOfOrNull(selector: (UShort) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.maxOfOrNull(selector: (UInt) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.maxOfOrNull(selector: (ULong) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.maxOfOrNull(selector: (UByte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.maxOfOrNull(selector: (UShort) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.maxOfWith(comparator: Comparator<in R>, selector: (UInt) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.maxOfWith(comparator: Comparator<in R>, selector: (ULong) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.maxOfWith(comparator: Comparator<in R>, selector: (UByte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.maxOfWith(comparator: Comparator<in R>, selector: (UShort) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (UInt) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (ULong) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (UByte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (UShort) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.maxOrNull(): UInt? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.maxOrNull(): ULong? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.maxOrNull(): UByte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.maxOrNull(): UShort? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.maxWith(comparator: Comparator<in UInt>): UInt? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.maxWith(comparator: Comparator<in ULong>): ULong? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.maxWith(comparator: Comparator<in UByte>): UByte? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.maxWith(comparator: Comparator<in UShort>): UShort? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.maxWithOrNull(comparator: Comparator<in UInt>): UInt? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.maxWithOrNull(comparator: Comparator<in ULong>): ULong? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.maxWithOrNull(comparator: Comparator<in UByte>): UByte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.maxWithOrNull(comparator: Comparator<in UShort>): UShort? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.min(): UInt? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.min(): ULong? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.min(): UByte? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.min(): UShort? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.minBy(selector: (UInt) -> R): UInt? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.minBy(selector: (ULong) -> R): ULong? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.minBy(selector: (UByte) -> R): UByte? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.minBy(selector: (UShort) -> R): UShort? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.minByOrNull(selector: (UInt) -> R): UInt? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.minByOrNull(selector: (ULong) -> R): ULong? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.minByOrNull(selector: (UByte) -> R): UByte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.minByOrNull(selector: (UShort) -> R): UShort? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.minOf(selector: (UInt) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.minOf(selector: (ULong) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.minOf(selector: (UByte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.minOf(selector: (UShort) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.minOf(selector: (UInt) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.minOf(selector: (ULong) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.minOf(selector: (UByte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.minOf(selector: (UShort) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.minOf(selector: (UInt) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.minOf(selector: (ULong) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.minOf(selector: (UByte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.minOf(selector: (UShort) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.minOfOrNull(selector: (UInt) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.minOfOrNull(selector: (ULong) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.minOfOrNull(selector: (UByte) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.minOfOrNull(selector: (UShort) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.minOfOrNull(selector: (UInt) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.minOfOrNull(selector: (ULong) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.minOfOrNull(selector: (UByte) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.minOfOrNull(selector: (UShort) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.minOfOrNull(selector: (UInt) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.minOfOrNull(selector: (ULong) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.minOfOrNull(selector: (UByte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.minOfOrNull(selector: (UShort) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.minOfWith(comparator: Comparator<in R>, selector: (UInt) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.minOfWith(comparator: Comparator<in R>, selector: (ULong) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.minOfWith(comparator: Comparator<in R>, selector: (UByte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.minOfWith(comparator: Comparator<in R>, selector: (UShort) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (UInt) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (ULong) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (UByte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (UShort) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.minOrNull(): UInt? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.minOrNull(): ULong? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.minOrNull(): UByte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.minOrNull(): UShort? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.minWith(comparator: Comparator<in UInt>): UInt? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.minWith(comparator: Comparator<in ULong>): ULong? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.minWith(comparator: Comparator<in UByte>): UByte? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.minWith(comparator: Comparator<in UShort>): UShort? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.minWithOrNull(comparator: Comparator<in UInt>): UInt? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.minWithOrNull(comparator: Comparator<in ULong>): ULong? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.minWithOrNull(comparator: Comparator<in UByte>): UByte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.minWithOrNull(comparator: Comparator<in UShort>): UShort? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.none(predicate: (UInt) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.none(predicate: (ULong) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.none(predicate: (UByte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.none(predicate: (UShort) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.onEach(action: (UInt) -> Unit): UIntArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.onEach(action: (ULong) -> Unit): ULongArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.onEach(action: (UByte) -> Unit): UByteArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.onEach(action: (UShort) -> Unit): UShortArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.onEachIndexed(action: (index: Int, UInt) -> Unit): UIntArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.onEachIndexed(action: (index: Int, ULong) -> Unit): ULongArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.onEachIndexed(action: (index: Int, UByte) -> Unit): UByteArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.onEachIndexed(action: (index: Int, UShort) -> Unit): UShortArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduce(operation: (acc: UInt, UInt) -> UInt): UInt {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduce(operation: (acc: ULong, ULong) -> ULong): ULong {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduce(operation: (acc: UByte, UByte) -> UByte): UByte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduce(operation: (acc: UShort, UShort) -> UShort): UShort {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceIndexed(operation: (index: Int, acc: UInt, UInt) -> UInt): UInt {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceIndexed(operation: (index: Int, acc: ULong, ULong) -> ULong): ULong {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceIndexed(operation: (index: Int, acc: UByte, UByte) -> UByte): UByte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceIndexed(operation: (index: Int, acc: UShort, UShort) -> UShort): UShort {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceIndexedOrNull(operation: (index: Int, acc: UInt, UInt) -> UInt): UInt? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceIndexedOrNull(operation: (index: Int, acc: ULong, ULong) -> ULong): ULong? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceIndexedOrNull(operation: (index: Int, acc: UByte, UByte) -> UByte): UByte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceIndexedOrNull(operation: (index: Int, acc: UShort, UShort) -> UShort): UShort? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceOrNull(operation: (acc: UInt, UInt) -> UInt): UInt? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceOrNull(operation: (acc: ULong, ULong) -> ULong): ULong? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceOrNull(operation: (acc: UByte, UByte) -> UByte): UByte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceOrNull(operation: (acc: UShort, UShort) -> UShort): UShort? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceRight(operation: (UInt, acc: UInt) -> UInt): UInt {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceRight(operation: (ULong, acc: ULong) -> ULong): ULong {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceRight(operation: (UByte, acc: UByte) -> UByte): UByte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceRight(operation: (UShort, acc: UShort) -> UShort): UShort {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceRightIndexed(operation: (index: Int, UInt, acc: UInt) -> UInt): UInt {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceRightIndexed(operation: (index: Int, ULong, acc: ULong) -> ULong): ULong {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceRightIndexed(operation: (index: Int, UByte, acc: UByte) -> UByte): UByte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceRightIndexed(operation: (index: Int, UShort, acc: UShort) -> UShort): UShort {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceRightIndexedOrNull(operation: (index: Int, UInt, acc: UInt) -> UInt): UInt? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceRightIndexedOrNull(operation: (index: Int, ULong, acc: ULong) -> ULong): ULong? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceRightIndexedOrNull(operation: (index: Int, UByte, acc: UByte) -> UByte): UByte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceRightIndexedOrNull(operation: (index: Int, UShort, acc: UShort) -> UShort): UShort? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceRightOrNull(operation: (UInt, acc: UInt) -> UInt): UInt? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceRightOrNull(operation: (ULong, acc: ULong) -> ULong): ULong? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceRightOrNull(operation: (UByte, acc: UByte) -> UByte): UByte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceRightOrNull(operation: (UShort, acc: UShort) -> UShort): UShort? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.runningFold(initial: R, operation: (acc: R, UInt) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.runningFold(initial: R, operation: (acc: R, ULong) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.runningFold(initial: R, operation: (acc: R, UByte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.runningFold(initial: R, operation: (acc: R, UShort) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, UInt) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, ULong) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, UByte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, UShort) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.runningReduce(operation: (acc: UInt, UInt) -> UInt): List<UInt> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UInt>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.runningReduce(operation: (acc: ULong, ULong) -> ULong): List<ULong> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<ULong>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.runningReduce(operation: (acc: UByte, UByte) -> UByte): List<UByte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UByte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.runningReduce(operation: (acc: UShort, UShort) -> UShort): List<UShort> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UShort>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.runningReduceIndexed(operation: (index: Int, acc: UInt, UInt) -> UInt): List<UInt> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UInt>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.runningReduceIndexed(operation: (index: Int, acc: ULong, ULong) -> ULong): List<ULong> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<ULong>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.runningReduceIndexed(operation: (index: Int, acc: UByte, UByte) -> UByte): List<UByte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UByte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.runningReduceIndexed(operation: (index: Int, acc: UShort, UShort) -> UShort): List<UShort> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UShort>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.scan(initial: R, operation: (acc: R, UInt) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.scan(initial: R, operation: (acc: R, ULong) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.scan(initial: R, operation: (acc: R, UByte) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.scan(initial: R, operation: (acc: R, UShort) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, UInt) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, ULong) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, UByte) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, UShort) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.scanReduce(operation: (acc: UInt, UInt) -> UInt): List<UInt> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.scanReduce(operation: (acc: ULong, ULong) -> ULong): List<ULong> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.scanReduce(operation: (acc: UByte, UByte) -> UByte): List<UByte> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.scanReduce(operation: (acc: UShort, UShort) -> UShort): List<UShort> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.scanReduceIndexed(operation: (index: Int, acc: UInt, UInt) -> UInt): List<UInt> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.scanReduceIndexed(operation: (index: Int, acc: ULong, ULong) -> ULong): List<ULong> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.scanReduceIndexed(operation: (index: Int, acc: UByte, UByte) -> UByte): List<UByte> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.scanReduceIndexed(operation: (index: Int, acc: UShort, UShort) -> UShort): List<UShort> {\n    return runningReduceIndexed(operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sumBy(selector: (UInt) -> UInt): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sumBy(selector: (ULong) -> UInt): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sumBy(selector: (UByte) -> UInt): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sumBy(selector: (UShort) -> UInt): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sumByDouble(selector: (UInt) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sumByDouble(selector: (ULong) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sumByDouble(selector: (UByte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sumByDouble(selector: (UShort) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sumOf(selector: (UInt) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sumOf(selector: (ULong) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sumOf(selector: (UByte) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sumOf(selector: (UShort) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sumOf(selector: (UInt) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sumOf(selector: (ULong) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sumOf(selector: (UByte) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sumOf(selector: (UShort) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sumOf(selector: (UInt) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sumOf(selector: (ULong) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sumOf(selector: (UByte) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sumOf(selector: (UShort) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sumOf(selector: (UInt) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sumOf(selector: (ULong) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sumOf(selector: (UByte) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sumOf(selector: (UShort) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sumOf(selector: (UInt) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sumOf(selector: (ULong) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sumOf(selector: (UByte) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@Suppress(\"INAPPLICABLE_JVM_NAME\")\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sumOf(selector: (UShort) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UIntArray.zip(other: Array<out R>): List<Pair<UInt, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> ULongArray.zip(other: Array<out R>): List<Pair<ULong, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UByteArray.zip(other: Array<out R>): List<Pair<UByte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UShortArray.zip(other: Array<out R>): List<Pair<UShort, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UIntArray.zip(other: Array<out R>, transform: (a: UInt, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> ULongArray.zip(other: Array<out R>, transform: (a: ULong, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UByteArray.zip(other: Array<out R>, transform: (a: UByte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UShortArray.zip(other: Array<out R>, transform: (a: UShort, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UIntArray.zip(other: Iterable<R>): List<Pair<UInt, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> ULongArray.zip(other: Iterable<R>): List<Pair<ULong, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UByteArray.zip(other: Iterable<R>): List<Pair<UByte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UShortArray.zip(other: Iterable<R>): List<Pair<UShort, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UIntArray.zip(other: Iterable<R>, transform: (a: UInt, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> ULongArray.zip(other: Iterable<R>, transform: (a: ULong, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UByteArray.zip(other: Iterable<R>, transform: (a: UByte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UShortArray.zip(other: Iterable<R>, transform: (a: UShort, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UIntArray.zip(other: UIntArray): List<Pair<UInt, UInt>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun ULongArray.zip(other: ULongArray): List<Pair<ULong, ULong>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UByteArray.zip(other: UByteArray): List<Pair<UByte, UByte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UShortArray.zip(other: UShortArray): List<Pair<UShort, UShort>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> UIntArray.zip(other: UIntArray, transform: (a: UInt, b: UInt) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> ULongArray.zip(other: ULongArray, transform: (a: ULong, b: ULong) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> UByteArray.zip(other: UByteArray, transform: (a: UByte, b: UByte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> UShortArray.zip(other: UShortArray, transform: (a: UShort, b: UShort) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UInt>.sum(): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out ULong>.sum(): ULong {\n    var sum: ULong = 0uL\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfUByte\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UByte>.sum(): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfUShort\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UShort>.sum(): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sum(): UInt {\n    return storage.sum().toUInt()\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sum(): ULong {\n    return storage.sum().toULong()\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sum(): UInt {\n    return sumBy { it.toUInt() }\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sum(): UInt {\n    return sumBy { it.toUInt() }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n/**\n * Returns the detailed description of this throwable with its stack trace.\n *\n * The detailed description includes:\n * - the short description (see [Throwable.toString]) of this throwable;\n * - the complete stack trace;\n * - detailed descriptions of the exceptions that were [suppressed][suppressedExceptions] in order to deliver this exception;\n * - the detailed description of each throwable in the [Throwable.cause] chain.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun Throwable.stackTraceToString(): String = ExceptionTraceBuilder().buildFor(this)\n\n/**\n * Prints the [detailed description][Throwable.stackTraceToString] of this throwable to console error output.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun Throwable.printStackTrace() {\n    console.error(this.stackTraceToString())\n}\n\n/**\n * Adds the specified exception to the list of exceptions that were\n * suppressed in order to deliver this exception.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun Throwable.addSuppressed(exception: Throwable) {\n    if (this !== exception) {\n        val suppressed = this.asDynamic()._suppressed.unsafeCast<MutableList<Throwable>?>()\n        if (suppressed == null) {\n            this.asDynamic()._suppressed = mutableListOf(exception)\n        } else {\n            suppressed.add(exception)\n        }\n    }\n}\n\n/**\n * Returns a list of all exceptions that were suppressed in order to deliver this exception.\n */\n@SinceKotlin(\"1.4\")\npublic actual val Throwable.suppressedExceptions: List<Throwable>\n    get() {\n        return this.asDynamic()._suppressed?.unsafeCast<List<Throwable>>() ?: emptyList()\n    }\n\n\nprivate class ExceptionTraceBuilder {\n    private val target = StringBuilder()\n    private val visited = arrayOf<Throwable>()\n    private var topStack: String = \"\"\n    private var topStackStart: Int = 0\n\n    fun buildFor(exception: Throwable): String {\n        exception.dumpFullTrace(\"\", \"\")\n        return target.toString()\n    }\n\n    private fun hasSeen(exception: Throwable): Boolean = visited.any { it === exception }\n\n    private fun Throwable.dumpFullTrace(indent: String, qualifier: String) {\n        this.dumpSelfTrace(indent, qualifier) || return\n\n        var cause = this.cause\n        while (cause != null) {\n            cause.dumpSelfTrace(indent, \"Caused by: \") || return\n            cause = cause.cause\n        }\n    }\n\n    private fun Throwable.dumpSelfTrace(indent: String, qualifier: String): Boolean {\n        target.append(indent).append(qualifier)\n        val shortInfo = this.toString()\n        if (hasSeen(this)) {\n            target.append(\"[CIRCULAR REFERENCE, SEE ABOVE: \").append(shortInfo).append(\"]\\n\")\n            return false\n        }\n        visited.asDynamic().push(this)\n\n        var stack = this.asDynamic().stack as String?\n        if (stack != null) {\n            val stackStart = stack.indexOf(shortInfo).let { if (it < 0) 0 else it + shortInfo.length }\n            if (stackStart == 0) target.append(shortInfo).append(\"\\n\")\n            if (topStack.isEmpty()) {\n                topStack = stack\n                topStackStart = stackStart\n            } else {\n                stack = dropCommonFrames(stack, stackStart)\n            }\n            if (indent.isNotEmpty()) {\n                // indent stack, but avoid indenting exception message lines\n                val messageLines = if (stackStart == 0) 0 else 1 + shortInfo.count { c -> c == '\\n' }\n                stack.lineSequence().forEachIndexed { index: Int, line: String ->\n                    if (index >= messageLines) target.append(indent)\n                    target.append(line).append(\"\\n\")\n                }\n            } else {\n                target.append(stack).append(\"\\n\")\n            }\n        } else {\n            target.append(shortInfo).append(\"\\n\")\n        }\n\n        val suppressed = suppressedExceptions\n        if (suppressed.isNotEmpty()) {\n            val suppressedIndent = indent + \"    \"\n            for (s in suppressed) {\n                s.dumpFullTrace(suppressedIndent, \"Suppressed: \")\n            }\n        }\n        return true\n    }\n\n    private fun dropCommonFrames(stack: String, stackStart: Int): String {\n        var commonFrames: Int = 0\n        var lastBreak: Int = 0\n        var preLastBreak: Int = 0\n        for (pos in 0 until minOf(topStack.length - topStackStart, stack.length - stackStart)) {\n            val c = stack[stack.lastIndex - pos]\n            if (c != topStack[topStack.lastIndex - pos]) break\n            if (c == '\\n') {\n                commonFrames += 1\n                preLastBreak = lastBreak\n                lastBreak = pos\n            }\n        }\n        if (commonFrames <= 1) return stack\n        while (preLastBreak > 0 && stack[stack.lastIndex - (preLastBreak - 1)] == ' ')\n            preLastBreak -= 1\n\n        // leave 1 common frame to ease matching with the top exception stack\n        return stack.dropLast(preLastBreak) + \"... and ${commonFrames - 1} more common stack frames skipped\"\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MathKt\")\n\n\npackage kotlin.math\n\n\n\n// constants, can't use them from nativeMath as they are not constants there\n\n/** Ratio of the circumference of a circle to its diameter, approximately 3.14159. */\n@SinceKotlin(\"1.2\")\npublic const val PI: Double = 3.141592653589793\n/** Base of the natural logarithms, approximately 2.71828. */\n@SinceKotlin(\"1.2\")\npublic const val E: Double = 2.718281828459045\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sin(x: Double): Double\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun cos(x: Double): Double\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun tan(x: Double): Double\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun asin(x: Double): Double\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun acos(x: Double): Double\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atan(x: Double): Double\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atan2(y: Double, x: Double): Double\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sinh(x: Double): Double\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun cosh(x: Double): Double\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun tanh(x: Double): Double\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun asinh(x: Double): Double\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun acosh(x: Double): Double\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atanh(x: Double): Double\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\npublic expect fun hypot(x: Double, y: Double): Double\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sqrt(x: Double): Double\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun exp(x: Double): Double\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun expm1(x: Double): Double\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log(x: Double, base: Double): Double\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ln(x: Double): Double\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log10(x: Double): Double\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log2(x: Double): Double\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ln1p(x: Double): Double\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ceil(x: Double): Double\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun floor(x: Double): Double\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun truncate(x: Double): Double\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun round(x: Double): Double\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\npublic expect fun abs(x: Double): Double\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sign(x: Double): Double\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun min(a: Double, b: Double): Double\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun max(a: Double, b: Double): Double\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.pow(x: Double): Double\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.pow(n: Int): Double\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\npublic expect val Double.absoluteValue: Double\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect val Double.sign: Double\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.withSign(sign: Double): Double\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.withSign(sign: Int): Double\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic expect val Double.ulp: Double\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.nextUp(): Double\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.nextDown(): Double\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.nextTowards(to: Double): Double\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.roundToInt(): Int\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.roundToLong(): Long\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sin(x: Float): Float\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun cos(x: Float): Float\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun tan(x: Float): Float\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun asin(x: Float): Float\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun acos(x: Float): Float\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atan(x: Float): Float\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atan2(y: Float, x: Float): Float\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sinh(x: Float): Float\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun cosh(x: Float): Float\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun tanh(x: Float): Float\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun asinh(x: Float): Float\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun acosh(x: Float): Float\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atanh(x: Float): Float\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\npublic expect fun hypot(x: Float, y: Float): Float\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sqrt(x: Float): Float\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun exp(x: Float): Float\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun expm1(x: Float): Float\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log(x: Float, base: Float): Float\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ln(x: Float): Float\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log10(x: Float): Float\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log2(x: Float): Float\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ln1p(x: Float): Float\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ceil(x: Float): Float\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun floor(x: Float): Float\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun truncate(x: Float): Float\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun round(x: Float): Float\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\npublic expect fun abs(x: Float): Float\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sign(x: Float): Float\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun min(a: Float, b: Float): Float\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun max(a: Float, b: Float): Float\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.pow(x: Float): Float\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.pow(n: Int): Float\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\npublic expect val Float.absoluteValue: Float\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect val Float.sign: Float\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.withSign(sign: Float): Float\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.withSign(sign: Int): Float\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.roundToInt(): Int\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.roundToLong(): Long\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n@SinceKotlin(\"1.2\")\npublic expect fun abs(n: Int): Int\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun min(a: Int, b: Int): Int\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun max(a: Int, b: Int): Int\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\npublic expect val Int.absoluteValue: Int\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic expect val Int.sign: Int\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic expect fun abs(n: Long): Long\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun min(a: Long, b: Long): Long\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun max(a: Long, b: Long): Long\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\npublic expect val Long.absoluteValue: Long\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic expect val Long.sign: Int\n\n\n// endregion\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines.js.internal\n\nimport kotlin.coroutines.Continuation\nimport kotlin.coroutines.EmptyCoroutineContext\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal val EmptyContinuation = Continuation<Any?>(EmptyCoroutineContext) { result ->\n    result.getOrThrow()\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/** Returns the negative [size] if [throwOnMalformed] is false, throws [CharacterCodingException] otherwise. */\n@OptIn(ExperimentalStdlibApi::class)\nprivate fun malformed(size: Int, index: Int, throwOnMalformed: Boolean): Int {\n    if (throwOnMalformed) throw CharacterCodingException(\"Malformed sequence starting at ${index - 1}\")\n    return -size\n}\n\n/**\n * Returns code point corresponding to UTF-16 surrogate pair,\n * where the first of the pair is the [high] and the second is in the [string] at the [index].\n * Returns zero if the pair is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the pair is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFromSurrogate(string: String, high: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (high !in 0xD800..0xDBFF || index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    val low = string[index].toInt()\n    if (low !in 0xDC00..0xDFFF) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    return 0x10000 + ((high and 0x3FF) shl 10) or (low and 0x3FF)\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of two bytes,\n * where the first byte of the sequence is the [byte1] and the second byte is in the [bytes] array at the [index].\n * Returns zero if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of two bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom2(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (byte1 and 0x1E == 0 || index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    val byte2 = bytes[index].toInt()\n    if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    return (byte1 shl 6) xor byte2 xor 0xF80\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of three bytes,\n * where the first byte of the sequence is the [byte1] and the others are in the [bytes] array starting from the [index].\n * Returns a non-positive value indicating number of bytes from [bytes] included in malformed sequence\n * if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of three bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom3(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    val byte2 = bytes[index].toInt()\n    if (byte1 and 0xF == 0) {\n        if (byte2 and 0xE0 != 0xA0) {\n            // Non-shortest form\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF == 0xD) {\n        if (byte2 and 0xE0 != 0x80) {\n            // Surrogate code point\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    if (index + 1 == endIndex) {\n        return malformed(1, index, throwOnMalformed)\n    }\n    val byte3 = bytes[index + 1].toInt()\n    if (byte3 and 0xC0 != 0x80) {\n        return malformed(1, index, throwOnMalformed)\n    }\n\n    return (byte1 shl 12) xor (byte2 shl 6) xor byte3 xor -0x1E080\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of four bytes,\n * where the first byte of the sequence is the [byte1] and the others are in the [bytes] array starting from the [index].\n * Returns a non-positive value indicating number of bytes from [bytes] included in malformed sequence\n * if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of four bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom4(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (index >= endIndex) {\n        malformed(0, index, throwOnMalformed)\n    }\n\n    val byte2 = bytes[index].toInt()\n    if (byte1 and 0xF == 0x0) {\n        if (byte2 and 0xF0 <= 0x80) {\n            // Non-shortest form\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF == 0x4) {\n        if (byte2 and 0xF0 != 0x80) {\n            // Out of Unicode code points domain (larger than U+10FFFF)\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF > 0x4) {\n        return malformed(0, index, throwOnMalformed)\n    } else if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    if (index + 1 == endIndex) {\n        return malformed(1, index, throwOnMalformed)\n    }\n    val byte3 = bytes[index + 1].toInt()\n    if (byte3 and 0xC0 != 0x80) {\n        return malformed(1, index, throwOnMalformed)\n    }\n\n    if (index + 2 == endIndex) {\n        return malformed(2, index, throwOnMalformed)\n    }\n    val byte4 = bytes[index + 2].toInt()\n    if (byte4 and 0xC0 != 0x80) {\n        return malformed(2, index, throwOnMalformed)\n    }\n    return (byte1 shl 18) xor (byte2 shl 12) xor (byte3 shl 6) xor byte4 xor 0x381F80\n}\n\n/**\n * Maximum number of bytes needed to encode a single char.\n *\n * Code points in `0..0x7F` are encoded in a single byte.\n * Code points in `0x80..0x7FF` are encoded in two bytes.\n * Code points in `0x800..0xD7FF` or in `0xE000..0xFFFF` are encoded in three bytes.\n * Surrogate code points in `0xD800..0xDFFF` are not Unicode scalar values, therefore aren't encoded.\n * Code points in `0x10000..0x10FFFF` are represented by a pair of surrogate `Char`s and are encoded in four bytes.\n */\nprivate const val MAX_BYTES_PER_CHAR = 3\n\n/**\n * The byte sequence a malformed UTF-16 char sequence is replaced by.\n */\nprivate val REPLACEMENT_BYTE_SEQUENCE: ByteArray = byteArrayOf(0xEF.toByte(), 0xBF.toByte(), 0xBD.toByte())\n\n/**\n * Encodes the [string] using UTF-8 and returns the resulting [ByteArray].\n *\n * @param string the string to encode.\n * @param startIndex the start offset (inclusive) of the substring to encode.\n * @param endIndex the end offset (exclusive) of the substring to encode.\n * @param throwOnMalformed whether to throw on malformed char sequence or replace by the [REPLACEMENT_BYTE_SEQUENCE].\n *\n * @throws CharacterCodingException if the char sequence is malformed and [throwOnMalformed] is true.\n */\ninternal fun encodeUtf8(string: String, startIndex: Int, endIndex: Int, throwOnMalformed: Boolean): ByteArray {\n    require(startIndex >= 0 && endIndex <= string.length && startIndex <= endIndex)\n\n    val bytes = ByteArray((endIndex - startIndex) * MAX_BYTES_PER_CHAR)\n    var byteIndex = 0\n    var charIndex = startIndex\n\n    while (charIndex < endIndex) {\n        val code = string[charIndex++].toInt()\n        when {\n            code < 0x80 ->\n                bytes[byteIndex++] = code.toByte()\n            code < 0x800 -> {\n                bytes[byteIndex++] = ((code shr 6) or 0xC0).toByte()\n                bytes[byteIndex++] = ((code and 0x3F) or 0x80).toByte()\n            }\n            code < 0xD800 || code >= 0xE000 -> {\n                bytes[byteIndex++] = ((code shr 12) or 0xE0).toByte()\n                bytes[byteIndex++] = (((code shr 6) and 0x3F) or 0x80).toByte()\n                bytes[byteIndex++] = ((code and 0x3F) or 0x80).toByte()\n            }\n            else -> { // Surrogate char value\n                val codePoint = codePointFromSurrogate(string, code, charIndex, endIndex, throwOnMalformed)\n                if (codePoint <= 0) {\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[0]\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[1]\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[2]\n                } else {\n                    bytes[byteIndex++] = ((codePoint shr 18) or 0xF0).toByte()\n                    bytes[byteIndex++] = (((codePoint shr 12) and 0x3F) or 0x80).toByte()\n                    bytes[byteIndex++] = (((codePoint shr 6) and 0x3F) or 0x80).toByte()\n                    bytes[byteIndex++] = ((codePoint and 0x3F) or 0x80).toByte()\n                    charIndex++\n                }\n            }\n        }\n    }\n\n    return if (bytes.size == byteIndex) bytes else bytes.copyOf(byteIndex)\n}\n\n/**\n * The character a malformed UTF-8 byte sequence is replaced by.\n */\nprivate const val REPLACEMENT_CHAR = '\\uFFFD'\n\n/**\n * Decodes the UTF-8 [bytes] array and returns the resulting [String].\n *\n * @param bytes the byte array to decode.\n * @param startIndex the start offset (inclusive) of the array to be decoded.\n * @param endIndex the end offset (exclusive) of the array to be encoded.\n * @param throwOnMalformed whether to throw on malformed byte sequence or replace by the [REPLACEMENT_CHAR].\n *\n * @throws CharacterCodingException if the array is malformed UTF-8 byte sequence and [throwOnMalformed] is true.\n */\ninternal fun decodeUtf8(bytes: ByteArray, startIndex: Int, endIndex: Int, throwOnMalformed: Boolean): String {\n    require(startIndex >= 0 && endIndex <= bytes.size && startIndex <= endIndex)\n\n    var byteIndex = startIndex\n    val stringBuilder = StringBuilder()\n\n    while (byteIndex < endIndex) {\n        val byte = bytes[byteIndex++].toInt()\n        when {\n            byte >= 0 ->\n                stringBuilder.append(byte.toChar())\n            byte shr 5 == -2 -> {\n                val code = codePointFrom2(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    stringBuilder.append(code.toChar())\n                    byteIndex += 1\n                }\n            }\n            byte shr 4 == -2 -> {\n                val code = codePointFrom3(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    stringBuilder.append(code.toChar())\n                    byteIndex += 2\n                }\n            }\n            byte shr 3 == -2 -> {\n                val code = codePointFrom4(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    val high = (code - 0x10000) shr 10 or 0xD800\n                    val low = (code and 0x3FF) or 0xDC00\n                    stringBuilder.append(high.toChar())\n                    stringBuilder.append(low.toChar())\n                    byteIndex += 3\n                }\n            }\n            else -> {\n                malformed(0, byteIndex, throwOnMalformed)\n                stringBuilder.append(REPLACEMENT_CHAR)\n            }\n        }\n    }\n\n    return stringBuilder.toString()\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\nimport kotlin.coroutines.*\nimport kotlin.coroutines.intrinsics.*\n\n/**\n * Defines deep recursive function that keeps its stack on the heap,\n * which allows very deep recursive computations that do not use the actual call stack.\n * To initiate a call to this deep recursive function use its [invoke] function.\n * As a rule of thumb, it should be used if recursion goes deeper than a thousand calls.\n *\n * The [DeepRecursiveFunction] takes one parameter of type [T] and returns a result of type [R].\n * The [block] of code defines the body of a recursive function. In this block\n * [callRecursive][DeepRecursiveScope.callRecursive] function can be used to make a recursive call\n * to the declared function. Other instances of [DeepRecursiveFunction] can be called\n * in this scope with `callRecursive` extension, too.\n *\n * For example, take a look at the following recursive tree class and a deeply\n * recursive instance of this tree with 100K nodes:\n *\n * ```\n * class Tree(val left: Tree? = null, val right: Tree? = null)\n * val deepTree = generateSequence(Tree()) { Tree(it) }.take(100_000).last()\n * ```\n *\n * A regular recursive function can be defined to compute a depth of a tree:\n *\n * ```\n * fun depth(t: Tree?): Int =\n *     if (t == null) 0 else max(depth(t.left), depth(t.right)) + 1\n * println(depth(deepTree)) // StackOverflowError\n * ```\n *\n * If this `depth` function is called for a `deepTree` it produces [StackOverflowError] because of deep recursion.\n * However, the `depth` function can be rewritten using `DeepRecursiveFunction` in the following way, and then\n * it successfully computes [`depth(deepTree)`][DeepRecursiveFunction.invoke] expression:\n *\n * ```\n * val depth = DeepRecursiveFunction<Tree?, Int> { t ->\n *     if (t == null) 0 else max(callRecursive(t.left), callRecursive(t.right)) + 1\n * }\n * println(depth(deepTree)) // Ok\n * ```\n *\n * Deep recursive functions can also mutually call each other using a heap for the stack via\n * [callRecursive][DeepRecursiveScope.callRecursive] extension. For example, the\n * following pair of mutually recursive functions computes the number of tree nodes at even depth in the tree.\n *\n * ```\n * val mutualRecursion = object {\n *     val even: DeepRecursiveFunction<Tree?, Int> = DeepRecursiveFunction { t ->\n *         if (t == null) 0 else odd.callRecursive(t.left) + odd.callRecursive(t.right) + 1\n *     }\n *     val odd: DeepRecursiveFunction<Tree?, Int> = DeepRecursiveFunction { t ->\n *         if (t == null) 0 else even.callRecursive(t.left) + even.callRecursive(t.right)\n *     }\n * }\n * ```\n *\n * @param [T] the function parameter type.\n * @param [R] the function result type.\n * @param block the function body.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic class DeepRecursiveFunction<T, R>(\n    internal val block: suspend DeepRecursiveScope<T, R>.(T) -> R\n)\n\n/**\n * Initiates a call to this deep recursive function, forming a root of the call tree.\n *\n * This operator should not be used from inside of [DeepRecursiveScope] as it uses the call stack slot for\n * initial recursive invocation. From inside of [DeepRecursiveScope] use\n * [callRecursive][DeepRecursiveScope.callRecursive].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic operator fun <T, R> DeepRecursiveFunction<T, R>.invoke(value: T): R =\n    DeepRecursiveScopeImpl<T, R>(block, value).runCallLoop()\n\n/**\n * A scope class for [DeepRecursiveFunction] function declaration that defines [callRecursive] methods to\n * recursively call this function or another [DeepRecursiveFunction] putting the call activation frame on the heap.\n *\n * @param [T] function parameter type.\n * @param [R] function result type.\n */\n@RestrictsSuspension\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic sealed class DeepRecursiveScope<T, R> {\n    /**\n     * Makes recursive call to this [DeepRecursiveFunction] function putting the call activation frame on the heap,\n     * as opposed to the actual call stack that is used by a regular recursive call.\n     */\n    public abstract suspend fun callRecursive(value: T): R\n\n    /**\n     * Makes call to the specified [DeepRecursiveFunction] function putting the call activation frame on the heap,\n     * as opposed to the actual call stack that is used by a regular call.\n     */\n    public abstract suspend fun <U, S> DeepRecursiveFunction<U, S>.callRecursive(value: U): S\n\n    @Deprecated(\n        level = DeprecationLevel.ERROR,\n        message =\n        \"'invoke' should not be called from DeepRecursiveScope. \" +\n                \"Use 'callRecursive' to do recursion in the heap instead of the call stack.\",\n        replaceWith = ReplaceWith(\"this.callRecursive(value)\")\n    )\n    @Suppress(\"UNUSED_PARAMETER\")\n    public operator fun DeepRecursiveFunction<*, *>.invoke(value: Any?): Nothing =\n        throw UnsupportedOperationException(\"Should not be called from DeepRecursiveScope\")\n}\n\n// ================== Implementation ==================\n\n@ExperimentalStdlibApi\nprivate typealias DeepRecursiveFunctionBlock = suspend DeepRecursiveScope<*, *>.(Any?) -> Any?\n\nprivate val UNDEFINED_RESULT = Result.success(COROUTINE_SUSPENDED)\n\n@Suppress(\"UNCHECKED_CAST\")\n@ExperimentalStdlibApi\nprivate class DeepRecursiveScopeImpl<T, R>(\n    block: suspend DeepRecursiveScope<T, R>.(T) -> R,\n    value: T\n) : DeepRecursiveScope<T, R>(), Continuation<R> {\n    // Active function block\n    private var function: DeepRecursiveFunctionBlock = block as DeepRecursiveFunctionBlock\n\n    // Value to call function with\n    private var value: Any? = value\n\n    // Continuation of the current call\n    private var cont: Continuation<Any?>? = this as Continuation<Any?>\n\n    // Completion result (completion of the whole call stack)\n    private var result: Result<Any?> = UNDEFINED_RESULT\n\n    override val context: CoroutineContext\n        get() = EmptyCoroutineContext\n\n    override fun resumeWith(result: Result<R>) {\n        this.cont = null\n        this.result = result\n    }\n\n    override suspend fun callRecursive(value: T): R = suspendCoroutineUninterceptedOrReturn { cont ->\n        // calling the same function that is currently active\n        this.cont = cont as Continuation<Any?>\n        this.value = value\n        COROUTINE_SUSPENDED\n    }\n\n    override suspend fun <U, S> DeepRecursiveFunction<U, S>.callRecursive(value: U): S = suspendCoroutineUninterceptedOrReturn { cont ->\n        // calling another recursive function\n        val function = block as DeepRecursiveFunctionBlock\n        with(this@DeepRecursiveScopeImpl) {\n            val currentFunction = this.function\n            if (function !== currentFunction) {\n                // calling a different function -- create a trampoline to restore function ref\n                this.function = function\n                this.cont = crossFunctionCompletion(currentFunction, cont as Continuation<Any?>)\n            } else {\n                // calling the same function -- direct\n                this.cont = cont as Continuation<Any?>\n            }\n            this.value = value\n        }\n        COROUTINE_SUSPENDED\n    }\n\n    private fun crossFunctionCompletion(\n        currentFunction: DeepRecursiveFunctionBlock,\n        cont: Continuation<Any?>\n    ): Continuation<Any?> = Continuation(EmptyCoroutineContext) {\n        this.function = currentFunction\n        // When going back from a trampoline we cannot just call cont.resume (stack usage!)\n        // We delegate the cont.resumeWith(it) call to runCallLoop\n        this.cont = cont\n        this.result = it\n    }\n\n    @Suppress(\"UNCHECKED_CAST\")\n    fun runCallLoop(): R {\n        while (true) {\n            // Note: cont is set to null in DeepRecursiveScopeImpl.resumeWith when the whole computation completes\n            val result = this.result\n            val cont = this.cont\n                ?: return (result as Result<R>).getOrThrow() // done -- final result\n            // The order of comparison is important here for that case of rogue class with broken equals\n            if (UNDEFINED_RESULT == result) {\n                // call \"function\" with \"value\" using \"cont\" as completion\n                val r = try {\n                    // This is block.startCoroutine(this, value, cont)\n                    function.startCoroutineUninterceptedOrReturn(this, value, cont)\n                } catch (e: Throwable) {\n                    cont.resumeWithException(e)\n                    continue\n                }\n                // If the function returns without suspension -- calls its continuation immediately\n                if (r !== COROUTINE_SUSPENDED)\n                    cont.resume(r as R)\n            } else {\n                // we returned from a crossFunctionCompletion trampoline -- call resume here\n                this.result = UNDEFINED_RESULT // reset result back\n                cont.resumeWith(result)\n            }\n        }\n    }\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n",null,null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n@file:Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\n\npackage kotlin.text\n\nimport kotlin.contracts.*\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\nexpect class StringBuilder : Appendable, CharSequence {\n    /** Constructs an empty string builder. */\n    constructor()\n\n    /** Constructs an empty string builder with the specified initial [capacity]. */\n    constructor(capacity: Int)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    constructor(content: CharSequence)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] string. */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    constructor(content: String)\n\n    override val length: Int\n\n    override operator fun get(index: Int): Char\n\n    override fun subSequence(startIndex: Int, endIndex: Int): CharSequence\n\n    override fun append(value: Char): StringBuilder\n    override fun append(value: CharSequence?): StringBuilder\n    override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    fun reverse(): StringBuilder\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    fun append(value: Any?): StringBuilder\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    fun append(value: Boolean): StringBuilder\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun append(value: CharArray): StringBuilder\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are appended.\n     */\n    @SinceKotlin(\"1.3\")\n    fun append(value: String?): StringBuilder\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    @Deprecated(\"Obtaining StringBuilder capacity is not supported in JS and common code.\", level = DeprecationLevel.ERROR)\n    fun capacity(): Int\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun ensureCapacity(minimumCapacity: Int)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun indexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun indexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun lastIndexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun lastIndexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Boolean): StringBuilder\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Char): StringBuilder\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: CharArray): StringBuilder\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: CharSequence?): StringBuilder\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Any?): StringBuilder\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: String?): StringBuilder\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun setLength(newLength: Int)\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun substring(startIndex: Int): String\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun substring(startIndex: Int, endIndex: Int): String\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun trimToSize()\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\npublic expect fun StringBuilder.clear(): StringBuilder\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect operator fun StringBuilder.set(index: Int, value: Char)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.deleteAt(index: Int): StringBuilder\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder\n\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\n@Deprecated(\"Use append(value: Any?) instead\", ReplaceWith(\"append(value = obj)\"), DeprecationLevel.WARNING)\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.append(obj: Any?): StringBuilder = this.append(obj)\n\n/**\n * Builds new string by populating newly created [StringBuilder] using provided [builderAction]\n * and then converting it to [String].\n */\n@kotlin.internal.InlineOnly\npublic inline fun buildString(builderAction: StringBuilder.() -> Unit): String {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return StringBuilder().apply(builderAction).toString()\n}\n\n/**\n * Builds new string by populating newly created [StringBuilder] initialized with the given [capacity]\n * using provided [builderAction] and then converting it to [String].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun buildString(capacity: Int, builderAction: StringBuilder.() -> Unit): String {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return StringBuilder(capacity).apply(builderAction).toString()\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: String?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: Any?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/** Appends a line feed character (`\\n`) to this StringBuilder. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(): StringBuilder = append('\\n')\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: CharSequence?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: String?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Any?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: CharArray): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Char): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Boolean): StringBuilder = append(value).appendLine()\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * Function corresponding to JavaScript's `typeof` operator\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"UNUSED_PARAMETER\")\npublic inline fun jsTypeOf(a: Any?): String = js(\"typeof a\")\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n",null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\nimport kotlin.internal.InlineOnly\n\n\n/**\n * Returns a hash code value for the object or zero if the object is `null`.\n *\n * @see Any.hashCode\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun Any?.hashCode(): Int = this?.hashCode() ?: 0\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.dom\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external abstract class HTMLAllCollection {\n    open val length: Int\n    fun item(nameOrIndex: String = definedExternally): UnionElementOrHTMLCollection?\n    fun namedItem(name: String): UnionElementOrHTMLCollection?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLAllCollection.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLAllCollection.get(name: String): UnionElementOrHTMLCollection? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLFormControlsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLFormControlsCollection) to Kotlin\n */\npublic external abstract class HTMLFormControlsCollection : HTMLCollection\n\n/**\n * Exposes the JavaScript [RadioNodeList](https://developer.mozilla.org/en/docs/Web/API/RadioNodeList) to Kotlin\n */\npublic external abstract class RadioNodeList : NodeList, UnionElementOrRadioNodeList {\n    open var value: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionsCollection) to Kotlin\n */\npublic external abstract class HTMLOptionsCollection : HTMLCollection {\n    override var length: Int\n    open var selectedIndex: Int\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally)\n    fun remove(index: Int)\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLOptionsCollection.set(index: Int, option: HTMLOptionElement?) { asDynamic()[index] = option }\n\n/**\n * Exposes the JavaScript [HTMLElement](https://developer.mozilla.org/en/docs/Web/API/HTMLElement) to Kotlin\n */\npublic external abstract class HTMLElement : Element, GlobalEventHandlers, DocumentAndElementEventHandlers, ElementContentEditable, ElementCSSInlineStyle {\n    open var title: String\n    open var lang: String\n    open var translate: Boolean\n    open var dir: String\n    open val dataset: DOMStringMap\n    open var hidden: Boolean\n    open var tabIndex: Int\n    open var accessKey: String\n    open val accessKeyLabel: String\n    open var draggable: Boolean\n    open val dropzone: DOMTokenList\n    open var contextMenu: HTMLMenuElement?\n    open var spellcheck: Boolean\n    open var innerText: String\n    open val offsetParent: Element?\n    open val offsetTop: Int\n    open val offsetLeft: Int\n    open val offsetWidth: Int\n    open val offsetHeight: Int\n    fun click()\n    fun focus()\n    fun blur()\n    fun forceSpellCheck()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLUnknownElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUnknownElement) to Kotlin\n */\npublic external abstract class HTMLUnknownElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMStringMap](https://developer.mozilla.org/en/docs/Web/API/DOMStringMap) to Kotlin\n */\npublic external abstract class DOMStringMap\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMStringMap.get(name: String): String? = asDynamic()[name]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMStringMap.set(name: String, value: String) { asDynamic()[name] = value }\n\n/**\n * Exposes the JavaScript [HTMLHtmlElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHtmlElement) to Kotlin\n */\npublic external abstract class HTMLHtmlElement : HTMLElement {\n    open var version: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadElement) to Kotlin\n */\npublic external abstract class HTMLHeadElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTitleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTitleElement) to Kotlin\n */\npublic external abstract class HTMLTitleElement : HTMLElement {\n    open var text: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBaseElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBaseElement) to Kotlin\n */\npublic external abstract class HTMLBaseElement : HTMLElement {\n    open var href: String\n    open var target: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLinkElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLinkElement) to Kotlin\n */\npublic external abstract class HTMLLinkElement : HTMLElement, LinkStyle {\n    open var href: String\n    open var crossOrigin: String?\n    open var rel: String\n    open var `as`: RequestDestination\n    open val relList: DOMTokenList\n    open var media: String\n    open var nonce: String\n    open var hreflang: String\n    open var type: String\n    open val sizes: DOMTokenList\n    open var referrerPolicy: String\n    open var charset: String\n    open var rev: String\n    open var target: String\n    open var scope: String\n    open var workerType: WorkerType\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMetaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMetaElement) to Kotlin\n */\npublic external abstract class HTMLMetaElement : HTMLElement {\n    open var name: String\n    open var httpEquiv: String\n    open var content: String\n    open var scheme: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLStyleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLStyleElement) to Kotlin\n */\npublic external abstract class HTMLStyleElement : HTMLElement, LinkStyle {\n    open var media: String\n    open var nonce: String\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBodyElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBodyElement) to Kotlin\n */\npublic external abstract class HTMLBodyElement : HTMLElement, WindowEventHandlers {\n    open var text: String\n    open var link: String\n    open var vLink: String\n    open var aLink: String\n    open var bgColor: String\n    open var background: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadingElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadingElement) to Kotlin\n */\npublic external abstract class HTMLHeadingElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLParagraphElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParagraphElement) to Kotlin\n */\npublic external abstract class HTMLParagraphElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHRElement) to Kotlin\n */\npublic external abstract class HTMLHRElement : HTMLElement {\n    open var align: String\n    open var color: String\n    open var noShade: Boolean\n    open var size: String\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLPreElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPreElement) to Kotlin\n */\npublic external abstract class HTMLPreElement : HTMLElement {\n    open var width: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLQuoteElement](https://developer.mozilla.org/en/docs/Web/API/HTMLQuoteElement) to Kotlin\n */\npublic external abstract class HTMLQuoteElement : HTMLElement {\n    open var cite: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOListElement) to Kotlin\n */\npublic external abstract class HTMLOListElement : HTMLElement {\n    open var reversed: Boolean\n    open var start: Int\n    open var type: String\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLUListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUListElement) to Kotlin\n */\npublic external abstract class HTMLUListElement : HTMLElement {\n    open var compact: Boolean\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLIElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLIElement) to Kotlin\n */\npublic external abstract class HTMLLIElement : HTMLElement {\n    open var value: Int\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDListElement) to Kotlin\n */\npublic external abstract class HTMLDListElement : HTMLElement {\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDivElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDivElement) to Kotlin\n */\npublic external abstract class HTMLDivElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAnchorElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAnchorElement) to Kotlin\n */\npublic external abstract class HTMLAnchorElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var hreflang: String\n    open var type: String\n    open var text: String\n    open var referrerPolicy: String\n    open var coords: String\n    open var charset: String\n    open var name: String\n    open var rev: String\n    open var shape: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDataElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataElement) to Kotlin\n */\npublic external abstract class HTMLDataElement : HTMLElement {\n    open var value: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTimeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTimeElement) to Kotlin\n */\npublic external abstract class HTMLTimeElement : HTMLElement {\n    open var dateTime: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSpanElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSpanElement) to Kotlin\n */\npublic external abstract class HTMLSpanElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBRElement) to Kotlin\n */\npublic external abstract class HTMLBRElement : HTMLElement {\n    open var clear: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHyperlinkElementUtils](https://developer.mozilla.org/en/docs/Web/API/HTMLHyperlinkElementUtils) to Kotlin\n */\npublic external interface HTMLHyperlinkElementUtils {\n    var href: String\n    val origin: String\n    var protocol: String\n    var username: String\n    var password: String\n    var host: String\n    var hostname: String\n    var port: String\n    var pathname: String\n    var search: String\n    var hash: String\n}\n\n/**\n * Exposes the JavaScript [HTMLModElement](https://developer.mozilla.org/en/docs/Web/API/HTMLModElement) to Kotlin\n */\npublic external abstract class HTMLModElement : HTMLElement {\n    open var cite: String\n    open var dateTime: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLPictureElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPictureElement) to Kotlin\n */\npublic external abstract class HTMLPictureElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSourceElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSourceElement) to Kotlin\n */\npublic external abstract class HTMLSourceElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var srcset: String\n    open var sizes: String\n    open var media: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLImageElement](https://developer.mozilla.org/en/docs/Web/API/HTMLImageElement) to Kotlin\n */\npublic external abstract class HTMLImageElement : HTMLElement, HTMLOrSVGImageElement, TexImageSource {\n    open var alt: String\n    open var src: String\n    open var srcset: String\n    open var sizes: String\n    open var crossOrigin: String?\n    open var useMap: String\n    open var isMap: Boolean\n    open var width: Int\n    open var height: Int\n    open val naturalWidth: Int\n    open val naturalHeight: Int\n    open val complete: Boolean\n    open val currentSrc: String\n    open var referrerPolicy: String\n    open var name: String\n    open var lowsrc: String\n    open var align: String\n    open var hspace: Int\n    open var vspace: Int\n    open var longDesc: String\n    open var border: String\n    open val x: Int\n    open val y: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLIFrameElement](https://developer.mozilla.org/en/docs/Web/API/HTMLIFrameElement) to Kotlin\n */\npublic external abstract class HTMLIFrameElement : HTMLElement {\n    open var src: String\n    open var srcdoc: String\n    open var name: String\n    open val sandbox: DOMTokenList\n    open var allowFullscreen: Boolean\n    open var allowUserMedia: Boolean\n    open var width: String\n    open var height: String\n    open var referrerPolicy: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var align: String\n    open var scrolling: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var marginHeight: String\n    open var marginWidth: String\n    fun getSVGDocument(): Document?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLEmbedElement](https://developer.mozilla.org/en/docs/Web/API/HTMLEmbedElement) to Kotlin\n */\npublic external abstract class HTMLEmbedElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var width: String\n    open var height: String\n    open var align: String\n    open var name: String\n    fun getSVGDocument(): Document?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLObjectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLObjectElement) to Kotlin\n */\npublic external abstract class HTMLObjectElement : HTMLElement {\n    open var data: String\n    open var type: String\n    open var typeMustMatch: Boolean\n    open var name: String\n    open var useMap: String\n    open val form: HTMLFormElement?\n    open var width: String\n    open var height: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open var align: String\n    open var archive: String\n    open var code: String\n    open var declare: Boolean\n    open var hspace: Int\n    open var standby: String\n    open var vspace: Int\n    open var codeBase: String\n    open var codeType: String\n    open var border: String\n    fun getSVGDocument(): Document?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLParamElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParamElement) to Kotlin\n */\npublic external abstract class HTMLParamElement : HTMLElement {\n    open var name: String\n    open var value: String\n    open var type: String\n    open var valueType: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLVideoElement](https://developer.mozilla.org/en/docs/Web/API/HTMLVideoElement) to Kotlin\n */\npublic external abstract class HTMLVideoElement : HTMLMediaElement, CanvasImageSource, TexImageSource {\n    open var width: Int\n    open var height: Int\n    open val videoWidth: Int\n    open val videoHeight: Int\n    open var poster: String\n    open var playsInline: Boolean\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAudioElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAudioElement) to Kotlin\n */\npublic external abstract class HTMLAudioElement : HTMLMediaElement {\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTrackElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTrackElement) to Kotlin\n */\npublic external abstract class HTMLTrackElement : HTMLElement {\n    open var kind: String\n    open var src: String\n    open var srclang: String\n    open var label: String\n    open var default: Boolean\n    open val readyState: Short\n    open val track: TextTrack\n\n    companion object {\n        val NONE: Short\n        val LOADING: Short\n        val LOADED: Short\n        val ERROR: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMediaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMediaElement) to Kotlin\n */\npublic external abstract class HTMLMediaElement : HTMLElement {\n    open val error: MediaError?\n    open var src: String\n    open var srcObject: MediaProvider?\n    open val currentSrc: String\n    open var crossOrigin: String?\n    open val networkState: Short\n    open var preload: String\n    open val buffered: TimeRanges\n    open val readyState: Short\n    open val seeking: Boolean\n    open var currentTime: Double\n    open val duration: Double\n    open val paused: Boolean\n    open var defaultPlaybackRate: Double\n    open var playbackRate: Double\n    open val played: TimeRanges\n    open val seekable: TimeRanges\n    open val ended: Boolean\n    open var autoplay: Boolean\n    open var loop: Boolean\n    open var controls: Boolean\n    open var volume: Double\n    open var muted: Boolean\n    open var defaultMuted: Boolean\n    open val audioTracks: AudioTrackList\n    open val videoTracks: VideoTrackList\n    open val textTracks: TextTrackList\n    open val mediaKeys: MediaKeys?\n    open var onencrypted: ((Event) -> dynamic)?\n    open var onwaitingforkey: ((Event) -> dynamic)?\n    fun load()\n    fun canPlayType(type: String): CanPlayTypeResult\n    fun fastSeek(time: Double)\n    fun getStartDate(): dynamic\n    fun play(): Promise<Unit>\n    fun pause()\n    fun addTextTrack(kind: TextTrackKind, label: String = definedExternally, language: String = definedExternally): TextTrack\n    fun setMediaKeys(mediaKeys: MediaKeys?): Promise<Unit>\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [MediaError](https://developer.mozilla.org/en/docs/Web/API/MediaError) to Kotlin\n */\npublic external abstract class MediaError {\n    open val code: Short\n\n    companion object {\n        val MEDIA_ERR_ABORTED: Short\n        val MEDIA_ERR_NETWORK: Short\n        val MEDIA_ERR_DECODE: Short\n        val MEDIA_ERR_SRC_NOT_SUPPORTED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [AudioTrackList](https://developer.mozilla.org/en/docs/Web/API/AudioTrackList) to Kotlin\n */\npublic external abstract class AudioTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): AudioTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun AudioTrackList.get(index: Int): AudioTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [AudioTrack](https://developer.mozilla.org/en/docs/Web/API/AudioTrack) to Kotlin\n */\npublic external abstract class AudioTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var enabled: Boolean\n    open val sourceBuffer: SourceBuffer?\n}\n\n/**\n * Exposes the JavaScript [VideoTrackList](https://developer.mozilla.org/en/docs/Web/API/VideoTrackList) to Kotlin\n */\npublic external abstract class VideoTrackList : EventTarget {\n    open val length: Int\n    open val selectedIndex: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): VideoTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun VideoTrackList.get(index: Int): VideoTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [VideoTrack](https://developer.mozilla.org/en/docs/Web/API/VideoTrack) to Kotlin\n */\npublic external abstract class VideoTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var selected: Boolean\n    open val sourceBuffer: SourceBuffer?\n}\n\npublic external abstract class TextTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): TextTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TextTrackList.get(index: Int): TextTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrack](https://developer.mozilla.org/en/docs/Web/API/TextTrack) to Kotlin\n */\npublic external abstract class TextTrack : EventTarget, UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val kind: TextTrackKind\n    open val label: String\n    open val language: String\n    open val id: String\n    open val inBandMetadataTrackDispatchType: String\n    open var mode: TextTrackMode\n    open val cues: TextTrackCueList?\n    open val activeCues: TextTrackCueList?\n    open var oncuechange: ((Event) -> dynamic)?\n    open val sourceBuffer: SourceBuffer?\n    fun addCue(cue: TextTrackCue)\n    fun removeCue(cue: TextTrackCue)\n}\n\npublic external abstract class TextTrackCueList {\n    open val length: Int\n    fun getCueById(id: String): TextTrackCue?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TextTrackCueList.get(index: Int): TextTrackCue? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrackCue](https://developer.mozilla.org/en/docs/Web/API/TextTrackCue) to Kotlin\n */\npublic external abstract class TextTrackCue : EventTarget {\n    open val track: TextTrack?\n    open var id: String\n    open var startTime: Double\n    open var endTime: Double\n    open var pauseOnExit: Boolean\n    open var onenter: ((Event) -> dynamic)?\n    open var onexit: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [TimeRanges](https://developer.mozilla.org/en/docs/Web/API/TimeRanges) to Kotlin\n */\npublic external abstract class TimeRanges {\n    open val length: Int\n    fun start(index: Int): Double\n    fun end(index: Int): Double\n}\n\n/**\n * Exposes the JavaScript [TrackEvent](https://developer.mozilla.org/en/docs/Web/API/TrackEvent) to Kotlin\n */\npublic external open class TrackEvent(type: String, eventInitDict: TrackEventInit = definedExternally) : Event {\n    open val track: UnionAudioTrackOrTextTrackOrVideoTrack?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface TrackEventInit : EventInit {\n    var track: UnionAudioTrackOrTextTrackOrVideoTrack? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun TrackEventInit(track: UnionAudioTrackOrTextTrackOrVideoTrack? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): TrackEventInit {\n    val o = js(\"({})\")\n    o[\"track\"] = track\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLMapElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMapElement) to Kotlin\n */\npublic external abstract class HTMLMapElement : HTMLElement {\n    open var name: String\n    open val areas: HTMLCollection\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAreaElement) to Kotlin\n */\npublic external abstract class HTMLAreaElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var alt: String\n    open var coords: String\n    open var shape: String\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var referrerPolicy: String\n    open var noHref: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableElement) to Kotlin\n */\npublic external abstract class HTMLTableElement : HTMLElement {\n    open var caption: HTMLTableCaptionElement?\n    open var tHead: HTMLTableSectionElement?\n    open var tFoot: HTMLTableSectionElement?\n    open val tBodies: HTMLCollection\n    open val rows: HTMLCollection\n    open var align: String\n    open var border: String\n    open var frame: String\n    open var rules: String\n    open var summary: String\n    open var width: String\n    open var bgColor: String\n    open var cellPadding: String\n    open var cellSpacing: String\n    fun createCaption(): HTMLTableCaptionElement\n    fun deleteCaption()\n    fun createTHead(): HTMLTableSectionElement\n    fun deleteTHead()\n    fun createTFoot(): HTMLTableSectionElement\n    fun deleteTFoot()\n    fun createTBody(): HTMLTableSectionElement\n    fun insertRow(index: Int = definedExternally): HTMLTableRowElement\n    fun deleteRow(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCaptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCaptionElement) to Kotlin\n */\npublic external abstract class HTMLTableCaptionElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableColElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableColElement) to Kotlin\n */\npublic external abstract class HTMLTableColElement : HTMLElement {\n    open var span: Int\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableSectionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableSectionElement) to Kotlin\n */\npublic external abstract class HTMLTableSectionElement : HTMLElement {\n    open val rows: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    fun insertRow(index: Int = definedExternally): HTMLElement\n    fun deleteRow(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableRowElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableRowElement) to Kotlin\n */\npublic external abstract class HTMLTableRowElement : HTMLElement {\n    open val rowIndex: Int\n    open val sectionRowIndex: Int\n    open val cells: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var bgColor: String\n    fun insertCell(index: Int = definedExternally): HTMLElement\n    fun deleteCell(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCellElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCellElement) to Kotlin\n */\npublic external abstract class HTMLTableCellElement : HTMLElement {\n    open var colSpan: Int\n    open var rowSpan: Int\n    open var headers: String\n    open val cellIndex: Int\n    open var scope: String\n    open var abbr: String\n    open var align: String\n    open var axis: String\n    open var height: String\n    open var width: String\n    open var ch: String\n    open var chOff: String\n    open var noWrap: Boolean\n    open var vAlign: String\n    open var bgColor: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFormElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFormElement) to Kotlin\n */\npublic external abstract class HTMLFormElement : HTMLElement {\n    open var acceptCharset: String\n    open var action: String\n    open var autocomplete: String\n    open var enctype: String\n    open var encoding: String\n    open var method: String\n    open var name: String\n    open var noValidate: Boolean\n    open var target: String\n    open val elements: HTMLFormControlsCollection\n    open val length: Int\n    fun submit()\n    fun reset()\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLFormElement.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLFormElement.get(name: String): UnionElementOrRadioNodeList? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLLabelElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLabelElement) to Kotlin\n */\npublic external abstract class HTMLLabelElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var htmlFor: String\n    open val control: HTMLElement?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLInputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLInputElement) to Kotlin\n */\npublic external abstract class HTMLInputElement : HTMLElement {\n    open var accept: String\n    open var alt: String\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var defaultChecked: Boolean\n    open var checked: Boolean\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open val files: FileList?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var height: Int\n    open var indeterminate: Boolean\n    open var inputMode: String\n    open val list: HTMLElement?\n    open var max: String\n    open var maxLength: Int\n    open var min: String\n    open var minLength: Int\n    open var multiple: Boolean\n    open var name: String\n    open var pattern: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var size: Int\n    open var src: String\n    open var step: String\n    open var type: String\n    open var defaultValue: String\n    open var value: String\n    open var valueAsDate: dynamic\n    open var valueAsNumber: Double\n    open var width: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    open var align: String\n    open var useMap: String\n    fun stepUp(n: Int = definedExternally)\n    fun stepDown(n: Int = definedExternally)\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    fun select()\n    fun setRangeText(replacement: String)\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally)\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLButtonElement](https://developer.mozilla.org/en/docs/Web/API/HTMLButtonElement) to Kotlin\n */\npublic external abstract class HTMLButtonElement : HTMLElement {\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var name: String\n    open var type: String\n    open var value: String\n    open var menu: HTMLMenuElement?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSelectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSelectElement) to Kotlin\n */\npublic external abstract class HTMLSelectElement : HTMLElement, ItemArrayLike<Element> {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var multiple: Boolean\n    open var name: String\n    open var required: Boolean\n    open var size: Int\n    open val type: String\n    open val options: HTMLOptionsCollection\n    override var length: Int\n    open val selectedOptions: HTMLCollection\n    open var selectedIndex: Int\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun namedItem(name: String): HTMLOptionElement?\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally)\n    fun remove(index: Int)\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    override fun item(index: Int): Element?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLSelectElement.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLSelectElement.set(index: Int, option: HTMLOptionElement?) { asDynamic()[index] = option }\n\n/**\n * Exposes the JavaScript [HTMLDataListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataListElement) to Kotlin\n */\npublic external abstract class HTMLDataListElement : HTMLElement {\n    open val options: HTMLCollection\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOptGroupElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptGroupElement) to Kotlin\n */\npublic external abstract class HTMLOptGroupElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open var label: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionElement) to Kotlin\n */\npublic external abstract class HTMLOptionElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var label: String\n    open var defaultSelected: Boolean\n    open var selected: Boolean\n    open var value: String\n    open var text: String\n    open val index: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTextAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTextAreaElement) to Kotlin\n */\npublic external abstract class HTMLTextAreaElement : HTMLElement {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var cols: Int\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var inputMode: String\n    open var maxLength: Int\n    open var minLength: Int\n    open var name: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var rows: Int\n    open var wrap: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val textLength: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    fun select()\n    fun setRangeText(replacement: String)\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally)\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLKeygenElement](https://developer.mozilla.org/en/docs/Web/API/HTMLKeygenElement) to Kotlin\n */\npublic external abstract class HTMLKeygenElement : HTMLElement {\n    open var autofocus: Boolean\n    open var challenge: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var keytype: String\n    open var name: String\n    open val type: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOutputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOutputElement) to Kotlin\n */\npublic external abstract class HTMLOutputElement : HTMLElement {\n    open val htmlFor: DOMTokenList\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLProgressElement](https://developer.mozilla.org/en/docs/Web/API/HTMLProgressElement) to Kotlin\n */\npublic external abstract class HTMLProgressElement : HTMLElement {\n    open var value: Double\n    open var max: Double\n    open val position: Double\n    open val labels: NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMeterElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMeterElement) to Kotlin\n */\npublic external abstract class HTMLMeterElement : HTMLElement {\n    open var value: Double\n    open var min: Double\n    open var max: Double\n    open var low: Double\n    open var high: Double\n    open var optimum: Double\n    open val labels: NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFieldSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFieldSetElement) to Kotlin\n */\npublic external abstract class HTMLFieldSetElement : HTMLElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open val elements: HTMLCollection\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLegendElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLegendElement) to Kotlin\n */\npublic external abstract class HTMLLegendElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ValidityState](https://developer.mozilla.org/en/docs/Web/API/ValidityState) to Kotlin\n */\npublic external abstract class ValidityState {\n    open val valueMissing: Boolean\n    open val typeMismatch: Boolean\n    open val patternMismatch: Boolean\n    open val tooLong: Boolean\n    open val tooShort: Boolean\n    open val rangeUnderflow: Boolean\n    open val rangeOverflow: Boolean\n    open val stepMismatch: Boolean\n    open val badInput: Boolean\n    open val customError: Boolean\n    open val valid: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLDetailsElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDetailsElement) to Kotlin\n */\npublic external abstract class HTMLDetailsElement : HTMLElement {\n    open var open: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLMenuElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLMenuItemElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var icon: String\n    open var disabled: Boolean\n    open var checked: Boolean\n    open var radiogroup: String\n    open var default: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external open class RelatedEvent(type: String, eventInitDict: RelatedEventInit = definedExternally) : Event {\n    open val relatedTarget: EventTarget?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface RelatedEventInit : EventInit {\n    var relatedTarget: EventTarget? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun RelatedEventInit(relatedTarget: EventTarget? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): RelatedEventInit {\n    val o = js(\"({})\")\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLDialogElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDialogElement) to Kotlin\n */\npublic external abstract class HTMLDialogElement : HTMLElement {\n    open var open: Boolean\n    open var returnValue: String\n    fun show(anchor: UnionElementOrMouseEvent = definedExternally)\n    fun showModal(anchor: UnionElementOrMouseEvent = definedExternally)\n    fun close(returnValue: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLScriptElement](https://developer.mozilla.org/en/docs/Web/API/HTMLScriptElement) to Kotlin\n */\npublic external abstract class HTMLScriptElement : HTMLElement, HTMLOrSVGScriptElement {\n    open var src: String\n    open var type: String\n    open var charset: String\n    open var async: Boolean\n    open var defer: Boolean\n    open var crossOrigin: String?\n    open var text: String\n    open var nonce: String\n    open var event: String\n    open var htmlFor: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTemplateElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTemplateElement) to Kotlin\n */\npublic external abstract class HTMLTemplateElement : HTMLElement {\n    open val content: DocumentFragment\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSlotElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSlotElement) to Kotlin\n */\npublic external abstract class HTMLSlotElement : HTMLElement {\n    open var name: String\n    fun assignedNodes(options: AssignedNodesOptions = definedExternally): Array<Node>\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface AssignedNodesOptions {\n    var flatten: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AssignedNodesOptions(flatten: Boolean? = false): AssignedNodesOptions {\n    val o = js(\"({})\")\n    o[\"flatten\"] = flatten\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLCanvasElement](https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement) to Kotlin\n */\npublic external abstract class HTMLCanvasElement : HTMLElement, CanvasImageSource, TexImageSource {\n    open var width: Int\n    open var height: Int\n    fun getContext(contextId: String, vararg arguments: Any?): RenderingContext?\n    fun toDataURL(type: String = definedExternally, quality: Any? = definedExternally): String\n    fun toBlob(_callback: (Blob?) -> Unit, type: String = definedExternally, quality: Any? = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface CanvasRenderingContext2DSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CanvasRenderingContext2DSettings(alpha: Boolean? = true): CanvasRenderingContext2DSettings {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    return o\n}\n\n/**\n * Exposes the JavaScript [CanvasRenderingContext2D](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D) to Kotlin\n */\npublic external abstract class CanvasRenderingContext2D : CanvasState, CanvasTransform, CanvasCompositing, CanvasImageSmoothing, CanvasFillStrokeStyles, CanvasShadowStyles, CanvasFilters, CanvasRect, CanvasDrawPath, CanvasUserInterface, CanvasText, CanvasDrawImage, CanvasHitRegion, CanvasImageData, CanvasPathDrawingStyles, CanvasTextDrawingStyles, CanvasPath, RenderingContext {\n    open val canvas: HTMLCanvasElement\n}\n\npublic external interface CanvasState {\n    fun save()\n    fun restore()\n}\n\npublic external interface CanvasTransform {\n    fun scale(x: Double, y: Double)\n    fun rotate(angle: Double)\n    fun translate(x: Double, y: Double)\n    fun transform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double)\n    fun getTransform(): DOMMatrix\n    fun setTransform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double)\n    fun setTransform(transform: dynamic = definedExternally)\n    fun resetTransform()\n}\n\npublic external interface CanvasCompositing {\n    var globalAlpha: Double\n    var globalCompositeOperation: String\n}\n\npublic external interface CanvasImageSmoothing {\n    var imageSmoothingEnabled: Boolean\n    var imageSmoothingQuality: ImageSmoothingQuality\n}\n\npublic external interface CanvasFillStrokeStyles {\n    var strokeStyle: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillStyle: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    fun createLinearGradient(x0: Double, y0: Double, x1: Double, y1: Double): CanvasGradient\n    fun createRadialGradient(x0: Double, y0: Double, r0: Double, x1: Double, y1: Double, r1: Double): CanvasGradient\n    fun createPattern(image: CanvasImageSource, repetition: String): CanvasPattern?\n}\n\npublic external interface CanvasShadowStyles {\n    var shadowOffsetX: Double\n    var shadowOffsetY: Double\n    var shadowBlur: Double\n    var shadowColor: String\n}\n\npublic external interface CanvasFilters {\n    var filter: String\n}\n\npublic external interface CanvasRect {\n    fun clearRect(x: Double, y: Double, w: Double, h: Double)\n    fun fillRect(x: Double, y: Double, w: Double, h: Double)\n    fun strokeRect(x: Double, y: Double, w: Double, h: Double)\n}\n\npublic external interface CanvasDrawPath {\n    fun beginPath()\n    fun fill(fillRule: CanvasFillRule = definedExternally)\n    fun fill(path: Path2D, fillRule: CanvasFillRule = definedExternally)\n    fun stroke()\n    fun stroke(path: Path2D)\n    fun clip(fillRule: CanvasFillRule = definedExternally)\n    fun clip(path: Path2D, fillRule: CanvasFillRule = definedExternally)\n    fun resetClip()\n    fun isPointInPath(x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInPath(path: Path2D, x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInStroke(x: Double, y: Double): Boolean\n    fun isPointInStroke(path: Path2D, x: Double, y: Double): Boolean\n}\n\npublic external interface CanvasUserInterface {\n    fun drawFocusIfNeeded(element: Element)\n    fun drawFocusIfNeeded(path: Path2D, element: Element)\n    fun scrollPathIntoView()\n    fun scrollPathIntoView(path: Path2D)\n}\n\npublic external interface CanvasText {\n    fun fillText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally)\n    fun strokeText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally)\n    fun measureText(text: String): TextMetrics\n}\n\npublic external interface CanvasDrawImage {\n    fun drawImage(image: CanvasImageSource, dx: Double, dy: Double)\n    fun drawImage(image: CanvasImageSource, dx: Double, dy: Double, dw: Double, dh: Double)\n    fun drawImage(image: CanvasImageSource, sx: Double, sy: Double, sw: Double, sh: Double, dx: Double, dy: Double, dw: Double, dh: Double)\n}\n\npublic external interface CanvasHitRegion {\n    fun addHitRegion(options: HitRegionOptions = definedExternally)\n    fun removeHitRegion(id: String)\n    fun clearHitRegions()\n}\n\npublic external interface CanvasImageData {\n    fun createImageData(sw: Double, sh: Double): ImageData\n    fun createImageData(imagedata: ImageData): ImageData\n    fun getImageData(sx: Double, sy: Double, sw: Double, sh: Double): ImageData\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double)\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double, dirtyX: Double, dirtyY: Double, dirtyWidth: Double, dirtyHeight: Double)\n}\n\npublic external interface CanvasPathDrawingStyles {\n    var lineWidth: Double\n    var lineCap: CanvasLineCap\n    var lineJoin: CanvasLineJoin\n    var miterLimit: Double\n    var lineDashOffset: Double\n    fun setLineDash(segments: Array<Double>)\n    fun getLineDash(): Array<Double>\n}\n\npublic external interface CanvasTextDrawingStyles {\n    var font: String\n    var textAlign: CanvasTextAlign\n    var textBaseline: CanvasTextBaseline\n    var direction: CanvasDirection\n}\n\npublic external interface CanvasPath {\n    fun closePath()\n    fun moveTo(x: Double, y: Double)\n    fun lineTo(x: Double, y: Double)\n    fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double)\n    fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double)\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double)\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double)\n    fun rect(x: Double, y: Double, w: Double, h: Double)\n    fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally)\n    fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [CanvasGradient](https://developer.mozilla.org/en/docs/Web/API/CanvasGradient) to Kotlin\n */\npublic external abstract class CanvasGradient {\n    fun addColorStop(offset: Double, color: String)\n}\n\n/**\n * Exposes the JavaScript [CanvasPattern](https://developer.mozilla.org/en/docs/Web/API/CanvasPattern) to Kotlin\n */\npublic external abstract class CanvasPattern {\n    fun setTransform(transform: dynamic = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [TextMetrics](https://developer.mozilla.org/en/docs/Web/API/TextMetrics) to Kotlin\n */\npublic external abstract class TextMetrics {\n    open val width: Double\n    open val actualBoundingBoxLeft: Double\n    open val actualBoundingBoxRight: Double\n    open val fontBoundingBoxAscent: Double\n    open val fontBoundingBoxDescent: Double\n    open val actualBoundingBoxAscent: Double\n    open val actualBoundingBoxDescent: Double\n    open val emHeightAscent: Double\n    open val emHeightDescent: Double\n    open val hangingBaseline: Double\n    open val alphabeticBaseline: Double\n    open val ideographicBaseline: Double\n}\n\npublic external interface HitRegionOptions {\n    var path: Path2D? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillRule: CanvasFillRule? /* = CanvasFillRule.NONZERO */\n        get() = definedExternally\n        set(value) = definedExternally\n    var id: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var parentID: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cursor: String? /* = \"inherit\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var control: Element? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var label: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var role: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HitRegionOptions(path: Path2D? = null, fillRule: CanvasFillRule? = CanvasFillRule.NONZERO, id: String? = \"\", parentID: String? = null, cursor: String? = \"inherit\", control: Element? = null, label: String? = null, role: String? = null): HitRegionOptions {\n    val o = js(\"({})\")\n    o[\"path\"] = path\n    o[\"fillRule\"] = fillRule\n    o[\"id\"] = id\n    o[\"parentID\"] = parentID\n    o[\"cursor\"] = cursor\n    o[\"control\"] = control\n    o[\"label\"] = label\n    o[\"role\"] = role\n    return o\n}\n\n/**\n * Exposes the JavaScript [ImageData](https://developer.mozilla.org/en/docs/Web/API/ImageData) to Kotlin\n */\npublic external open class ImageData : ImageBitmapSource, TexImageSource {\n    constructor(sw: Int, sh: Int)\n    constructor(data: Uint8ClampedArray, sw: Int, sh: Int = definedExternally)\n    open val width: Int\n    open val height: Int\n    open val data: Uint8ClampedArray\n}\n\n/**\n * Exposes the JavaScript [Path2D](https://developer.mozilla.org/en/docs/Web/API/Path2D) to Kotlin\n */\npublic external open class Path2D() : CanvasPath {\n    constructor(path: Path2D)\n    constructor(paths: Array<Path2D>, fillRule: CanvasFillRule = definedExternally)\n    constructor(d: String)\n    fun addPath(path: Path2D, transform: dynamic = definedExternally)\n    override fun closePath()\n    override fun moveTo(x: Double, y: Double)\n    override fun lineTo(x: Double, y: Double)\n    override fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double)\n    override fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double)\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double)\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double)\n    override fun rect(x: Double, y: Double, w: Double, h: Double)\n    override fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */)\n    override fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */)\n}\n\n/**\n * Exposes the JavaScript [ImageBitmapRenderingContext](https://developer.mozilla.org/en/docs/Web/API/ImageBitmapRenderingContext) to Kotlin\n */\npublic external abstract class ImageBitmapRenderingContext {\n    open val canvas: HTMLCanvasElement\n    fun transferFromImageBitmap(bitmap: ImageBitmap?)\n}\n\npublic external interface ImageBitmapRenderingContextSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapRenderingContextSettings(alpha: Boolean? = true): ImageBitmapRenderingContextSettings {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomElementRegistry](https://developer.mozilla.org/en/docs/Web/API/CustomElementRegistry) to Kotlin\n */\npublic external abstract class CustomElementRegistry {\n    fun define(name: String, constructor: () -> dynamic, options: ElementDefinitionOptions = definedExternally)\n    fun get(name: String): Any?\n    fun whenDefined(name: String): Promise<Unit>\n}\n\npublic external interface ElementDefinitionOptions {\n    var extends: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementDefinitionOptions(extends: String? = undefined): ElementDefinitionOptions {\n    val o = js(\"({})\")\n    o[\"extends\"] = extends\n    return o\n}\n\npublic external interface ElementContentEditable {\n    var contentEditable: String\n    val isContentEditable: Boolean\n}\n\n/**\n * Exposes the JavaScript [DataTransfer](https://developer.mozilla.org/en/docs/Web/API/DataTransfer) to Kotlin\n */\npublic external abstract class DataTransfer {\n    open var dropEffect: String\n    open var effectAllowed: String\n    open val items: DataTransferItemList\n    open val types: Array<out String>\n    open val files: FileList\n    fun setDragImage(image: Element, x: Int, y: Int)\n    fun getData(format: String): String\n    fun setData(format: String, data: String)\n    fun clearData(format: String = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [DataTransferItemList](https://developer.mozilla.org/en/docs/Web/API/DataTransferItemList) to Kotlin\n */\npublic external abstract class DataTransferItemList {\n    open val length: Int\n    fun add(data: String, type: String): DataTransferItem?\n    fun add(data: File): DataTransferItem?\n    fun remove(index: Int)\n    fun clear()\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DataTransferItemList.get(index: Int): DataTransferItem? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DataTransferItem](https://developer.mozilla.org/en/docs/Web/API/DataTransferItem) to Kotlin\n */\npublic external abstract class DataTransferItem {\n    open val kind: String\n    open val type: String\n    fun getAsString(_callback: ((String) -> Unit)?)\n    fun getAsFile(): File?\n}\n\n/**\n * Exposes the JavaScript [DragEvent](https://developer.mozilla.org/en/docs/Web/API/DragEvent) to Kotlin\n */\npublic external open class DragEvent(type: String, eventInitDict: DragEventInit = definedExternally) : MouseEvent {\n    open val dataTransfer: DataTransfer?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface DragEventInit : MouseEventInit {\n    var dataTransfer: DataTransfer? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DragEventInit(dataTransfer: DataTransfer? = null, screenX: Int? = 0, screenY: Int? = 0, clientX: Int? = 0, clientY: Int? = 0, button: Short? = 0, buttons: Short? = 0, relatedTarget: EventTarget? = null, region: String? = null, ctrlKey: Boolean? = false, shiftKey: Boolean? = false, altKey: Boolean? = false, metaKey: Boolean? = false, modifierAltGraph: Boolean? = false, modifierCapsLock: Boolean? = false, modifierFn: Boolean? = false, modifierFnLock: Boolean? = false, modifierHyper: Boolean? = false, modifierNumLock: Boolean? = false, modifierScrollLock: Boolean? = false, modifierSuper: Boolean? = false, modifierSymbol: Boolean? = false, modifierSymbolLock: Boolean? = false, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): DragEventInit {\n    val o = js(\"({})\")\n    o[\"dataTransfer\"] = dataTransfer\n    o[\"screenX\"] = screenX\n    o[\"screenY\"] = screenY\n    o[\"clientX\"] = clientX\n    o[\"clientY\"] = clientY\n    o[\"button\"] = button\n    o[\"buttons\"] = buttons\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"region\"] = region\n    o[\"ctrlKey\"] = ctrlKey\n    o[\"shiftKey\"] = shiftKey\n    o[\"altKey\"] = altKey\n    o[\"metaKey\"] = metaKey\n    o[\"modifierAltGraph\"] = modifierAltGraph\n    o[\"modifierCapsLock\"] = modifierCapsLock\n    o[\"modifierFn\"] = modifierFn\n    o[\"modifierFnLock\"] = modifierFnLock\n    o[\"modifierHyper\"] = modifierHyper\n    o[\"modifierNumLock\"] = modifierNumLock\n    o[\"modifierScrollLock\"] = modifierScrollLock\n    o[\"modifierSuper\"] = modifierSuper\n    o[\"modifierSymbol\"] = modifierSymbol\n    o[\"modifierSymbolLock\"] = modifierSymbolLock\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Window](https://developer.mozilla.org/en/docs/Web/API/Window) to Kotlin\n */\npublic external abstract class Window : EventTarget, GlobalEventHandlers, WindowEventHandlers, WindowOrWorkerGlobalScope, WindowSessionStorage, WindowLocalStorage, GlobalPerformance, UnionMessagePortOrWindowProxy {\n    open val window: Window\n    open val self: Window\n    open val document: Document\n    open var name: String\n    open val location: Location\n    open val history: History\n    open val customElements: CustomElementRegistry\n    open val locationbar: BarProp\n    open val menubar: BarProp\n    open val personalbar: BarProp\n    open val scrollbars: BarProp\n    open val statusbar: BarProp\n    open val toolbar: BarProp\n    open var status: String\n    open val closed: Boolean\n    open val frames: Window\n    open val length: Int\n    open val top: Window\n    open var opener: Any?\n    open val parent: Window\n    open val frameElement: Element?\n    open val navigator: Navigator\n    open val applicationCache: ApplicationCache\n    open val external: External\n    open val screen: Screen\n    open val innerWidth: Int\n    open val innerHeight: Int\n    open val scrollX: Double\n    open val pageXOffset: Double\n    open val scrollY: Double\n    open val pageYOffset: Double\n    open val screenX: Int\n    open val screenY: Int\n    open val outerWidth: Int\n    open val outerHeight: Int\n    open val devicePixelRatio: Double\n    fun close()\n    fun stop()\n    fun focus()\n    fun blur()\n    fun open(url: String = definedExternally, target: String = definedExternally, features: String = definedExternally): Window?\n    fun alert()\n    fun alert(message: String)\n    fun confirm(message: String = definedExternally): Boolean\n    fun prompt(message: String = definedExternally, default: String = definedExternally): String?\n    fun print()\n    fun requestAnimationFrame(callback: (Double) -> Unit): Int\n    fun cancelAnimationFrame(handle: Int)\n    fun postMessage(message: Any?, targetOrigin: String, transfer: Array<dynamic> = definedExternally)\n    fun captureEvents()\n    fun releaseEvents()\n    fun matchMedia(query: String): MediaQueryList\n    fun moveTo(x: Int, y: Int)\n    fun moveBy(x: Int, y: Int)\n    fun resizeTo(x: Int, y: Int)\n    fun resizeBy(x: Int, y: Int)\n    fun scroll(options: ScrollToOptions = definedExternally)\n    fun scroll(x: Double, y: Double)\n    fun scrollTo(options: ScrollToOptions = definedExternally)\n    fun scrollTo(x: Double, y: Double)\n    fun scrollBy(options: ScrollToOptions = definedExternally)\n    fun scrollBy(x: Double, y: Double)\n    fun getComputedStyle(elt: Element, pseudoElt: String? = definedExternally): CSSStyleDeclaration\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Window.get(name: String): dynamic = asDynamic()[name]\n\npublic external abstract class BarProp {\n    open val visible: Boolean\n}\n\n/**\n * Exposes the JavaScript [History](https://developer.mozilla.org/en/docs/Web/API/History) to Kotlin\n */\npublic external abstract class History {\n    open val length: Int\n    open var scrollRestoration: ScrollRestoration\n    open val state: Any?\n    fun go(delta: Int = definedExternally)\n    fun back()\n    fun forward()\n    fun pushState(data: Any?, title: String, url: String? = definedExternally)\n    fun replaceState(data: Any?, title: String, url: String? = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [Location](https://developer.mozilla.org/en/docs/Web/API/Location) to Kotlin\n */\npublic external abstract class Location {\n    open var href: String\n    open val origin: String\n    open var protocol: String\n    open var host: String\n    open var hostname: String\n    open var port: String\n    open var pathname: String\n    open var search: String\n    open var hash: String\n    open val ancestorOrigins: Array<out String>\n    fun assign(url: String)\n    fun replace(url: String)\n    fun reload()\n}\n\n/**\n * Exposes the JavaScript [PopStateEvent](https://developer.mozilla.org/en/docs/Web/API/PopStateEvent) to Kotlin\n */\npublic external open class PopStateEvent(type: String, eventInitDict: PopStateEventInit = definedExternally) : Event {\n    open val state: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PopStateEventInit : EventInit {\n    var state: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PopStateEventInit(state: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PopStateEventInit {\n    val o = js(\"({})\")\n    o[\"state\"] = state\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HashChangeEvent](https://developer.mozilla.org/en/docs/Web/API/HashChangeEvent) to Kotlin\n */\npublic external open class HashChangeEvent(type: String, eventInitDict: HashChangeEventInit = definedExternally) : Event {\n    open val oldURL: String\n    open val newURL: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface HashChangeEventInit : EventInit {\n    var oldURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HashChangeEventInit(oldURL: String? = \"\", newURL: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): HashChangeEventInit {\n    val o = js(\"({})\")\n    o[\"oldURL\"] = oldURL\n    o[\"newURL\"] = newURL\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [PageTransitionEvent](https://developer.mozilla.org/en/docs/Web/API/PageTransitionEvent) to Kotlin\n */\npublic external open class PageTransitionEvent(type: String, eventInitDict: PageTransitionEventInit = definedExternally) : Event {\n    open val persisted: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PageTransitionEventInit : EventInit {\n    var persisted: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PageTransitionEventInit(persisted: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PageTransitionEventInit {\n    val o = js(\"({})\")\n    o[\"persisted\"] = persisted\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [BeforeUnloadEvent](https://developer.mozilla.org/en/docs/Web/API/BeforeUnloadEvent) to Kotlin\n */\npublic external open class BeforeUnloadEvent : Event {\n    var returnValue: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external abstract class ApplicationCache : EventTarget {\n    open val status: Short\n    open var onchecking: ((Event) -> dynamic)?\n    open var onerror: ((Event) -> dynamic)?\n    open var onnoupdate: ((Event) -> dynamic)?\n    open var ondownloading: ((Event) -> dynamic)?\n    open var onprogress: ((ProgressEvent) -> dynamic)?\n    open var onupdateready: ((Event) -> dynamic)?\n    open var oncached: ((Event) -> dynamic)?\n    open var onobsolete: ((Event) -> dynamic)?\n    fun update()\n    fun abort()\n    fun swapCache()\n\n    companion object {\n        val UNCACHED: Short\n        val IDLE: Short\n        val CHECKING: Short\n        val DOWNLOADING: Short\n        val UPDATEREADY: Short\n        val OBSOLETE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NavigatorOnLine](https://developer.mozilla.org/en/docs/Web/API/NavigatorOnLine) to Kotlin\n */\npublic external interface NavigatorOnLine {\n    val onLine: Boolean\n}\n\n/**\n * Exposes the JavaScript [ErrorEvent](https://developer.mozilla.org/en/docs/Web/API/ErrorEvent) to Kotlin\n */\npublic external open class ErrorEvent(type: String, eventInitDict: ErrorEventInit = definedExternally) : Event {\n    open val message: String\n    open val filename: String\n    open val lineno: Int\n    open val colno: Int\n    open val error: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface ErrorEventInit : EventInit {\n    var message: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var filename: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lineno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var error: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ErrorEventInit(message: String? = \"\", filename: String? = \"\", lineno: Int? = 0, colno: Int? = 0, error: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ErrorEventInit {\n    val o = js(\"({})\")\n    o[\"message\"] = message\n    o[\"filename\"] = filename\n    o[\"lineno\"] = lineno\n    o[\"colno\"] = colno\n    o[\"error\"] = error\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [PromiseRejectionEvent](https://developer.mozilla.org/en/docs/Web/API/PromiseRejectionEvent) to Kotlin\n */\npublic external open class PromiseRejectionEvent(type: String, eventInitDict: PromiseRejectionEventInit) : Event {\n    open val promise: Promise<Any?>\n    open val reason: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PromiseRejectionEventInit : EventInit {\n    var promise: Promise<Any?>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: Any?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PromiseRejectionEventInit(promise: Promise<Any?>?, reason: Any? = undefined, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PromiseRejectionEventInit {\n    val o = js(\"({})\")\n    o[\"promise\"] = promise\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [GlobalEventHandlers](https://developer.mozilla.org/en/docs/Web/API/GlobalEventHandlers) to Kotlin\n */\npublic external interface GlobalEventHandlers {\n    var onabort: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onblur: ((FocusEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncancel: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncanplay: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncanplaythrough: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onchange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onclick: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onclose: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncontextmenu: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncuechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondblclick: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondrag: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragend: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragenter: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragexit: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragleave: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragover: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragstart: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondrop: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondurationchange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onemptied: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onended: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onfocus: ((FocusEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oninput: ((InputEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oninvalid: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeydown: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeypress: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeyup: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onload: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadeddata: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadedmetadata: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadend: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadstart: ((ProgressEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmousedown: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseenter: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseleave: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmousemove: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseout: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseover: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseup: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onwheel: ((WheelEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpause: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onplay: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onplaying: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onprogress: ((ProgressEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onratechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onreset: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onresize: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onscroll: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onseeked: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onseeking: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onselect: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onshow: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onstalled: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onsubmit: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onsuspend: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ontimeupdate: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ontoggle: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onvolumechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onwaiting: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ongotpointercapture: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onlostpointercapture: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerdown: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointermove: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerup: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointercancel: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerover: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerout: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerenter: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerleave: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [WindowEventHandlers](https://developer.mozilla.org/en/docs/Web/API/WindowEventHandlers) to Kotlin\n */\npublic external interface WindowEventHandlers {\n    var onafterprint: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onbeforeprint: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onbeforeunload: ((BeforeUnloadEvent) -> String?)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onhashchange: ((HashChangeEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onlanguagechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmessage: ((MessageEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onoffline: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ononline: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpagehide: ((PageTransitionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpageshow: ((PageTransitionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpopstate: ((PopStateEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onrejectionhandled: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onstorage: ((StorageEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onunload: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\npublic external interface DocumentAndElementEventHandlers {\n    var oncopy: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncut: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpaste: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [WindowOrWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WindowOrWorkerGlobalScope) to Kotlin\n */\npublic external interface WindowOrWorkerGlobalScope {\n    val origin: String\n    val caches: CacheStorage\n    fun btoa(data: String): String\n    fun atob(data: String): String\n    fun setTimeout(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearTimeout(handle: Int = definedExternally)\n    fun setInterval(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearInterval(handle: Int = definedExternally)\n    fun createImageBitmap(image: ImageBitmapSource, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun createImageBitmap(image: ImageBitmapSource, sx: Int, sy: Int, sw: Int, sh: Int, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun fetch(input: dynamic, init: RequestInit = definedExternally): Promise<Response>\n}\n\n/**\n * Exposes the JavaScript [Navigator](https://developer.mozilla.org/en/docs/Web/API/Navigator) to Kotlin\n */\npublic external abstract class Navigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorContentUtils, NavigatorCookies, NavigatorPlugins, NavigatorConcurrentHardware {\n    open val clipboard: Clipboard\n    open val mediaDevices: MediaDevices\n    open val maxTouchPoints: Int\n    open val serviceWorker: ServiceWorkerContainer\n    fun requestMediaKeySystemAccess(keySystem: String, supportedConfigurations: Array<MediaKeySystemConfiguration>): Promise<MediaKeySystemAccess>\n    fun getUserMedia(constraints: MediaStreamConstraints, successCallback: (MediaStream) -> Unit, errorCallback: (dynamic) -> Unit)\n    fun vibrate(pattern: dynamic): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorID](https://developer.mozilla.org/en/docs/Web/API/NavigatorID) to Kotlin\n */\npublic external interface NavigatorID {\n    val appCodeName: String\n    val appName: String\n    val appVersion: String\n    val platform: String\n    val product: String\n    val productSub: String\n    val userAgent: String\n    val vendor: String\n    val vendorSub: String\n    val oscpu: String\n    fun taintEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorLanguage](https://developer.mozilla.org/en/docs/Web/API/NavigatorLanguage) to Kotlin\n */\npublic external interface NavigatorLanguage {\n    val language: String\n    val languages: Array<out String>\n}\n\npublic external interface NavigatorContentUtils {\n    fun registerProtocolHandler(scheme: String, url: String, title: String)\n    fun registerContentHandler(mimeType: String, url: String, title: String)\n    fun isProtocolHandlerRegistered(scheme: String, url: String): String\n    fun isContentHandlerRegistered(mimeType: String, url: String): String\n    fun unregisterProtocolHandler(scheme: String, url: String)\n    fun unregisterContentHandler(mimeType: String, url: String)\n}\n\npublic external interface NavigatorCookies {\n    val cookieEnabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorPlugins](https://developer.mozilla.org/en/docs/Web/API/NavigatorPlugins) to Kotlin\n */\npublic external interface NavigatorPlugins {\n    val plugins: PluginArray\n    val mimeTypes: MimeTypeArray\n    fun javaEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [PluginArray](https://developer.mozilla.org/en/docs/Web/API/PluginArray) to Kotlin\n */\npublic external abstract class PluginArray : ItemArrayLike<Plugin> {\n    fun refresh(reload: Boolean = definedExternally)\n    override fun item(index: Int): Plugin?\n    fun namedItem(name: String): Plugin?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun PluginArray.get(index: Int): Plugin? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun PluginArray.get(name: String): Plugin? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeTypeArray](https://developer.mozilla.org/en/docs/Web/API/MimeTypeArray) to Kotlin\n */\npublic external abstract class MimeTypeArray : ItemArrayLike<MimeType> {\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun MimeTypeArray.get(index: Int): MimeType? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun MimeTypeArray.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [Plugin](https://developer.mozilla.org/en/docs/Web/API/Plugin) to Kotlin\n */\npublic external abstract class Plugin : ItemArrayLike<MimeType> {\n    open val name: String\n    open val description: String\n    open val filename: String\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Plugin.get(index: Int): MimeType? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Plugin.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeType](https://developer.mozilla.org/en/docs/Web/API/MimeType) to Kotlin\n */\npublic external abstract class MimeType {\n    open val type: String\n    open val description: String\n    open val suffixes: String\n    open val enabledPlugin: Plugin\n}\n\n/**\n * Exposes the JavaScript [ImageBitmap](https://developer.mozilla.org/en/docs/Web/API/ImageBitmap) to Kotlin\n */\npublic external abstract class ImageBitmap : CanvasImageSource, TexImageSource {\n    open val width: Int\n    open val height: Int\n    fun close()\n}\n\npublic external interface ImageBitmapOptions {\n    var imageOrientation: ImageOrientation? /* = ImageOrientation.NONE */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultiplyAlpha: PremultiplyAlpha? /* = PremultiplyAlpha.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colorSpaceConversion: ColorSpaceConversion? /* = ColorSpaceConversion.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeWidth: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeHeight: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeQuality: ResizeQuality? /* = ResizeQuality.LOW */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapOptions(imageOrientation: ImageOrientation? = ImageOrientation.NONE, premultiplyAlpha: PremultiplyAlpha? = PremultiplyAlpha.DEFAULT, colorSpaceConversion: ColorSpaceConversion? = ColorSpaceConversion.DEFAULT, resizeWidth: Int? = undefined, resizeHeight: Int? = undefined, resizeQuality: ResizeQuality? = ResizeQuality.LOW): ImageBitmapOptions {\n    val o = js(\"({})\")\n    o[\"imageOrientation\"] = imageOrientation\n    o[\"premultiplyAlpha\"] = premultiplyAlpha\n    o[\"colorSpaceConversion\"] = colorSpaceConversion\n    o[\"resizeWidth\"] = resizeWidth\n    o[\"resizeHeight\"] = resizeHeight\n    o[\"resizeQuality\"] = resizeQuality\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageEvent](https://developer.mozilla.org/en/docs/Web/API/MessageEvent) to Kotlin\n */\npublic external open class MessageEvent(type: String, eventInitDict: MessageEventInit = definedExternally) : Event {\n    open val data: Any?\n    open val origin: String\n    open val lastEventId: String\n    open val source: UnionMessagePortOrWindowProxy?\n    open val ports: Array<out MessagePort>\n    fun initMessageEvent(type: String, bubbles: Boolean, cancelable: Boolean, data: Any?, origin: String, lastEventId: String, source: UnionMessagePortOrWindowProxy?, ports: Array<MessagePort>)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MessageEventInit : EventInit {\n    var data: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var origin: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lastEventId: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var source: UnionMessagePortOrWindowProxy? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var ports: Array<MessagePort>? /* = arrayOf() */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MessageEventInit(data: Any? = null, origin: String? = \"\", lastEventId: String? = \"\", source: UnionMessagePortOrWindowProxy? = null, ports: Array<MessagePort>? = arrayOf(), bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MessageEventInit {\n    val o = js(\"({})\")\n    o[\"data\"] = data\n    o[\"origin\"] = origin\n    o[\"lastEventId\"] = lastEventId\n    o[\"source\"] = source\n    o[\"ports\"] = ports\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [EventSource](https://developer.mozilla.org/en/docs/Web/API/EventSource) to Kotlin\n */\npublic external open class EventSource(url: String, eventSourceInitDict: EventSourceInit = definedExternally) : EventTarget {\n    open val url: String\n    open val withCredentials: Boolean\n    open val readyState: Short\n    var onopen: ((Event) -> dynamic)?\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    fun close()\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSED: Short\n    }\n}\n\npublic external interface EventSourceInit {\n    var withCredentials: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventSourceInit(withCredentials: Boolean? = false): EventSourceInit {\n    val o = js(\"({})\")\n    o[\"withCredentials\"] = withCredentials\n    return o\n}\n\n/**\n * Exposes the JavaScript [WebSocket](https://developer.mozilla.org/en/docs/Web/API/WebSocket) to Kotlin\n */\npublic external open class WebSocket(url: String, protocols: dynamic = definedExternally) : EventTarget {\n    open val url: String\n    open val readyState: Short\n    open val bufferedAmount: Number\n    var onopen: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onclose: ((Event) -> dynamic)?\n    open val extensions: String\n    open val protocol: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var binaryType: BinaryType\n    fun close(code: Short = definedExternally, reason: String = definedExternally)\n    fun send(data: String)\n    fun send(data: Blob)\n    fun send(data: ArrayBuffer)\n    fun send(data: ArrayBufferView)\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSING: Short\n        val CLOSED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CloseEvent](https://developer.mozilla.org/en/docs/Web/API/CloseEvent) to Kotlin\n */\npublic external open class CloseEvent(type: String, eventInitDict: CloseEventInit = definedExternally) : Event {\n    open val wasClean: Boolean\n    open val code: Short\n    open val reason: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface CloseEventInit : EventInit {\n    var wasClean: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var code: Short? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CloseEventInit(wasClean: Boolean? = false, code: Short? = 0, reason: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CloseEventInit {\n    val o = js(\"({})\")\n    o[\"wasClean\"] = wasClean\n    o[\"code\"] = code\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageChannel](https://developer.mozilla.org/en/docs/Web/API/MessageChannel) to Kotlin\n */\npublic external open class MessageChannel {\n    open val port1: MessagePort\n    open val port2: MessagePort\n}\n\n/**\n * Exposes the JavaScript [MessagePort](https://developer.mozilla.org/en/docs/Web/API/MessagePort) to Kotlin\n */\npublic external abstract class MessagePort : EventTarget, UnionMessagePortOrWindowProxy, UnionMessagePortOrServiceWorker, UnionClientOrMessagePortOrServiceWorker {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n    fun start()\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [BroadcastChannel](https://developer.mozilla.org/en/docs/Web/API/BroadcastChannel) to Kotlin\n */\npublic external open class BroadcastChannel(name: String) : EventTarget {\n    open val name: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?)\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [WorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WorkerGlobalScope) to Kotlin\n */\npublic external abstract class WorkerGlobalScope : EventTarget, WindowOrWorkerGlobalScope, GlobalPerformance {\n    open val self: WorkerGlobalScope\n    open val location: WorkerLocation\n    open val navigator: WorkerNavigator\n    open var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    open var onlanguagechange: ((Event) -> dynamic)?\n    open var onoffline: ((Event) -> dynamic)?\n    open var ononline: ((Event) -> dynamic)?\n    open var onrejectionhandled: ((Event) -> dynamic)?\n    open var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n    fun importScripts(vararg urls: String)\n}\n\n/**\n * Exposes the JavaScript [DedicatedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/DedicatedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class DedicatedWorkerGlobalScope : WorkerGlobalScope {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [SharedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/SharedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class SharedWorkerGlobalScope : WorkerGlobalScope {\n    open val name: String\n    open val applicationCache: ApplicationCache\n    open var onconnect: ((Event) -> dynamic)?\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [AbstractWorker](https://developer.mozilla.org/en/docs/Web/API/AbstractWorker) to Kotlin\n */\npublic external interface AbstractWorker {\n    var onerror: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [Worker](https://developer.mozilla.org/en/docs/Web/API/Worker) to Kotlin\n */\npublic external open class Worker(scriptURL: String, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    var onmessage: ((MessageEvent) -> dynamic)?\n    override var onerror: ((Event) -> dynamic)?\n    fun terminate()\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n}\n\npublic external interface WorkerOptions {\n    var type: WorkerType? /* = WorkerType.CLASSIC */\n        get() = definedExternally\n        set(value) = definedExternally\n    var credentials: RequestCredentials? /* = RequestCredentials.OMIT */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WorkerOptions(type: WorkerType? = WorkerType.CLASSIC, credentials: RequestCredentials? = RequestCredentials.OMIT): WorkerOptions {\n    val o = js(\"({})\")\n    o[\"type\"] = type\n    o[\"credentials\"] = credentials\n    return o\n}\n\n/**\n * Exposes the JavaScript [SharedWorker](https://developer.mozilla.org/en/docs/Web/API/SharedWorker) to Kotlin\n */\npublic external open class SharedWorker(scriptURL: String, name: String = definedExternally, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    open val port: MessagePort\n    override var onerror: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [NavigatorConcurrentHardware](https://developer.mozilla.org/en/docs/Web/API/NavigatorConcurrentHardware) to Kotlin\n */\npublic external interface NavigatorConcurrentHardware {\n    val hardwareConcurrency: Number\n}\n\n/**\n * Exposes the JavaScript [WorkerNavigator](https://developer.mozilla.org/en/docs/Web/API/WorkerNavigator) to Kotlin\n */\npublic external abstract class WorkerNavigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorConcurrentHardware {\n    open val serviceWorker: ServiceWorkerContainer\n}\n\n/**\n * Exposes the JavaScript [WorkerLocation](https://developer.mozilla.org/en/docs/Web/API/WorkerLocation) to Kotlin\n */\npublic external abstract class WorkerLocation {\n    open val href: String\n    open val origin: String\n    open val protocol: String\n    open val host: String\n    open val hostname: String\n    open val port: String\n    open val pathname: String\n    open val search: String\n    open val hash: String\n}\n\n/**\n * Exposes the JavaScript [Storage](https://developer.mozilla.org/en/docs/Web/API/Storage) to Kotlin\n */\npublic external abstract class Storage {\n    open val length: Int\n    fun key(index: Int): String?\n    fun removeItem(key: String)\n    fun clear()\n    fun getItem(key: String): String?\n    fun setItem(key: String, value: String)\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Storage.get(key: String): String? = asDynamic()[key]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Storage.set(key: String, value: String) { asDynamic()[key] = value }\n\n/**\n * Exposes the JavaScript [WindowSessionStorage](https://developer.mozilla.org/en/docs/Web/API/WindowSessionStorage) to Kotlin\n */\npublic external interface WindowSessionStorage {\n    val sessionStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [WindowLocalStorage](https://developer.mozilla.org/en/docs/Web/API/WindowLocalStorage) to Kotlin\n */\npublic external interface WindowLocalStorage {\n    val localStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [StorageEvent](https://developer.mozilla.org/en/docs/Web/API/StorageEvent) to Kotlin\n */\npublic external open class StorageEvent(type: String, eventInitDict: StorageEventInit = definedExternally) : Event {\n    open val key: String?\n    open val oldValue: String?\n    open val newValue: String?\n    open val url: String\n    open val storageArea: Storage?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface StorageEventInit : EventInit {\n    var key: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var oldValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var url: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var storageArea: Storage? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun StorageEventInit(key: String? = null, oldValue: String? = null, newValue: String? = null, url: String? = \"\", storageArea: Storage? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): StorageEventInit {\n    val o = js(\"({})\")\n    o[\"key\"] = key\n    o[\"oldValue\"] = oldValue\n    o[\"newValue\"] = newValue\n    o[\"url\"] = url\n    o[\"storageArea\"] = storageArea\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external abstract class HTMLAppletElement : HTMLElement {\n    open var align: String\n    open var alt: String\n    open var archive: String\n    open var code: String\n    open var codeBase: String\n    open var height: String\n    open var hspace: Int\n    open var name: String\n    open var _object: String\n    open var vspace: Int\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMarqueeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMarqueeElement) to Kotlin\n */\npublic external abstract class HTMLMarqueeElement : HTMLElement {\n    open var behavior: String\n    open var bgColor: String\n    open var direction: String\n    open var height: String\n    open var hspace: Int\n    open var loop: Int\n    open var scrollAmount: Int\n    open var scrollDelay: Int\n    open var trueSpeed: Boolean\n    open var vspace: Int\n    open var width: String\n    open var onbounce: ((Event) -> dynamic)?\n    open var onfinish: ((Event) -> dynamic)?\n    open var onstart: ((Event) -> dynamic)?\n    fun start()\n    fun stop()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFrameSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFrameSetElement) to Kotlin\n */\npublic external abstract class HTMLFrameSetElement : HTMLElement, WindowEventHandlers {\n    open var cols: String\n    open var rows: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLFrameElement : HTMLElement {\n    open var name: String\n    open var scrolling: String\n    open var src: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var noResize: Boolean\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var marginHeight: String\n    open var marginWidth: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLDirectoryElement : HTMLElement {\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFontElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFontElement) to Kotlin\n */\npublic external abstract class HTMLFontElement : HTMLElement {\n    open var color: String\n    open var face: String\n    open var size: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface External {\n    fun AddSearchProvider()\n    fun IsSearchProviderInstalled()\n}\n\npublic external interface EventInit {\n    var bubbles: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cancelable: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventInit(bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): EventInit {\n    val o = js(\"({})\")\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomEvent](https://developer.mozilla.org/en/docs/Web/API/CustomEvent) to Kotlin\n */\npublic external open class CustomEvent(type: String, eventInitDict: CustomEventInit = definedExternally) : Event {\n    open val detail: Any?\n    fun initCustomEvent(type: String, bubbles: Boolean, cancelable: Boolean, detail: Any?)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface CustomEventInit : EventInit {\n    var detail: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CustomEventInit(detail: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CustomEventInit {\n    val o = js(\"({})\")\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external interface EventListenerOptions {\n    var capture: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventListenerOptions(capture: Boolean? = false): EventListenerOptions {\n    val o = js(\"({})\")\n    o[\"capture\"] = capture\n    return o\n}\n\npublic external interface AddEventListenerOptions : EventListenerOptions {\n    var passive: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var once: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AddEventListenerOptions(passive: Boolean? = false, once: Boolean? = false, capture: Boolean? = false): AddEventListenerOptions {\n    val o = js(\"({})\")\n    o[\"passive\"] = passive\n    o[\"once\"] = once\n    o[\"capture\"] = capture\n    return o\n}\n\npublic external interface NonElementParentNode {\n    fun getElementById(elementId: String): Element?\n}\n\n/**\n * Exposes the JavaScript [DocumentOrShadowRoot](https://developer.mozilla.org/en/docs/Web/API/DocumentOrShadowRoot) to Kotlin\n */\npublic external interface DocumentOrShadowRoot {\n    val fullscreenElement: Element?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [ParentNode](https://developer.mozilla.org/en/docs/Web/API/ParentNode) to Kotlin\n */\npublic external interface ParentNode {\n    val children: HTMLCollection\n    val firstElementChild: Element?\n        get() = definedExternally\n    val lastElementChild: Element?\n        get() = definedExternally\n    val childElementCount: Int\n    fun prepend(vararg nodes: dynamic)\n    fun append(vararg nodes: dynamic)\n    fun querySelector(selectors: String): Element?\n    fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [NonDocumentTypeChildNode](https://developer.mozilla.org/en/docs/Web/API/NonDocumentTypeChildNode) to Kotlin\n */\npublic external interface NonDocumentTypeChildNode {\n    val previousElementSibling: Element?\n        get() = definedExternally\n    val nextElementSibling: Element?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [ChildNode](https://developer.mozilla.org/en/docs/Web/API/ChildNode) to Kotlin\n */\npublic external interface ChildNode {\n    fun before(vararg nodes: dynamic)\n    fun after(vararg nodes: dynamic)\n    fun replaceWith(vararg nodes: dynamic)\n    fun remove()\n}\n\n/**\n * Exposes the JavaScript [Slotable](https://developer.mozilla.org/en/docs/Web/API/Slotable) to Kotlin\n */\npublic external interface Slotable {\n    val assignedSlot: HTMLSlotElement?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [NodeList](https://developer.mozilla.org/en/docs/Web/API/NodeList) to Kotlin\n */\npublic external abstract class NodeList : ItemArrayLike<Node> {\n    override fun item(index: Int): Node?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NodeList.get(index: Int): Node? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [HTMLCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLCollection) to Kotlin\n */\npublic external abstract class HTMLCollection : ItemArrayLike<Element>, UnionElementOrHTMLCollection {\n    override fun item(index: Int): Element?\n    fun namedItem(name: String): Element?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLCollection.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLCollection.get(name: String): Element? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MutationObserver](https://developer.mozilla.org/en/docs/Web/API/MutationObserver) to Kotlin\n */\npublic external open class MutationObserver(callback: (Array<MutationRecord>, MutationObserver) -> Unit) {\n    fun observe(target: Node, options: MutationObserverInit = definedExternally)\n    fun disconnect()\n    fun takeRecords(): Array<MutationRecord>\n}\n\n/**\n * Exposes the JavaScript [MutationObserverInit](https://developer.mozilla.org/en/docs/Web/API/MutationObserverInit) to Kotlin\n */\npublic external interface MutationObserverInit {\n    var childList: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributes: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterData: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var subtree: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterDataOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeFilter: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MutationObserverInit(childList: Boolean? = false, attributes: Boolean? = undefined, characterData: Boolean? = undefined, subtree: Boolean? = false, attributeOldValue: Boolean? = undefined, characterDataOldValue: Boolean? = undefined, attributeFilter: Array<String>? = undefined): MutationObserverInit {\n    val o = js(\"({})\")\n    o[\"childList\"] = childList\n    o[\"attributes\"] = attributes\n    o[\"characterData\"] = characterData\n    o[\"subtree\"] = subtree\n    o[\"attributeOldValue\"] = attributeOldValue\n    o[\"characterDataOldValue\"] = characterDataOldValue\n    o[\"attributeFilter\"] = attributeFilter\n    return o\n}\n\n/**\n * Exposes the JavaScript [MutationRecord](https://developer.mozilla.org/en/docs/Web/API/MutationRecord) to Kotlin\n */\npublic external abstract class MutationRecord {\n    open val type: String\n    open val target: Node\n    open val addedNodes: NodeList\n    open val removedNodes: NodeList\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open val attributeName: String?\n    open val attributeNamespace: String?\n    open val oldValue: String?\n}\n\n/**\n * Exposes the JavaScript [Node](https://developer.mozilla.org/en/docs/Web/API/Node) to Kotlin\n */\npublic external abstract class Node : EventTarget {\n    open val nodeType: Short\n    open val nodeName: String\n    open val baseURI: String\n    open val isConnected: Boolean\n    open val ownerDocument: Document?\n    open val parentNode: Node?\n    open val parentElement: Element?\n    open val childNodes: NodeList\n    open val firstChild: Node?\n    open val lastChild: Node?\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open var nodeValue: String?\n    open var textContent: String?\n    fun getRootNode(options: GetRootNodeOptions = definedExternally): Node\n    fun hasChildNodes(): Boolean\n    fun normalize()\n    fun cloneNode(deep: Boolean = definedExternally): Node\n    fun isEqualNode(otherNode: Node?): Boolean\n    fun isSameNode(otherNode: Node?): Boolean\n    fun compareDocumentPosition(other: Node): Short\n    fun contains(other: Node?): Boolean\n    fun lookupPrefix(namespace: String?): String?\n    fun lookupNamespaceURI(prefix: String?): String?\n    fun isDefaultNamespace(namespace: String?): Boolean\n    fun insertBefore(node: Node, child: Node?): Node\n    fun appendChild(node: Node): Node\n    fun replaceChild(node: Node, child: Node): Node\n    fun removeChild(child: Node): Node\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface GetRootNodeOptions {\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun GetRootNodeOptions(composed: Boolean? = false): GetRootNodeOptions {\n    val o = js(\"({})\")\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Document](https://developer.mozilla.org/en/docs/Web/API/Document) to Kotlin\n */\npublic external open class Document : Node, GlobalEventHandlers, DocumentAndElementEventHandlers, NonElementParentNode, DocumentOrShadowRoot, ParentNode, GeometryUtils {\n    open val implementation: DOMImplementation\n    open val URL: String\n    open val documentURI: String\n    open val origin: String\n    open val compatMode: String\n    open val characterSet: String\n    open val charset: String\n    open val inputEncoding: String\n    open val contentType: String\n    open val doctype: DocumentType?\n    open val documentElement: Element?\n    open val location: Location?\n    var domain: String\n    open val referrer: String\n    var cookie: String\n    open val lastModified: String\n    open val readyState: DocumentReadyState\n    var title: String\n    var dir: String\n    var body: HTMLElement?\n    open val head: HTMLHeadElement?\n    open val images: HTMLCollection\n    open val embeds: HTMLCollection\n    open val plugins: HTMLCollection\n    open val links: HTMLCollection\n    open val forms: HTMLCollection\n    open val scripts: HTMLCollection\n    open val currentScript: HTMLOrSVGScriptElement?\n    open val defaultView: Window?\n    open val activeElement: Element?\n    var designMode: String\n    var onreadystatechange: ((Event) -> dynamic)?\n    var fgColor: String\n    var linkColor: String\n    var vlinkColor: String\n    var alinkColor: String\n    var bgColor: String\n    open val anchors: HTMLCollection\n    open val applets: HTMLCollection\n    open val all: HTMLAllCollection\n    open val scrollingElement: Element?\n    open val styleSheets: StyleSheetList\n    open val rootElement: SVGSVGElement?\n    open val fullscreenEnabled: Boolean\n    open val fullscreen: Boolean\n    var onfullscreenchange: ((Event) -> dynamic)?\n    var onfullscreenerror: ((Event) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override val fullscreenElement: Element?\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun createElement(localName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createElementNS(namespace: String?, qualifiedName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createDocumentFragment(): DocumentFragment\n    fun createTextNode(data: String): Text\n    fun createCDATASection(data: String): CDATASection\n    fun createComment(data: String): Comment\n    fun createProcessingInstruction(target: String, data: String): ProcessingInstruction\n    fun importNode(node: Node, deep: Boolean = definedExternally): Node\n    fun adoptNode(node: Node): Node\n    fun createAttribute(localName: String): Attr\n    fun createAttributeNS(namespace: String?, qualifiedName: String): Attr\n    fun createEvent(`interface`: String): Event\n    fun createRange(): Range\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): NodeIterator\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): NodeIterator\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): TreeWalker\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): TreeWalker\n    fun getElementsByName(elementName: String): NodeList\n    fun open(type: String = definedExternally, replace: String = definedExternally): Document\n    fun open(url: String, name: String, features: String): Window\n    fun close()\n    fun write(vararg text: String)\n    fun writeln(vararg text: String)\n    fun hasFocus(): Boolean\n    fun execCommand(commandId: String, showUI: Boolean = definedExternally, value: String = definedExternally): Boolean\n    fun queryCommandEnabled(commandId: String): Boolean\n    fun queryCommandIndeterm(commandId: String): Boolean\n    fun queryCommandState(commandId: String): Boolean\n    fun queryCommandSupported(commandId: String): Boolean\n    fun queryCommandValue(commandId: String): String\n    fun clear()\n    fun captureEvents()\n    fun releaseEvents()\n    fun elementFromPoint(x: Double, y: Double): Element?\n    fun elementsFromPoint(x: Double, y: Double): Array<Element>\n    fun caretPositionFromPoint(x: Double, y: Double): CaretPosition?\n    fun createTouch(view: Window, target: EventTarget, identifier: Int, pageX: Int, pageY: Int, screenX: Int, screenY: Int): Touch\n    fun createTouchList(vararg touches: Touch): TouchList\n    fun exitFullscreen(): Promise<Unit>\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Document.get(name: String): dynamic = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [XMLDocument](https://developer.mozilla.org/en/docs/Web/API/XMLDocument) to Kotlin\n */\npublic external open class XMLDocument : Document {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface ElementCreationOptions {\n    var `is`: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementCreationOptions(`is`: String? = undefined): ElementCreationOptions {\n    val o = js(\"({})\")\n    o[\"is\"] = `is`\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMImplementation](https://developer.mozilla.org/en/docs/Web/API/DOMImplementation) to Kotlin\n */\npublic external abstract class DOMImplementation {\n    fun createDocumentType(qualifiedName: String, publicId: String, systemId: String): DocumentType\n    fun createDocument(namespace: String?, qualifiedName: String, doctype: DocumentType? = definedExternally): XMLDocument\n    fun createHTMLDocument(title: String = definedExternally): Document\n    fun hasFeature(): Boolean\n}\n\n/**\n * Exposes the JavaScript [DocumentType](https://developer.mozilla.org/en/docs/Web/API/DocumentType) to Kotlin\n */\npublic external abstract class DocumentType : Node, ChildNode {\n    open val name: String\n    open val publicId: String\n    open val systemId: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [DocumentFragment](https://developer.mozilla.org/en/docs/Web/API/DocumentFragment) to Kotlin\n */\npublic external open class DocumentFragment : Node, NonElementParentNode, ParentNode {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ShadowRoot](https://developer.mozilla.org/en/docs/Web/API/ShadowRoot) to Kotlin\n */\npublic external open class ShadowRoot : DocumentFragment, DocumentOrShadowRoot {\n    open val mode: ShadowRootMode\n    open val host: Element\n    override val fullscreenElement: Element?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Element](https://developer.mozilla.org/en/docs/Web/API/Element) to Kotlin\n */\npublic external abstract class Element : Node, ParentNode, NonDocumentTypeChildNode, ChildNode, Slotable, GeometryUtils, UnionElementOrHTMLCollection, UnionElementOrRadioNodeList, UnionElementOrMouseEvent, UnionElementOrProcessingInstruction {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val tagName: String\n    open var id: String\n    open var className: String\n    open val classList: DOMTokenList\n    open var slot: String\n    open val attributes: NamedNodeMap\n    open val shadowRoot: ShadowRoot?\n    open var scrollTop: Double\n    open var scrollLeft: Double\n    open val scrollWidth: Int\n    open val scrollHeight: Int\n    open val clientTop: Int\n    open val clientLeft: Int\n    open val clientWidth: Int\n    open val clientHeight: Int\n    open var innerHTML: String\n    open var outerHTML: String\n    fun hasAttributes(): Boolean\n    fun getAttributeNames(): Array<String>\n    fun getAttribute(qualifiedName: String): String?\n    fun getAttributeNS(namespace: String?, localName: String): String?\n    fun setAttribute(qualifiedName: String, value: String)\n    fun setAttributeNS(namespace: String?, qualifiedName: String, value: String)\n    fun removeAttribute(qualifiedName: String)\n    fun removeAttributeNS(namespace: String?, localName: String)\n    fun hasAttribute(qualifiedName: String): Boolean\n    fun hasAttributeNS(namespace: String?, localName: String): Boolean\n    fun getAttributeNode(qualifiedName: String): Attr?\n    fun getAttributeNodeNS(namespace: String?, localName: String): Attr?\n    fun setAttributeNode(attr: Attr): Attr?\n    fun setAttributeNodeNS(attr: Attr): Attr?\n    fun removeAttributeNode(attr: Attr): Attr\n    fun attachShadow(init: ShadowRootInit): ShadowRoot\n    fun closest(selectors: String): Element?\n    fun matches(selectors: String): Boolean\n    fun webkitMatchesSelector(selectors: String): Boolean\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun insertAdjacentElement(where: String, element: Element): Element?\n    fun insertAdjacentText(where: String, data: String)\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun scrollIntoView()\n    fun scrollIntoView(arg: dynamic)\n    fun scroll(options: ScrollToOptions = definedExternally)\n    fun scroll(x: Double, y: Double)\n    fun scrollTo(options: ScrollToOptions = definedExternally)\n    fun scrollTo(x: Double, y: Double)\n    fun scrollBy(options: ScrollToOptions = definedExternally)\n    fun scrollBy(x: Double, y: Double)\n    fun insertAdjacentHTML(position: String, text: String)\n    fun setPointerCapture(pointerId: Int)\n    fun releasePointerCapture(pointerId: Int)\n    fun hasPointerCapture(pointerId: Int): Boolean\n    fun requestFullscreen(): Promise<Unit>\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface ShadowRootInit {\n    var mode: ShadowRootMode?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ShadowRootInit(mode: ShadowRootMode?): ShadowRootInit {\n    val o = js(\"({})\")\n    o[\"mode\"] = mode\n    return o\n}\n\n/**\n * Exposes the JavaScript [NamedNodeMap](https://developer.mozilla.org/en/docs/Web/API/NamedNodeMap) to Kotlin\n */\npublic external abstract class NamedNodeMap : ItemArrayLike<Attr> {\n    fun getNamedItemNS(namespace: String?, localName: String): Attr?\n    fun setNamedItem(attr: Attr): Attr?\n    fun setNamedItemNS(attr: Attr): Attr?\n    fun removeNamedItem(qualifiedName: String): Attr\n    fun removeNamedItemNS(namespace: String?, localName: String): Attr\n    override fun item(index: Int): Attr?\n    fun getNamedItem(qualifiedName: String): Attr?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NamedNodeMap.get(index: Int): Attr? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NamedNodeMap.get(qualifiedName: String): Attr? = asDynamic()[qualifiedName]\n\n/**\n * Exposes the JavaScript [Attr](https://developer.mozilla.org/en/docs/Web/API/Attr) to Kotlin\n */\npublic external abstract class Attr : Node {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val name: String\n    open var value: String\n    open val ownerElement: Element?\n    open val specified: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CharacterData](https://developer.mozilla.org/en/docs/Web/API/CharacterData) to Kotlin\n */\npublic external abstract class CharacterData : Node, NonDocumentTypeChildNode, ChildNode {\n    open var data: String\n    open val length: Int\n    fun substringData(offset: Int, count: Int): String\n    fun appendData(data: String)\n    fun insertData(offset: Int, data: String)\n    fun deleteData(offset: Int, count: Int)\n    fun replaceData(offset: Int, count: Int, data: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Text](https://developer.mozilla.org/en/docs/Web/API/Text) to Kotlin\n */\npublic external open class Text(data: String = definedExternally) : CharacterData, Slotable, GeometryUtils {\n    open val wholeText: String\n    override val assignedSlot: HTMLSlotElement?\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    fun splitText(offset: Int): Text\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CDATASection](https://developer.mozilla.org/en/docs/Web/API/CDATASection) to Kotlin\n */\npublic external open class CDATASection : Text {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ProcessingInstruction](https://developer.mozilla.org/en/docs/Web/API/ProcessingInstruction) to Kotlin\n */\npublic external abstract class ProcessingInstruction : CharacterData, LinkStyle, UnionElementOrProcessingInstruction {\n    open val target: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Comment](https://developer.mozilla.org/en/docs/Web/API/Comment) to Kotlin\n */\npublic external open class Comment(data: String = definedExternally) : CharacterData {\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Range](https://developer.mozilla.org/en/docs/Web/API/Range) to Kotlin\n */\npublic external open class Range {\n    open val startContainer: Node\n    open val startOffset: Int\n    open val endContainer: Node\n    open val endOffset: Int\n    open val collapsed: Boolean\n    open val commonAncestorContainer: Node\n    fun setStart(node: Node, offset: Int)\n    fun setEnd(node: Node, offset: Int)\n    fun setStartBefore(node: Node)\n    fun setStartAfter(node: Node)\n    fun setEndBefore(node: Node)\n    fun setEndAfter(node: Node)\n    fun collapse(toStart: Boolean = definedExternally)\n    fun selectNode(node: Node)\n    fun selectNodeContents(node: Node)\n    fun compareBoundaryPoints(how: Short, sourceRange: Range): Short\n    fun deleteContents()\n    fun extractContents(): DocumentFragment\n    fun cloneContents(): DocumentFragment\n    fun insertNode(node: Node)\n    fun surroundContents(newParent: Node)\n    fun cloneRange(): Range\n    fun detach()\n    fun isPointInRange(node: Node, offset: Int): Boolean\n    fun comparePoint(node: Node, offset: Int): Short\n    fun intersectsNode(node: Node): Boolean\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun createContextualFragment(fragment: String): DocumentFragment\n\n    companion object {\n        val START_TO_START: Short\n        val START_TO_END: Short\n        val END_TO_END: Short\n        val END_TO_START: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NodeIterator](https://developer.mozilla.org/en/docs/Web/API/NodeIterator) to Kotlin\n */\npublic external abstract class NodeIterator {\n    open val root: Node\n    open val referenceNode: Node\n    open val pointerBeforeReferenceNode: Boolean\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    fun nextNode(): Node?\n    fun previousNode(): Node?\n    fun detach()\n}\n\n/**\n * Exposes the JavaScript [TreeWalker](https://developer.mozilla.org/en/docs/Web/API/TreeWalker) to Kotlin\n */\npublic external abstract class TreeWalker {\n    open val root: Node\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    open var currentNode: Node\n    fun parentNode(): Node?\n    fun firstChild(): Node?\n    fun lastChild(): Node?\n    fun previousSibling(): Node?\n    fun nextSibling(): Node?\n    fun previousNode(): Node?\n    fun nextNode(): Node?\n}\n\n/**\n * Exposes the JavaScript [NodeFilter](https://developer.mozilla.org/en/docs/Web/API/NodeFilter) to Kotlin\n */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface NodeFilter {\n    fun acceptNode(node: Node): Short\n\n    companion object {\n        val FILTER_ACCEPT: Short\n        val FILTER_REJECT: Short\n        val FILTER_SKIP: Short\n        val SHOW_ALL: Int\n        val SHOW_ELEMENT: Int\n        val SHOW_ATTRIBUTE: Int\n        val SHOW_TEXT: Int\n        val SHOW_CDATA_SECTION: Int\n        val SHOW_ENTITY_REFERENCE: Int\n        val SHOW_ENTITY: Int\n        val SHOW_PROCESSING_INSTRUCTION: Int\n        val SHOW_COMMENT: Int\n        val SHOW_DOCUMENT: Int\n        val SHOW_DOCUMENT_TYPE: Int\n        val SHOW_DOCUMENT_FRAGMENT: Int\n        val SHOW_NOTATION: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMTokenList](https://developer.mozilla.org/en/docs/Web/API/DOMTokenList) to Kotlin\n */\npublic external abstract class DOMTokenList : ItemArrayLike<String> {\n    open var value: String\n    fun contains(token: String): Boolean\n    fun add(vararg tokens: String)\n    fun remove(vararg tokens: String)\n    fun toggle(token: String, force: Boolean = definedExternally): Boolean\n    fun replace(token: String, newToken: String)\n    fun supports(token: String): Boolean\n    override fun item(index: Int): String?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMTokenList.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMPointReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMPointReadOnly) to Kotlin\n */\npublic external open class DOMPointReadOnly(x: Double, y: Double, z: Double, w: Double) {\n    open val x: Double\n    open val y: Double\n    open val z: Double\n    open val w: Double\n    fun matrixTransform(matrix: DOMMatrixReadOnly): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [DOMPoint](https://developer.mozilla.org/en/docs/Web/API/DOMPoint) to Kotlin\n */\npublic external open class DOMPoint : DOMPointReadOnly {\n    constructor(point: DOMPointInit)\n    constructor(x: Double = definedExternally, y: Double = definedExternally, z: Double = definedExternally, w: Double = definedExternally)\n    override var x: Double\n    override var y: Double\n    override var z: Double\n    override var w: Double\n}\n\n/**\n * Exposes the JavaScript [DOMPointInit](https://developer.mozilla.org/en/docs/Web/API/DOMPointInit) to Kotlin\n */\npublic external interface DOMPointInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var z: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var w: Double? /* = 1.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMPointInit(x: Double? = 0.0, y: Double? = 0.0, z: Double? = 0.0, w: Double? = 1.0): DOMPointInit {\n    val o = js(\"({})\")\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"z\"] = z\n    o[\"w\"] = w\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMRect](https://developer.mozilla.org/en/docs/Web/API/DOMRect) to Kotlin\n */\npublic external open class DOMRect(x: Double = definedExternally, y: Double = definedExternally, width: Double = definedExternally, height: Double = definedExternally) : DOMRectReadOnly {\n    override var x: Double\n    override var y: Double\n    override var width: Double\n    override var height: Double\n}\n\n/**\n * Exposes the JavaScript [DOMRectReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMRectReadOnly) to Kotlin\n */\npublic external open class DOMRectReadOnly(x: Double, y: Double, width: Double, height: Double) {\n    open val x: Double\n    open val y: Double\n    open val width: Double\n    open val height: Double\n    open val top: Double\n    open val right: Double\n    open val bottom: Double\n    open val left: Double\n}\n\npublic external interface DOMRectInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var width: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMRectInit(x: Double? = 0.0, y: Double? = 0.0, width: Double? = 0.0, height: Double? = 0.0): DOMRectInit {\n    val o = js(\"({})\")\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"width\"] = width\n    o[\"height\"] = height\n    return o\n}\n\npublic external interface DOMRectList : ItemArrayLike<DOMRect> {\n    override fun item(index: Int): DOMRect?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMRectList.get(index: Int): DOMRect? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMQuad](https://developer.mozilla.org/en/docs/Web/API/DOMQuad) to Kotlin\n */\npublic external open class DOMQuad {\n    constructor(p1: DOMPointInit = definedExternally, p2: DOMPointInit = definedExternally, p3: DOMPointInit = definedExternally, p4: DOMPointInit = definedExternally)\n    constructor(rect: DOMRectInit)\n    open val p1: DOMPoint\n    open val p2: DOMPoint\n    open val p3: DOMPoint\n    open val p4: DOMPoint\n    open val bounds: DOMRectReadOnly\n}\n\n/**\n * Exposes the JavaScript [DOMMatrixReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMMatrixReadOnly) to Kotlin\n */\npublic external open class DOMMatrixReadOnly(numberSequence: Array<Double>) {\n    open val a: Double\n    open val b: Double\n    open val c: Double\n    open val d: Double\n    open val e: Double\n    open val f: Double\n    open val m11: Double\n    open val m12: Double\n    open val m13: Double\n    open val m14: Double\n    open val m21: Double\n    open val m22: Double\n    open val m23: Double\n    open val m24: Double\n    open val m31: Double\n    open val m32: Double\n    open val m33: Double\n    open val m34: Double\n    open val m41: Double\n    open val m42: Double\n    open val m43: Double\n    open val m44: Double\n    open val is2D: Boolean\n    open val isIdentity: Boolean\n    fun translate(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scale(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3d(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniform(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotate(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVector(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngle(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewX(sx: Double): DOMMatrix\n    fun skewY(sy: Double): DOMMatrix\n    fun multiply(other: DOMMatrix): DOMMatrix\n    fun flipX(): DOMMatrix\n    fun flipY(): DOMMatrix\n    fun inverse(): DOMMatrix\n    fun transformPoint(point: DOMPointInit = definedExternally): DOMPoint\n    fun toFloat32Array(): Float32Array\n    fun toFloat64Array(): Float64Array\n}\n\n/**\n * Exposes the JavaScript [DOMMatrix](https://developer.mozilla.org/en/docs/Web/API/DOMMatrix) to Kotlin\n */\npublic external open class DOMMatrix() : DOMMatrixReadOnly {\n    constructor(transformList: String)\n    constructor(other: DOMMatrixReadOnly)\n    constructor(array32: Float32Array)\n    constructor(array64: Float64Array)\n    constructor(numberSequence: Array<Double>)\n    override var a: Double\n    override var b: Double\n    override var c: Double\n    override var d: Double\n    override var e: Double\n    override var f: Double\n    override var m11: Double\n    override var m12: Double\n    override var m13: Double\n    override var m14: Double\n    override var m21: Double\n    override var m22: Double\n    override var m23: Double\n    override var m24: Double\n    override var m31: Double\n    override var m32: Double\n    override var m33: Double\n    override var m34: Double\n    override var m41: Double\n    override var m42: Double\n    override var m43: Double\n    override var m44: Double\n    fun multiplySelf(other: DOMMatrix): DOMMatrix\n    fun preMultiplySelf(other: DOMMatrix): DOMMatrix\n    fun translateSelf(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scaleSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3dSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniformSelf(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotateSelf(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVectorSelf(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngleSelf(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewXSelf(sx: Double): DOMMatrix\n    fun skewYSelf(sy: Double): DOMMatrix\n    fun invertSelf(): DOMMatrix\n    fun setMatrixValue(transformList: String): DOMMatrix\n}\n\npublic external interface ScrollOptions {\n    var behavior: ScrollBehavior? /* = ScrollBehavior.AUTO */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollOptions(behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollOptions {\n    val o = js(\"({})\")\n    o[\"behavior\"] = behavior\n    return o\n}\n\n/**\n * Exposes the JavaScript [ScrollToOptions](https://developer.mozilla.org/en/docs/Web/API/ScrollToOptions) to Kotlin\n */\npublic external interface ScrollToOptions : ScrollOptions {\n    var left: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var top: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollToOptions(left: Double? = undefined, top: Double? = undefined, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollToOptions {\n    val o = js(\"({})\")\n    o[\"left\"] = left\n    o[\"top\"] = top\n    o[\"behavior\"] = behavior\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaQueryList](https://developer.mozilla.org/en/docs/Web/API/MediaQueryList) to Kotlin\n */\npublic external abstract class MediaQueryList : EventTarget {\n    open val media: String\n    open val matches: Boolean\n    open var onchange: ((Event) -> dynamic)?\n    fun addListener(listener: EventListener?)\n    fun addListener(listener: ((Event) -> Unit)?)\n    fun removeListener(listener: EventListener?)\n    fun removeListener(listener: ((Event) -> Unit)?)\n}\n\n/**\n * Exposes the JavaScript [MediaQueryListEvent](https://developer.mozilla.org/en/docs/Web/API/MediaQueryListEvent) to Kotlin\n */\npublic external open class MediaQueryListEvent(type: String, eventInitDict: MediaQueryListEventInit = definedExternally) : Event {\n    open val media: String\n    open val matches: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MediaQueryListEventInit : EventInit {\n    var media: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var matches: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaQueryListEventInit(media: String? = \"\", matches: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MediaQueryListEventInit {\n    val o = js(\"({})\")\n    o[\"media\"] = media\n    o[\"matches\"] = matches\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Screen](https://developer.mozilla.org/en/docs/Web/API/Screen) to Kotlin\n */\npublic external abstract class Screen {\n    open val availWidth: Int\n    open val availHeight: Int\n    open val width: Int\n    open val height: Int\n    open val colorDepth: Int\n    open val pixelDepth: Int\n}\n\n/**\n * Exposes the JavaScript [CaretPosition](https://developer.mozilla.org/en/docs/Web/API/CaretPosition) to Kotlin\n */\npublic external abstract class CaretPosition {\n    open val offsetNode: Node\n    open val offset: Int\n    fun getClientRect(): DOMRect?\n}\n\npublic external interface ScrollIntoViewOptions : ScrollOptions {\n    var block: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var inline: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollIntoViewOptions(block: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, inline: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollIntoViewOptions {\n    val o = js(\"({})\")\n    o[\"block\"] = block\n    o[\"inline\"] = inline\n    o[\"behavior\"] = behavior\n    return o\n}\n\npublic external interface BoxQuadOptions {\n    var box: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var relativeTo: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BoxQuadOptions(box: CSSBoxType? = CSSBoxType.BORDER, relativeTo: dynamic = undefined): BoxQuadOptions {\n    val o = js(\"({})\")\n    o[\"box\"] = box\n    o[\"relativeTo\"] = relativeTo\n    return o\n}\n\npublic external interface ConvertCoordinateOptions {\n    var fromBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var toBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConvertCoordinateOptions(fromBox: CSSBoxType? = CSSBoxType.BORDER, toBox: CSSBoxType? = CSSBoxType.BORDER): ConvertCoordinateOptions {\n    val o = js(\"({})\")\n    o[\"fromBox\"] = fromBox\n    o[\"toBox\"] = toBox\n    return o\n}\n\n/**\n * Exposes the JavaScript [GeometryUtils](https://developer.mozilla.org/en/docs/Web/API/GeometryUtils) to Kotlin\n */\npublic external interface GeometryUtils {\n    fun getBoxQuads(options: BoxQuadOptions = definedExternally): Array<DOMQuad>\n    fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [Touch](https://developer.mozilla.org/en/docs/Web/API/Touch) to Kotlin\n */\npublic external abstract class Touch {\n    open val identifier: Int\n    open val target: EventTarget\n    open val screenX: Int\n    open val screenY: Int\n    open val clientX: Int\n    open val clientY: Int\n    open val pageX: Int\n    open val pageY: Int\n    open val region: String?\n}\n\npublic external abstract class TouchList : ItemArrayLike<Touch> {\n    override fun item(index: Int): Touch?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TouchList.get(index: Int): Touch? = asDynamic()[index]\n\npublic external open class TouchEvent : UIEvent {\n    open val touches: TouchList\n    open val targetTouches: TouchList\n    open val changedTouches: TouchList\n    open val altKey: Boolean\n    open val metaKey: Boolean\n    open val ctrlKey: Boolean\n    open val shiftKey: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Image](https://developer.mozilla.org/en/docs/Web/API/Image) to Kotlin\n */\npublic external open class Image(width: Int = definedExternally, height: Int = definedExternally) : HTMLImageElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external open class Audio(src: String = definedExternally) : HTMLAudioElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Option](https://developer.mozilla.org/en/docs/Web/API/Option) to Kotlin\n */\npublic external open class Option(text: String = definedExternally, value: String = definedExternally, defaultSelected: Boolean = definedExternally, selected: Boolean = definedExternally) : HTMLOptionElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface UnionElementOrHTMLCollection\n\npublic external interface UnionElementOrRadioNodeList\n\npublic external interface UnionHTMLOptGroupElementOrHTMLOptionElement\n\npublic external interface MediaProvider\n\npublic external interface UnionAudioTrackOrTextTrackOrVideoTrack\n\npublic external interface UnionElementOrMouseEvent\n\npublic external interface RenderingContext\n\npublic external interface HTMLOrSVGImageElement : CanvasImageSource\n\npublic external interface CanvasImageSource : ImageBitmapSource\n\npublic external interface ImageBitmapSource\n\npublic external interface UnionMessagePortOrWindowProxy\n\npublic external interface HTMLOrSVGScriptElement\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface DocumentReadyState {\n    companion object\n}\n\npublic inline val DocumentReadyState.Companion.LOADING: DocumentReadyState get() = \"loading\".asDynamic().unsafeCast<DocumentReadyState>()\n\npublic inline val DocumentReadyState.Companion.INTERACTIVE: DocumentReadyState get() = \"interactive\".asDynamic().unsafeCast<DocumentReadyState>()\n\npublic inline val DocumentReadyState.Companion.COMPLETE: DocumentReadyState get() = \"complete\".asDynamic().unsafeCast<DocumentReadyState>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanPlayTypeResult {\n    companion object\n}\n\npublic inline val CanPlayTypeResult.Companion.EMPTY: CanPlayTypeResult get() = \"\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\npublic inline val CanPlayTypeResult.Companion.MAYBE: CanPlayTypeResult get() = \"maybe\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\npublic inline val CanPlayTypeResult.Companion.PROBABLY: CanPlayTypeResult get() = \"probably\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface TextTrackMode {\n    companion object\n}\n\npublic inline val TextTrackMode.Companion.DISABLED: TextTrackMode get() = \"disabled\".asDynamic().unsafeCast<TextTrackMode>()\n\npublic inline val TextTrackMode.Companion.HIDDEN: TextTrackMode get() = \"hidden\".asDynamic().unsafeCast<TextTrackMode>()\n\npublic inline val TextTrackMode.Companion.SHOWING: TextTrackMode get() = \"showing\".asDynamic().unsafeCast<TextTrackMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface TextTrackKind {\n    companion object\n}\n\npublic inline val TextTrackKind.Companion.SUBTITLES: TextTrackKind get() = \"subtitles\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.CAPTIONS: TextTrackKind get() = \"captions\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.DESCRIPTIONS: TextTrackKind get() = \"descriptions\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.CHAPTERS: TextTrackKind get() = \"chapters\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.METADATA: TextTrackKind get() = \"metadata\".asDynamic().unsafeCast<TextTrackKind>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface SelectionMode {\n    companion object\n}\n\npublic inline val SelectionMode.Companion.SELECT: SelectionMode get() = \"select\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.START: SelectionMode get() = \"start\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.END: SelectionMode get() = \"end\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.PRESERVE: SelectionMode get() = \"preserve\".asDynamic().unsafeCast<SelectionMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasFillRule {\n    companion object\n}\n\npublic inline val CanvasFillRule.Companion.NONZERO: CanvasFillRule get() = \"nonzero\".asDynamic().unsafeCast<CanvasFillRule>()\n\npublic inline val CanvasFillRule.Companion.EVENODD: CanvasFillRule get() = \"evenodd\".asDynamic().unsafeCast<CanvasFillRule>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ImageSmoothingQuality {\n    companion object\n}\n\npublic inline val ImageSmoothingQuality.Companion.LOW: ImageSmoothingQuality get() = \"low\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\npublic inline val ImageSmoothingQuality.Companion.MEDIUM: ImageSmoothingQuality get() = \"medium\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\npublic inline val ImageSmoothingQuality.Companion.HIGH: ImageSmoothingQuality get() = \"high\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasLineCap {\n    companion object\n}\n\npublic inline val CanvasLineCap.Companion.BUTT: CanvasLineCap get() = \"butt\".asDynamic().unsafeCast<CanvasLineCap>()\n\npublic inline val CanvasLineCap.Companion.ROUND: CanvasLineCap get() = \"round\".asDynamic().unsafeCast<CanvasLineCap>()\n\npublic inline val CanvasLineCap.Companion.SQUARE: CanvasLineCap get() = \"square\".asDynamic().unsafeCast<CanvasLineCap>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasLineJoin {\n    companion object\n}\n\npublic inline val CanvasLineJoin.Companion.ROUND: CanvasLineJoin get() = \"round\".asDynamic().unsafeCast<CanvasLineJoin>()\n\npublic inline val CanvasLineJoin.Companion.BEVEL: CanvasLineJoin get() = \"bevel\".asDynamic().unsafeCast<CanvasLineJoin>()\n\npublic inline val CanvasLineJoin.Companion.MITER: CanvasLineJoin get() = \"miter\".asDynamic().unsafeCast<CanvasLineJoin>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasTextAlign {\n    companion object\n}\n\npublic inline val CanvasTextAlign.Companion.START: CanvasTextAlign get() = \"start\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.END: CanvasTextAlign get() = \"end\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.LEFT: CanvasTextAlign get() = \"left\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.RIGHT: CanvasTextAlign get() = \"right\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.CENTER: CanvasTextAlign get() = \"center\".asDynamic().unsafeCast<CanvasTextAlign>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasTextBaseline {\n    companion object\n}\n\npublic inline val CanvasTextBaseline.Companion.TOP: CanvasTextBaseline get() = \"top\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.HANGING: CanvasTextBaseline get() = \"hanging\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.MIDDLE: CanvasTextBaseline get() = \"middle\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.ALPHABETIC: CanvasTextBaseline get() = \"alphabetic\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.IDEOGRAPHIC: CanvasTextBaseline get() = \"ideographic\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.BOTTOM: CanvasTextBaseline get() = \"bottom\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasDirection {\n    companion object\n}\n\npublic inline val CanvasDirection.Companion.LTR: CanvasDirection get() = \"ltr\".asDynamic().unsafeCast<CanvasDirection>()\n\npublic inline val CanvasDirection.Companion.RTL: CanvasDirection get() = \"rtl\".asDynamic().unsafeCast<CanvasDirection>()\n\npublic inline val CanvasDirection.Companion.INHERIT: CanvasDirection get() = \"inherit\".asDynamic().unsafeCast<CanvasDirection>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollRestoration {\n    companion object\n}\n\npublic inline val ScrollRestoration.Companion.AUTO: ScrollRestoration get() = \"auto\".asDynamic().unsafeCast<ScrollRestoration>()\n\npublic inline val ScrollRestoration.Companion.MANUAL: ScrollRestoration get() = \"manual\".asDynamic().unsafeCast<ScrollRestoration>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ImageOrientation {\n    companion object\n}\n\npublic inline val ImageOrientation.Companion.NONE: ImageOrientation get() = \"none\".asDynamic().unsafeCast<ImageOrientation>()\n\npublic inline val ImageOrientation.Companion.FLIPY: ImageOrientation get() = \"flipY\".asDynamic().unsafeCast<ImageOrientation>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface PremultiplyAlpha {\n    companion object\n}\n\npublic inline val PremultiplyAlpha.Companion.NONE: PremultiplyAlpha get() = \"none\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\npublic inline val PremultiplyAlpha.Companion.PREMULTIPLY: PremultiplyAlpha get() = \"premultiply\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\npublic inline val PremultiplyAlpha.Companion.DEFAULT: PremultiplyAlpha get() = \"default\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ColorSpaceConversion {\n    companion object\n}\n\npublic inline val ColorSpaceConversion.Companion.NONE: ColorSpaceConversion get() = \"none\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\npublic inline val ColorSpaceConversion.Companion.DEFAULT: ColorSpaceConversion get() = \"default\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ResizeQuality {\n    companion object\n}\n\npublic inline val ResizeQuality.Companion.PIXELATED: ResizeQuality get() = \"pixelated\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.LOW: ResizeQuality get() = \"low\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.MEDIUM: ResizeQuality get() = \"medium\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.HIGH: ResizeQuality get() = \"high\".asDynamic().unsafeCast<ResizeQuality>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface BinaryType {\n    companion object\n}\n\npublic inline val BinaryType.Companion.BLOB: BinaryType get() = \"blob\".asDynamic().unsafeCast<BinaryType>()\n\npublic inline val BinaryType.Companion.ARRAYBUFFER: BinaryType get() = \"arraybuffer\".asDynamic().unsafeCast<BinaryType>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface WorkerType {\n    companion object\n}\n\npublic inline val WorkerType.Companion.CLASSIC: WorkerType get() = \"classic\".asDynamic().unsafeCast<WorkerType>()\n\npublic inline val WorkerType.Companion.MODULE: WorkerType get() = \"module\".asDynamic().unsafeCast<WorkerType>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ShadowRootMode {\n    companion object\n}\n\npublic inline val ShadowRootMode.Companion.OPEN: ShadowRootMode get() = \"open\".asDynamic().unsafeCast<ShadowRootMode>()\n\npublic inline val ShadowRootMode.Companion.CLOSED: ShadowRootMode get() = \"closed\".asDynamic().unsafeCast<ShadowRootMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollBehavior {\n    companion object\n}\n\npublic inline val ScrollBehavior.Companion.AUTO: ScrollBehavior get() = \"auto\".asDynamic().unsafeCast<ScrollBehavior>()\n\npublic inline val ScrollBehavior.Companion.INSTANT: ScrollBehavior get() = \"instant\".asDynamic().unsafeCast<ScrollBehavior>()\n\npublic inline val ScrollBehavior.Companion.SMOOTH: ScrollBehavior get() = \"smooth\".asDynamic().unsafeCast<ScrollBehavior>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollLogicalPosition {\n    companion object\n}\n\npublic inline val ScrollLogicalPosition.Companion.START: ScrollLogicalPosition get() = \"start\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.CENTER: ScrollLogicalPosition get() = \"center\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.END: ScrollLogicalPosition get() = \"end\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.NEAREST: ScrollLogicalPosition get() = \"nearest\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CSSBoxType {\n    companion object\n}\n\npublic inline val CSSBoxType.Companion.MARGIN: CSSBoxType get() = \"margin\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.BORDER: CSSBoxType get() = \"border\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.PADDING: CSSBoxType get() = \"padding\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.CONTENT: CSSBoxType get() = \"content\".asDynamic().unsafeCast<CSSBoxType>()",null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.xhr\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\n\n/**\n * Exposes the JavaScript [XMLHttpRequestEventTarget](https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequestEventTarget) to Kotlin\n */\npublic external abstract class XMLHttpRequestEventTarget : EventTarget {\n    open var onloadstart: ((ProgressEvent) -> dynamic)?\n    open var onprogress: ((ProgressEvent) -> dynamic)?\n    open var onabort: ((Event) -> dynamic)?\n    open var onerror: ((Event) -> dynamic)?\n    open var onload: ((Event) -> dynamic)?\n    open var ontimeout: ((Event) -> dynamic)?\n    open var onloadend: ((Event) -> dynamic)?\n}\n\npublic external abstract class XMLHttpRequestUpload : XMLHttpRequestEventTarget\n\n/**\n * Exposes the JavaScript [XMLHttpRequest](https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest) to Kotlin\n */\npublic external open class XMLHttpRequest : XMLHttpRequestEventTarget {\n    var onreadystatechange: ((Event) -> dynamic)?\n    open val readyState: Short\n    var timeout: Int\n    var withCredentials: Boolean\n    open val upload: XMLHttpRequestUpload\n    open val responseURL: String\n    open val status: Short\n    open val statusText: String\n    var responseType: XMLHttpRequestResponseType\n    open val response: Any?\n    open val responseText: String\n    open val responseXML: Document?\n    fun open(method: String, url: String)\n    fun open(method: String, url: String, async: Boolean, username: String? = definedExternally, password: String? = definedExternally)\n    fun setRequestHeader(name: String, value: String)\n    fun send(body: dynamic = definedExternally)\n    fun abort()\n    fun getResponseHeader(name: String): String?\n    fun getAllResponseHeaders(): String\n    fun overrideMimeType(mime: String)\n\n    companion object {\n        val UNSENT: Short\n        val OPENED: Short\n        val HEADERS_RECEIVED: Short\n        val LOADING: Short\n        val DONE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [FormData](https://developer.mozilla.org/en/docs/Web/API/FormData) to Kotlin\n */\npublic external open class FormData(form: HTMLFormElement = definedExternally) {\n    fun append(name: String, value: String)\n    fun append(name: String, value: Blob, filename: String = definedExternally)\n    fun delete(name: String)\n    fun get(name: String): dynamic\n    fun getAll(name: String): Array<dynamic>\n    fun has(name: String): Boolean\n    fun set(name: String, value: String)\n    fun set(name: String, value: Blob, filename: String = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [ProgressEvent](https://developer.mozilla.org/en/docs/Web/API/ProgressEvent) to Kotlin\n */\npublic external open class ProgressEvent(type: String, eventInitDict: ProgressEventInit = definedExternally) : Event {\n    open val lengthComputable: Boolean\n    open val loaded: Number\n    open val total: Number\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface ProgressEventInit : EventInit {\n    var lengthComputable: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var loaded: Number? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var total: Number? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ProgressEventInit(lengthComputable: Boolean? = false, loaded: Number? = 0, total: Number? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ProgressEventInit {\n    val o = js(\"({})\")\n    o[\"lengthComputable\"] = lengthComputable\n    o[\"loaded\"] = loaded\n    o[\"total\"] = total\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface XMLHttpRequestResponseType {\n    companion object\n}\n\npublic inline val XMLHttpRequestResponseType.Companion.EMPTY: XMLHttpRequestResponseType get() = \"\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\n\npublic inline val XMLHttpRequestResponseType.Companion.ARRAYBUFFER: XMLHttpRequestResponseType get() = \"arraybuffer\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\n\npublic inline val XMLHttpRequestResponseType.Companion.BLOB: XMLHttpRequestResponseType get() = \"blob\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\n\npublic inline val XMLHttpRequestResponseType.Companion.DOCUMENT: XMLHttpRequestResponseType get() = \"document\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\n\npublic inline val XMLHttpRequestResponseType.Companion.JSON: XMLHttpRequestResponseType get() = \"json\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\n\npublic inline val XMLHttpRequestResponseType.Companion.TEXT: XMLHttpRequestResponseType get() = \"text\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"import io.github.kgpu.*\nimport io.github.kgpu.kshader.*\n\nconst val COLLATZ_SHADER =\n    \"\"\"\n#version 450\nlayout(local_size_x = 1) in;\n\nlayout(set = 0, binding = 0) buffer PrimeIndices {\n    uint[] indices;\n}; // this is used as both input and output for convenience\n\n// The Collatz Conjecture states that for any integer n:\n// If n is even, n = n/2\n// If n is odd, n = 3n+1\n// And repeat this process for each new n, you will always eventually reach 1.\n// Though the conjecture has not been proven, no counterexample has ever been found.\n// This function returns how many times this recurrence needs to be applied to reach 1.\nuint collatz_iterations(uint n) {\n    uint i = 0;\n    while(n != 1) {\n        if (mod(n, 2) == 0) {\n            n = n / 2;\n        }\n        else {\n            n = (3 * n) + 1;\n        }\n        i++;\n    }\n    return i;\n}\n\nvoid main() {\n    uint index = gl_GlobalInvocationID.x;\n    indices[index] = collatz_iterations(indices[index]);\n}\n\"\"\"\n\nsuspend fun runComputeExample() {\n    val adapter = Kgpu.requestAdapterAsync()\n    val device = adapter.requestDeviceAsync()\n    val input = intArrayOf(2, 7, 19, 20)\n\n    val stagingBuffer =\n        device.createBuffer(\n            BufferDescriptor(\n                \"Staging buffer\",\n                Primitives.INT_BYTES * input.size,\n                BufferUsage.MAP_READ or BufferUsage.COPY_DST,\n                false))\n    val storageBuffer =\n        BufferUtils.createIntBuffer(\n            device,\n            \"storage buffer\",\n            input,\n            BufferUsage.STORAGE or BufferUsage.COPY_DST or BufferUsage.COPY_SRC)\n\n    val bindGroupLayout =\n        device.createBindGroupLayout(\n            BindGroupLayoutDescriptor(\n                BindGroupLayoutEntry(0, ShaderVisibility.COMPUTE, BindingType.STORAGE_BUFFER)))\n    val bindGroup =\n        device.createBindGroup(\n            BindGroupDescriptor(bindGroupLayout, BindGroupEntry(0, storageBuffer)))\n\n    val pipelineLayout = device.createPipelineLayout(PipelineLayoutDescriptor(bindGroupLayout))\n    val shader =\n        device.createShaderModule(KShader.compile(\"shader\", COLLATZ_SHADER, KShaderType.COMPUTE))\n    val computePipeline =\n        device.createComputePipeline(\n            ComputePipelineDescriptor(pipelineLayout, ProgrammableStageDescriptor(shader, \"main\")))\n    val cmdEncoder = device.createCommandEncoder()\n    val computePass = cmdEncoder.beginComputePass()\n\n    computePass.setPipeline(computePipeline)\n    computePass.setBindGroup(0, bindGroup)\n    computePass.dispatch(input.size)\n    computePass.endPass()\n\n    cmdEncoder.copyBufferToBuffer(storageBuffer, stagingBuffer)\n    device.getDefaultQueue().submit(cmdEncoder.finish())\n\n    val times = ByteUtils.toIntArray(stagingBuffer.mapReadAsync(device).getBytes())\n\n    setExampleStatus(\"Expected\", \"1, 16, 20, 7\")\n    setExampleStatus(\"Actual\", times.joinToString())\n}\n","import io.github.kgpu.*\nimport io.github.kgpu.kcgmath.*\nimport io.github.kgpu.kcgmath.MathUtils\nimport io.github.kgpu.kshader.*\nimport kotlin.math.cos\nimport kotlin.math.sin\n\nprivate object EarthShaderSource {\n\n    val vertex =\n        \"\"\"\n        #version 450\n\n        out gl_PerVertex {\n            vec4 gl_Position;\n        };\n        layout(location=0) in vec3 v_position;\n        layout(location=1) in vec2 v_tex_coords;\n        layout(location=2) in vec3 v_normal;\n        layout(location=0) out vec2 f_tex_coords;\n        layout(location=1) out vec3 f_normal;\n        layout(location=2) out vec3 f_position;\n\n        layout(set = 0, binding = 2) uniform TransformationMatrix {\n            mat4 u_Transform;\n        };\n\n        layout(set = 0, binding = 3) uniform NormalMatrix {\n                    mat4 u_NormalMatrix;\n        };\n\n        layout(set = 0, binding = 4) uniform ModelMatrix {\n            mat4 u_Model;\n        };\n\n        void main() {\n            f_tex_coords = v_tex_coords;\n            f_normal = vec3(vec4(v_normal, 1.0) * u_NormalMatrix);\n            f_position = vec3(vec4(v_position, 1.0) * u_Model);\n            gl_Position = u_Transform * vec4(f_position, 1.0);\n        }\n    \"\"\".trimIndent()\n\n    val frag =\n        \"\"\"\n        #version 450\n\n        layout(location=0) in vec2 tex_coords;\n        layout(location=1) in vec3 normal;\n        layout(location=2) in vec3 position;\n        layout(location=0) out vec4 f_color;\n\n        layout(set = 0, binding = 0) uniform texture2D u_texture;\n        layout(set = 0, binding = 1) uniform sampler u_sampler;\n\n        void main() {\n            vec3 light_src = vec3(-3, -3, 2);\n            vec4 ambient = vec4(1.0, 1.0, 1.0, 1.0);\n            vec4 light_color = vec4(1.0, 1.0, 1.0, 1.0);\n            vec3 light = normalize(light_src - position);\n            vec4 directional = max(dot(normal, light), 0.0) * light_color;\n\n            f_color = (ambient + directional) * texture(sampler2D(u_texture, u_sampler), tex_coords);\n        }\n    \"\"\".trimIndent()\n}\n\nsuspend fun runEarthExample(window: Window) {\n    fun createTransformationMatrix(viewMatrix: Matrix4): Matrix4 {\n        val windowSize = window.windowSize\n        val aspectRatio = windowSize.width.toFloat() / windowSize.height\n\n        return Matrix4().perspective(MathUtils.toRadians(45f), aspectRatio, 1f, 10f).mul(viewMatrix)\n    }\n\n    fun createNormalMatrix(modelMatrix: Matrix4, viewMatrix: Matrix4): Matrix4 {\n        return modelMatrix.clone().invert().transpose().mul(viewMatrix)\n    }\n\n    fun createMatrixBuffer(device: Device, matrix: Matrix4, label: String): Buffer {\n        return BufferUtils.createBufferFromData(\n            device,\n            label,\n            createTransformationMatrix(matrix).toBytes(),\n            BufferUsage.UNIFORM or BufferUsage.COPY_DST)\n    }\n\n    val earth = Sphere(40, 40)\n    val indices = earth.generateIndices()\n    val vertices = earth.generateVertices()\n    val adapter = Kgpu.requestAdapterAsync(window)\n    val device = adapter.requestDeviceAsync()\n    val (image, imageBytes) = loadImage(\"earth3D.png\")\n    val modelMatrix = Matrix4().rotate(0f, .1f, 0f)\n    val viewMatrix = Matrix4().lookAt(Vec3(-5f, -5f, 3.5f), Vec3(), Vec3.UNIT_Z)\n\n    val vertexShader =\n        device.createShaderModule(\n            KShader.compile(\"vertex\", EarthShaderSource.vertex, KShaderType.VERTEX))\n    val fragShader =\n        device.createShaderModule(\n            KShader.compile(\"frag\", EarthShaderSource.frag, KShaderType.FRAGMENT))\n    val vertexBuffer =\n        BufferUtils.createFloatBuffer(device, \"indices\", vertices, BufferUsage.VERTEX)\n    val indexBuffer = BufferUtils.createShortBuffer(device, \"vertices\", indices, BufferUsage.INDEX)\n    val modelMatrixBuffer = createMatrixBuffer(device, modelMatrix, \"model matrix\")\n    val normalMatrixBuffer =\n        createMatrixBuffer(device, createNormalMatrix(modelMatrix, viewMatrix), \"normal matrix\")\n    val transformationMatrixBuffer =\n        createMatrixBuffer(device, createTransformationMatrix(viewMatrix), \"trans matrix\")\n\n    val textureDesc =\n        TextureDescriptor(\n            Extent3D(image.width.toLong(), image.height.toLong(), 1),\n            1,\n            1,\n            TextureDimension.D2,\n            TextureFormat.RGBA8_UNORM_SRGB,\n            TextureUsage.COPY_DST or TextureUsage.SAMPLED)\n    val texture = device.createTexture(textureDesc)\n    val textureBuffer =\n        BufferUtils.createBufferFromData(device, \"texture temp\", imageBytes, BufferUsage.COPY_SRC)\n\n    var cmdEncoder = device.createCommandEncoder()\n    cmdEncoder.copyBufferToTexture(\n        BufferCopyView(textureBuffer, image.width * 4, image.height),\n        TextureCopyView(texture),\n        Extent3D(image.width.toLong(), image.height.toLong(), 1))\n    device.getDefaultQueue().submit(cmdEncoder.finish())\n    textureBuffer.destroy()\n\n    val sampler = device.createSampler(SamplerDescriptor())\n    val textureView = texture.createView()\n\n    val bindGroupLayout =\n        device.createBindGroupLayout(\n            BindGroupLayoutDescriptor(\n                BindGroupLayoutEntry(\n                    0,\n                    ShaderVisibility.FRAGMENT,\n                    BindingType.SAMPLED_TEXTURE,\n                    false,\n                    TextureViewDimension.D2,\n                    TextureComponentType.FLOAT),\n                BindGroupLayoutEntry(1, ShaderVisibility.FRAGMENT, BindingType.SAMPLER, false),\n                BindGroupLayoutEntry(2, ShaderVisibility.VERTEX, BindingType.UNIFORM_BUFFER),\n                BindGroupLayoutEntry(3, ShaderVisibility.VERTEX, BindingType.UNIFORM_BUFFER),\n                BindGroupLayoutEntry(4, ShaderVisibility.VERTEX, BindingType.UNIFORM_BUFFER)))\n    val bindGroup =\n        device.createBindGroup(\n            BindGroupDescriptor(\n                bindGroupLayout,\n                BindGroupEntry(0, textureView),\n                BindGroupEntry(1, sampler),\n                BindGroupEntry(2, transformationMatrixBuffer),\n                BindGroupEntry(3, normalMatrixBuffer),\n                BindGroupEntry(4, modelMatrixBuffer)))\n\n    val pipelineLayout = device.createPipelineLayout(PipelineLayoutDescriptor(bindGroupLayout))\n    val pipelineDesc = createRenderPipeline(pipelineLayout, vertexShader, fragShader)\n    val pipeline = device.createRenderPipeline(pipelineDesc)\n    val swapChainDescriptor = SwapChainDescriptor(device, TextureFormat.BGRA8_UNORM)\n\n    var swapChain = window.configureSwapChain(swapChainDescriptor)\n\n    Kgpu.runLoop(window) {\n        if (swapChain.isOutOfDate()) {\n            swapChain = window.configureSwapChain(swapChainDescriptor)\n        }\n\n        val swapChainTexture = swapChain.getCurrentTextureView()\n        cmdEncoder = device.createCommandEncoder()\n\n        val colorAttachment = RenderPassColorAttachmentDescriptor(swapChainTexture, Color.BLACK)\n        val renderPassEncoder = cmdEncoder.beginRenderPass(RenderPassDescriptor(colorAttachment))\n        renderPassEncoder.setPipeline(pipeline)\n        renderPassEncoder.setBindGroup(0, bindGroup)\n        renderPassEncoder.setVertexBuffer(0, vertexBuffer)\n        renderPassEncoder.setIndexBuffer(indexBuffer, IndexFormat.UINT16)\n        renderPassEncoder.drawIndexed(indices.size, 1)\n        renderPassEncoder.endPass()\n\n        val cmdBuffer = cmdEncoder.finish()\n        val queue = device.getDefaultQueue()\n        modelMatrix.rotate(0f, 0f, .01f)\n        queue.writeBuffer(modelMatrixBuffer, modelMatrix.toBytes())\n        queue.writeBuffer(\n            transformationMatrixBuffer, createTransformationMatrix(viewMatrix).toBytes())\n        queue.writeBuffer(normalMatrixBuffer, createNormalMatrix(modelMatrix, viewMatrix).toBytes())\n        queue.submit(cmdBuffer)\n        swapChain.present()\n    }\n}\n\nprivate fun createRenderPipeline(\n    pipelineLayout: PipelineLayout, vertexModule: ShaderModule, fragModule: ShaderModule\n): RenderPipelineDescriptor {\n    return RenderPipelineDescriptor(\n        pipelineLayout,\n        ProgrammableStageDescriptor(vertexModule, \"main\"),\n        ProgrammableStageDescriptor(fragModule, \"main\"),\n        PrimitiveTopology.TRIANGLE_LIST,\n        RasterizationStateDescriptor(FrontFace.CCW, CullMode.BACK),\n        arrayOf(\n            ColorStateDescriptor(\n                TextureFormat.BGRA8_UNORM, BlendDescriptor(), BlendDescriptor(), 0xF)),\n        Kgpu.undefined,\n        VertexStateDescriptor(\n            IndexFormat.UINT16,\n            VertexBufferLayoutDescriptor(\n                8 * Primitives.FLOAT_BYTES,\n                InputStepMode.VERTEX,\n                VertexAttributeDescriptor(VertexFormat.FLOAT3, 0, 0),\n                VertexAttributeDescriptor(VertexFormat.FLOAT2, 3 * Primitives.FLOAT_BYTES, 1),\n                VertexAttributeDescriptor(VertexFormat.FLOAT3, 5 * Primitives.FLOAT_BYTES, 2))),\n        1,\n        0xFFFFFFFF,\n        false)\n}\n\nprivate class Sphere(private val chunks: Int, private val slices: Int, val radius: Float = 2f) {\n    companion object {\n        const val FLOATS_PER_VERTEX = 8\n    }\n\n    init {\n        if ((chunks + 1) * (slices + 1) > Short.MAX_VALUE) {\n            throw UnsupportedOperationException(\"Too many vertices!\")\n        }\n    }\n\n    fun generateVertices(): FloatArray {\n        val vertices = FloatArray((chunks + 1) * (slices + 1) * FLOATS_PER_VERTEX)\n        var angleXY: Float\n        var angleZ: Float\n        for (slice in 0..slices) {\n            angleZ = MathUtils.PIf / slices * slice - MathUtils.PIf / 2f\n\n            // last vertex overlaps the first one, but with the other end of the texture\n            for (chunk in 0..chunks) {\n                val index: Int = (slice * (chunks + 1) + chunk) * FLOATS_PER_VERTEX\n                angleXY = MathUtils.PIf * 2f / chunks * chunk\n                val pos: Vec3 =\n                    Vec3(cos(angleZ) * cos(angleXY), cos(angleZ) * sin(angleXY), sin(angleZ))\n                        .mul(radius)\n                vertices[index] = pos.x\n                vertices[index + 1] = pos.y\n                vertices[index + 2] = pos.z\n                vertices[index + 3] = chunk.toFloat() / chunks\n                vertices[index + 4] = 1f - (slice.toFloat() / slices)\n                pos.normalize()\n                vertices[index + 5] = pos.x\n                vertices[index + 6] = pos.y\n                vertices[index + 7] = pos.z\n            }\n        }\n        return vertices\n    }\n\n    fun generateIndices(): ShortArray {\n        val indices = ShortArray(6 * chunks * slices)\n        for (slice in 0 until slices) {\n            val sliceIndex = (chunks + 1) * slice\n            val nextSliceIndex = (chunks + 1) * (slice + 1)\n            for (chunk in 0 until chunks) {\n                val index = (slice * chunks + chunk) * 6\n                indices[index] = (sliceIndex + chunk).toShort()\n                indices[index + 1] = (sliceIndex + chunk + 1).toShort()\n                indices[index + 2] = (nextSliceIndex + chunk).toShort()\n                indices[index + 3] = (nextSliceIndex + chunk).toShort()\n                indices[index + 4] = (sliceIndex + chunk + 1).toShort()\n                indices[index + 5] = (nextSliceIndex + chunk + 1).toShort()\n            }\n        }\n        return indices\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","import io.github.kgpu.*\nimport io.github.kgpu.kcgmath.*\nimport io.github.kgpu.kcgmath.MathUtils\nimport io.github.kgpu.kshader.*\n\nobject ShapeShaders {\n    const val TRIANGLE =\n        \"\"\"\n        #version 450\n\n        out gl_PerVertex {\n            vec4 gl_Position;\n        };\n        \n        layout(location=0) in vec3 positions;\n        layout(location=1) in vec3 v_colors;\n        \n        layout(location=0) out vec3 f_colors;\n        \n        \n        void main() {\n            f_colors = v_colors;\n            gl_Position = vec4(positions, 1.0);\n        }\n    \"\"\"\n\n    const val CUBE =\n        \"\"\"\n        #version 450\n\n        out gl_PerVertex {\n            vec4 gl_Position;\n        };\n        \n        layout(location=0) in vec3 positions;\n        layout(location=1) in vec3 v_colors;\n        \n        layout(location=0) out vec3 f_colors;\n        \n        layout(set = 0, binding = 0) uniform Locals {\n            mat4 u_Transform;\n        };\n        \n        void main() {\n            f_colors = v_colors;\n            gl_Position = u_Transform * vec4(positions, 1.0);\n        }\n    \"\"\"\n\n    const val FRAG =\n        \"\"\"\n        #version 450\n\n        layout(location = 0) in vec3 color;\n        layout(location = 0) out vec4 outColor;\n        \n        void main() {\n            outColor = vec4(color, 1.0);\n        }\n    \"\"\"\n}\n\nsuspend fun runCubeExample(window: Window) {\n    // spotless:off\n    val vertices = floatArrayOf(\n        -1f, -1f, 1f, 1f, 0f, 0f,\n        1f, -1f, 1f, 1f, 0f, 0f,\n        1f, 1f, 1f, 1f, 0f, 0f,\n        -1f, 1f, 1f, 1f, 0f, 0f,\n\n        -1f, 1f, -1f, 0f, 0f, 1f,\n        1f, 1f, -1f, 0f, 0f, 1f,\n        1f, -1f, -1f, 0f, 0f, 1f,\n        -1f, -1f, -1f, 0f, 0f, 1f,\n\n        1f, -1f, -1f, .25f, .4f, .5f,\n        1f, 1f, -1f, .25f, .4f, .5f,\n        1f, 1f, 1f, .25f, .4f, .5f,\n        1f, -1f, 1f, .25f, .4f, .5f,\n\n        -1f, -1f, 1f, .7f, .7f, .2f,\n        -1f, 1f, 1f, .7f, .7f, .2f,\n        -1f, 1f, -1f, .7f, .7f, .2f,\n        -1f, -1f, -1f, .7f, .7f, .2f,\n\n        1f, 1f, -1f, .1f, .4f, .1f,\n        -1f, 1f, -1f, .1f, .4f, .1f,\n        -1f, 1f, 1f, .1f, .4f, .1f,\n        1f, 1f, 1f, .1f, .4f, .1f,\n\n        1f, -1f, 1f, .9f, .5f, .5f,\n        -1f, -1f, 1f, .9f, .5f, .5f,\n        -1f, -1f, -1f, .9f, .5f, .5f,\n        1f, -1f, -1f, .9f, .5f, .5f\n    )\n\n    val indices = shortArrayOf(\n        0, 1, 2, 2, 3, 0,\n        4, 5, 6, 6, 7, 4,\n        8, 9, 10, 10, 11, 8,\n        12, 13, 14, 14, 15, 12,\n        16, 17, 18, 18, 19, 16,\n        20, 21, 22, 22, 23, 20\n    )\n    //spotless:on\n\n    fun getProjectionMatrix(): Matrix4 {\n        val windowSize = window.windowSize\n        val aspectRatio = windowSize.width.toFloat() / windowSize.height\n\n        return Matrix4().perspective(MathUtils.toRadians(45f), aspectRatio, 1f, 10f)\n    }\n\n    val projMatrix = getProjectionMatrix()\n    val viewMatrix = Matrix4().lookAt(Vec3(3.5f, 3.5f, 3f), Vec3(0f, 0f, 0f), Vec3.UNIT_Y)\n    val transMatrix = projMatrix.mul(viewMatrix)\n\n    val adapter = Kgpu.requestAdapterAsync(window)\n    val device = adapter.requestDeviceAsync()\n\n    val vertexShader =\n        device.createShaderModule(KShader.compile(\"vertex\", ShapeShaders.CUBE, KShaderType.VERTEX))\n    val fragShader =\n        device.createShaderModule(KShader.compile(\"frag\", ShapeShaders.FRAG, KShaderType.FRAGMENT))\n\n    val vertexBuffer =\n        BufferUtils.createFloatBuffer(device, \"vertices\", vertices, BufferUsage.VERTEX)\n    val indexBuffer = BufferUtils.createShortBuffer(device, \"indices\", indices, BufferUsage.INDEX)\n    val matrixBuffer =\n        BufferUtils.createFloatBuffer(\n            device,\n            \"transformation matrix\",\n            transMatrix.toFloats(),\n            BufferUsage.UNIFORM or BufferUsage.COPY_DST)\n\n    val descriptor =\n        BindGroupLayoutDescriptor(\n            BindGroupLayoutEntry(0, ShaderVisibility.VERTEX, BindingType.UNIFORM_BUFFER))\n    val bindGroupLayout = device.createBindGroupLayout(descriptor)\n    val pipelineLayout = device.createPipelineLayout(PipelineLayoutDescriptor(bindGroupLayout))\n    val bindGroup =\n        device.createBindGroup(\n            BindGroupDescriptor(bindGroupLayout, BindGroupEntry(0, matrixBuffer)))\n\n    val pipelineDesc =\n        createRenderPipeline(\n            pipelineLayout, vertexShader, fragShader, CullMode.BACK, IndexFormat.UINT16)\n    val pipeline = device.createRenderPipeline(pipelineDesc)\n    val swapChainDescriptor = SwapChainDescriptor(device, TextureFormat.BGRA8_UNORM)\n\n    var swapChain = window.configureSwapChain(swapChainDescriptor)\n    window.onResize =\n        { _: WindowSize ->\n            swapChain = window.configureSwapChain(swapChainDescriptor)\n        }\n\n    Kgpu.runLoop(window) {\n        val swapChainTexture = swapChain.getCurrentTextureView()\n        val cmdEncoder = device.createCommandEncoder()\n\n        val colorAttachment = RenderPassColorAttachmentDescriptor(swapChainTexture, Color.WHITE)\n        val renderPassEncoder = cmdEncoder.beginRenderPass(RenderPassDescriptor(colorAttachment))\n        renderPassEncoder.setPipeline(pipeline)\n        renderPassEncoder.setBindGroup(0, bindGroup)\n        renderPassEncoder.setVertexBuffer(0, vertexBuffer)\n        renderPassEncoder.setIndexBuffer(indexBuffer, IndexFormat.UINT16)\n        renderPassEncoder.drawIndexed(indices.size, 1)\n        renderPassEncoder.endPass()\n\n        val cmdBuffer = cmdEncoder.finish()\n        val queue = device.getDefaultQueue()\n\n        viewMatrix.rotate(0f, .01f, 0f)\n        queue.writeBuffer(matrixBuffer, getProjectionMatrix().mul(viewMatrix).toBytes())\n        queue.submit(cmdBuffer)\n        swapChain.present()\n    }\n}\n\nsuspend fun runTriangleExample(window: Window) {\n    val adapter = Kgpu.requestAdapterAsync(window)\n    val device = adapter.requestDeviceAsync()\n    val vertexShader =\n        device.createShaderModule(\n            KShader.compile(\"vertex\", ShapeShaders.TRIANGLE, KShaderType.VERTEX))\n    val fragShader =\n        device.createShaderModule(KShader.compile(\"frag\", ShapeShaders.FRAG, KShaderType.FRAGMENT))\n\n    // spotless:off\n    val vertices = floatArrayOf(\n        -.5f, .5f, 0f, 1f, 0f, 0f,\n        .5f, .5f, 0f, 0f, 1f, 0f,\n        0f, -.5f, 0f, 0f, 0f, 1f\n    )\n    //spotless:on\n    val buffer = BufferUtils.createFloatBuffer(device, \"vertices\", vertices, BufferUsage.VERTEX)\n    val pipelineLayout = device.createPipelineLayout(PipelineLayoutDescriptor())\n\n    val pipelineDesc =\n        createRenderPipeline(pipelineLayout, vertexShader, fragShader, CullMode.NONE, null)\n    val pipeline = device.createRenderPipeline(pipelineDesc)\n    val swapChainDescriptor = SwapChainDescriptor(device, TextureFormat.BGRA8_UNORM)\n\n    var swapChain = window.configureSwapChain(swapChainDescriptor)\n    window.onResize =\n        { size: WindowSize ->\n            swapChain = window.configureSwapChain(swapChainDescriptor)\n        }\n\n    Kgpu.runLoop(window) {\n        val swapChainTexture = swapChain.getCurrentTextureView()\n        val cmdEncoder = device.createCommandEncoder()\n\n        val colorAttachment = RenderPassColorAttachmentDescriptor(swapChainTexture, Color.WHITE)\n        val renderPassEncoder = cmdEncoder.beginRenderPass(RenderPassDescriptor(colorAttachment))\n        renderPassEncoder.setPipeline(pipeline)\n        renderPassEncoder.setVertexBuffer(0, buffer)\n        renderPassEncoder.draw(3, 1)\n        renderPassEncoder.endPass()\n\n        val cmdBuffer = cmdEncoder.finish()\n        val queue = device.getDefaultQueue()\n        queue.submit(cmdBuffer)\n        swapChain.present()\n    }\n}\n\nprivate fun createRenderPipeline(\n    pipelineLayout: PipelineLayout,\n    vertexModule: ShaderModule,\n    fragModule: ShaderModule,\n    cullMode: CullMode,\n    indexFormat: IndexFormat?\n): RenderPipelineDescriptor {\n    return RenderPipelineDescriptor(\n        pipelineLayout,\n        ProgrammableStageDescriptor(vertexModule, \"main\"),\n        ProgrammableStageDescriptor(fragModule, \"main\"),\n        PrimitiveTopology.TRIANGLE_LIST,\n        RasterizationStateDescriptor(FrontFace.CCW, cullMode),\n        arrayOf(\n            ColorStateDescriptor(\n                TextureFormat.BGRA8_UNORM, BlendDescriptor(), BlendDescriptor(), 0xF)),\n        Kgpu.undefined,\n        VertexStateDescriptor(\n            indexFormat,\n            VertexBufferLayoutDescriptor(\n                6 * Primitives.FLOAT_BYTES,\n                InputStepMode.VERTEX,\n                VertexAttributeDescriptor(VertexFormat.FLOAT3, 0, 0),\n                VertexAttributeDescriptor(VertexFormat.FLOAT3, 3 * Primitives.FLOAT_BYTES, 1))),\n        1,\n        0xFFFFFFFF,\n        false)\n}\n","package boid\n\nimport io.github.kgpu.*\nimport io.github.kgpu.kshader.KShader\nimport io.github.kgpu.kshader.KShaderType\nimport kotlin.random.Random\n\nconst val BOIDS_PER_GROUP = 64\n\nconst val BOID_COUNT = 1024\n\nconst val MASS_RULE_DISTANCE = .1\n\nconst val MASS_RULE_SCALE = 0.02\n\nconst val SEPARATION_RULE_DISTANCE = .025\n\nconst val SEPARATION_RULE_SCALE = .05\n\nconst val HEADING_RULE_DISTANCE = .025\n\nconst val HEADING_RULE_SCALE = .005\n\nobject Shaders {\n    val VERTEX =\n        \"\"\"\n        #version 450\n\n        out gl_PerVertex {\n            vec4 gl_Position;\n        };\n\n        layout(location=0) in vec2 vertex;\n        layout(location=1) in vec2 position;\n        layout(location=2) in vec2 velocity;\n\n        void main() {\n            float angle = atan(velocity.y, velocity.x);\n            vec2 rot_vertex = vec2(vertex.x * cos(angle) - vertex.y * sin(angle),\n                    vertex.x * sin(angle) + vertex.y * cos(angle));\n            gl_Position = vec4(position + rot_vertex, 0.0, 1.0);\n        }\n    \"\"\".trimIndent()\n\n    val FRAG =\n        \"\"\"\n        #version 450\n\n        layout(location = 0) out vec4 outColor;\n\n        void main() {\n            outColor = vec4(1.0, 1.0, 1.0, 1.0);\n        }\n\n    \"\"\".trimIndent()\n\n    val COMPUTE =\n        \"\"\"\n        #version 450\n\n        #define BOID_COUNT $BOID_COUNT\n        #define BOIDS_PER_GROUP $BOIDS_PER_GROUP\n        \n        layout(local_size_x = BOIDS_PER_GROUP) in;\n\n        struct Boid {\n            vec2 pos;\n            vec2 vel;\n        };\n        layout(std140, set = 0, binding = 0) buffer SrcBoids {\n            Boid boids[BOID_COUNT];\n        } srcBoids;\n        layout(std140, set = 0, binding = 1) buffer DstBoids {\n            Boid boids[BOID_COUNT];\n        } dstBoids;\n\n        void main() {\n            uint index = gl_GlobalInvocationID.x;\n            \n            if(index > BOID_COUNT) {\n                return;\n            }\n            \n            vec2 srcPos = srcBoids.boids[index].pos;\n            vec2 srcVel = srcBoids.boids[index].vel;\n            vec2 pos;\n            vec2 vel;\n            vec2 cMass = vec2(0, 0);\n            vec2 cVel = vec2(0, 0);\n            vec2 colVel = vec2(0, 0);\n            int cMassCount = 0;\n            int cVelCount = 0;\n            \n            for(int i = 0; i < BOID_COUNT; i++) {\n                if(i == index) {\n                    continue;\n                }\n                \n                pos = srcBoids.boids[i].pos;\n                vel = srcBoids.boids[i].vel;\n                \n                if (distance(pos, srcPos) < $MASS_RULE_DISTANCE) {\n                    cMass += pos;\n                    cMassCount++;\n                }\n                if (distance(pos, srcPos) < $SEPARATION_RULE_DISTANCE) {\n                    colVel -= (pos - srcPos);\n                }\n                if (distance(pos, srcPos) < $HEADING_RULE_DISTANCE) {\n                    cVel += vel;\n                    cVelCount++;\n                }\n            }\n            \n            if (cMassCount > 0){\n                cMass = cMass / cMassCount - srcPos;\n            }\n            if (cVelCount > 0){\n                cVel = cVel / cVelCount;\n            }\n            \n            srcVel += cMass * $MASS_RULE_SCALE + colVel * $SEPARATION_RULE_SCALE + cVel * $HEADING_RULE_SCALE;\n            srcVel = normalize(srcVel) * clamp(length(srcVel), 0.0, 0.1);\n            srcPos += srcVel / 50; \n            \n            if(srcPos.x < -1.0) {\n                srcPos.x = 1;\n            }\n            if(srcPos.x > 1.0) {\n                srcPos.x = -1;\n            }\n            if(srcPos.y < -1.0) {\n                srcPos.y = 1;\n            }\n            if(srcPos.y > 1.0) {\n                srcPos.y = -1;\n            }\n\n            dstBoids.boids[index].pos = srcPos;\n            dstBoids.boids[index].vel = srcVel;\n        }\n    \"\"\".trimIndent()\n}\n\nsuspend fun runBoidExample(window: Window) {\n    val adapter = Kgpu.requestAdapterAsync(window)\n    val device = adapter.requestDeviceAsync()\n    val vertexShader =\n        device.createShaderModule(KShader.compile(\"vertex\", Shaders.VERTEX, KShaderType.VERTEX))\n    val fragShader =\n        device.createShaderModule(KShader.compile(\"frag\", Shaders.FRAG, KShaderType.FRAGMENT))\n    val computeShader =\n        device.createShaderModule(KShader.compile(\"compute\", Shaders.COMPUTE, KShaderType.COMPUTE))\n\n    val vertices =\n        floatArrayOf(\n            -0.015f,\n            -0.0075f,\n            -0.015f,\n            .0075f,\n            0.015f,\n            0.00f,\n        )\n    val vertexBuffer =\n        BufferUtils.createFloatBuffer(device, \"vertices\", vertices, BufferUsage.VERTEX)\n    val boidData = FloatArray(BOID_COUNT * 4)\n    for (index in 0 until BOID_COUNT) {\n        boidData[index * 4] = Random.Default.nextFloat() * 2f - 1f\n        boidData[index * 4 + 1] = Random.Default.nextFloat() * 2f - 1f\n        boidData[index * 4 + 2] = (Random.Default.nextFloat() - .5f) / 10f\n        boidData[index * 4 + 3] = (Random.Default.nextFloat() - .5f) / 10f\n    }\n\n    val boidBuffers = ArrayList<Buffer>(2)\n    val boidBindGroups = ArrayList<BindGroup>(2)\n    val bindGroupLayout =\n        device.createBindGroupLayout(\n            BindGroupLayoutDescriptor(\n                BindGroupLayoutEntry(\n                    0, ShaderVisibility.COMPUTE, BindingType.STORAGE_BUFFER, false),\n                BindGroupLayoutEntry(\n                    1, ShaderVisibility.COMPUTE, BindingType.STORAGE_BUFFER, false),\n            ))\n\n    for (i in 0..1) {\n        boidBuffers.add(\n            BufferUtils.createFloatBuffer(\n                device,\n                \"Boid Buffer $i\",\n                boidData,\n                BufferUsage.VERTEX or BufferUsage.STORAGE or BufferUsage.COPY_DST))\n    }\n\n    for (i in 0..1) {\n        boidBindGroups.add(\n            device.createBindGroup(\n                BindGroupDescriptor(\n                    bindGroupLayout,\n                    BindGroupEntry(0, boidBuffers[i]),\n                    BindGroupEntry(1, boidBuffers[(i + 1) % 2]))))\n    }\n\n    val renderPipelineLayout = device.createPipelineLayout(PipelineLayoutDescriptor())\n    val computePipelineLayout =\n        device.createPipelineLayout(PipelineLayoutDescriptor(bindGroupLayout))\n\n    val computePipelineDesc =\n        ComputePipelineDescriptor(\n            computePipelineLayout, ProgrammableStageDescriptor(computeShader, \"main\"))\n    val computePipeline = device.createComputePipeline(computePipelineDesc)\n    val renderPipeline =\n        device.createRenderPipeline(\n            createRenderPipeline(renderPipelineLayout, vertexShader, fragShader))\n    val swapChainDescriptor = SwapChainDescriptor(device, TextureFormat.BGRA8_UNORM)\n\n    var swapChain = window.configureSwapChain(swapChainDescriptor)\n    window.onResize =\n        { size: WindowSize ->\n            swapChain = window.configureSwapChain(swapChainDescriptor)\n        }\n\n    var frameCount = 0\n    Kgpu.runLoop(window) {\n        val cmdEncoder = device.createCommandEncoder()\n        val computePass = cmdEncoder.beginComputePass()\n\n        computePass.setPipeline(computePipeline)\n        computePass.setBindGroup(0, boidBindGroups[frameCount % 2])\n        computePass.dispatch(BOID_COUNT / BOIDS_PER_GROUP, 1)\n        computePass.endPass()\n\n        val swapChainTexture = swapChain.getCurrentTextureView()\n        val colorAttachment = RenderPassColorAttachmentDescriptor(swapChainTexture, Color.BLACK)\n        val renderPassEncoder = cmdEncoder.beginRenderPass(RenderPassDescriptor(colorAttachment))\n        renderPassEncoder.setPipeline(renderPipeline)\n        renderPassEncoder.setVertexBuffer(0, vertexBuffer)\n        renderPassEncoder.setVertexBuffer(1, boidBuffers[++frameCount % 2])\n        renderPassEncoder.draw(3, BOID_COUNT)\n        renderPassEncoder.endPass()\n\n        val cmdBuffer = cmdEncoder.finish()\n        val queue = device.getDefaultQueue()\n        queue.submit(cmdBuffer)\n        swapChain.present()\n    }\n}\n\nprivate fun createRenderPipeline(\n    pipelineLayout: PipelineLayout,\n    vertexModule: ShaderModule,\n    fragModule: ShaderModule,\n): RenderPipelineDescriptor {\n\n    return RenderPipelineDescriptor(\n        pipelineLayout,\n        ProgrammableStageDescriptor(vertexModule, \"main\"),\n        ProgrammableStageDescriptor(fragModule, \"main\"),\n        PrimitiveTopology.TRIANGLE_LIST,\n        RasterizationStateDescriptor(FrontFace.CCW, CullMode.NONE),\n        arrayOf(\n            ColorStateDescriptor(\n                TextureFormat.BGRA8_UNORM, BlendDescriptor(), BlendDescriptor(), 0xF)),\n        Kgpu.undefined,\n        VertexStateDescriptor(\n            null,\n            VertexBufferLayoutDescriptor(\n                2 * Primitives.FLOAT_BYTES,\n                InputStepMode.VERTEX,\n                VertexAttributeDescriptor(VertexFormat.FLOAT2, 0, 0),\n            ),\n            VertexBufferLayoutDescriptor(\n                4 * Primitives.FLOAT_BYTES,\n                InputStepMode.INSTANCE,\n                VertexAttributeDescriptor(VertexFormat.FLOAT2, 0, 1),\n                VertexAttributeDescriptor(VertexFormat.FLOAT2, 8, 2),\n            ),\n        ),\n        1,\n        0xFFFFFFFF,\n        false)\n}\n","package compute\n\nimport flushExampleStatus\nimport io.github.kgpu.*\nimport io.github.kgpu.kshader.*\nimport kotlin.math.abs\nimport kotlin.random.Random\nimport setExampleStatus\nimport timeExecution\n\nprivate const val LOCAL_SIZE = 8\n\nprivate const val MATRIX_SIZE = 512\n\nprivate val SHADER_SOURCE =\n    \"\"\"\n#version 450\n\nlayout(std430, set = 0, binding = 0) readonly buffer MatrixA {\n    float matrixA[];\n};\nlayout(std430, set = 0, binding = 1) readonly buffer MatrixB {\n    float matrixB[];\n};\nlayout(set = 0, binding = 2) buffer ResultMatrix {\n    float resultMatrix[];\n};\nlayout(local_size_x = ${LOCAL_SIZE}, local_size_y = ${LOCAL_SIZE}) in;\n\nvoid main() {\n    uvec2 resultCell = gl_GlobalInvocationID.xy;\n    uint resultIndex = resultCell.y + resultCell.x * ${MATRIX_SIZE};\n\n    float result = 0.0f;\n    for (uint i = 0; i < ${MATRIX_SIZE}; i++) {\n        uint aCell = i + resultCell.x * ${MATRIX_SIZE};\n        uint bCell = resultCell.y + i * ${MATRIX_SIZE};\n        result += matrixA[aCell] * matrixB[bCell];\n    }\n    resultMatrix[resultIndex] = result;\n}\n\"\"\"\n\nprivate data class ComputationResult(val time: Long, val result: FloatArray)\n\nsuspend fun runComputeCompareExample() {\n    setExampleStatus(\"MatrixSize\", \"$MATRIX_SIZE\")\n    setExampleStatus(\"Status\", \"Generating matrices\")\n\n    val matrixA = generateMatrix(MATRIX_SIZE * MATRIX_SIZE)\n    val matrixB = generateMatrix(MATRIX_SIZE * MATRIX_SIZE)\n\n    setExampleStatus(\"Status\", \"Starting CPU calculation\")\n\n    val cpuResult = computeCPU(matrixA, matrixB)\n\n    setExampleStatus(\"CPU Time\", \"${cpuResult.time} ms\")\n    setExampleStatus(\"Status\", \"Setting up GPU\")\n\n    val gpuResult = computeGPU(matrixA, matrixB)\n    setExampleStatus(\"GPU Time\", \"${gpuResult.time} ms\")\n\n    setExampleStatus(\"Status\", \"Checking correctness\")\n    compareResults(cpuResult.result, gpuResult.result)\n\n    setExampleStatus(\"Status\", \"Test Completed.\")\n}\n\nprivate suspend fun compareResults(cpuMatrix: FloatArray, gpuMatrix: FloatArray) {\n    if (cpuMatrix.size != gpuMatrix.size) {\n        setExampleStatus(\"Result\", \"ERROR! Matrices don't have the same size!!!\")\n        return\n    }\n\n    var cpuTotal = cpuMatrix.sum()\n    val gpuTotal = gpuMatrix.sum()\n\n    println(\"CPU: ${cpuTotal}\")\n    println(\"GPU: ${gpuTotal}\")\n    setExampleStatus(\"Result\", \"Matrix Difference = ${abs(cpuTotal - gpuTotal)}\")\n}\n\nprivate suspend fun computeCPU(matrixA: FloatArray, matrixB: FloatArray): ComputationResult {\n    val output = FloatArray(MATRIX_SIZE * MATRIX_SIZE)\n\n    val time =\n        timeExecution {\n            for (resultX in 0 until MATRIX_SIZE) {\n                for (resultY in 0 until MATRIX_SIZE) {\n                    var sum = 0f\n\n                    for (i in 0 until MATRIX_SIZE) {\n                        val indexA = i + (resultX * MATRIX_SIZE)\n                        val indexB = resultY + (i * MATRIX_SIZE)\n\n                        sum += matrixA[indexA] * matrixB[indexB]\n                    }\n\n                    val resultIndex = resultY + (resultX * MATRIX_SIZE)\n                    output[resultIndex] = sum\n                }\n\n                if (resultX % 32 == 0) {\n                    setExampleStatus(\"Status\", \"Row $resultX / $MATRIX_SIZE\")\n                    flushExampleStatus()\n                }\n            }\n        }\n\n    setExampleStatus(\"Status\", \"Finished CPU Calculation\")\n\n    return ComputationResult(time, output)\n}\n\nprivate suspend fun computeGPU(matrixA: FloatArray, matrixB: FloatArray): ComputationResult {\n    val adapter = Kgpu.requestAdapterAsync()\n    val device = adapter.requestDeviceAsync()\n    val bufferA =\n        BufferUtils.createFloatBuffer(\n            device,\n            \"matrix A buffer\",\n            matrixA,\n            BufferUsage.STORAGE or BufferUsage.COPY_DST or BufferUsage.COPY_SRC)\n    val bufferB =\n        BufferUtils.createFloatBuffer(\n            device,\n            \"matrix B buffer\",\n            matrixB,\n            BufferUsage.STORAGE or BufferUsage.COPY_DST or BufferUsage.COPY_SRC)\n    val resultBuffer =\n        device.createBuffer(\n            BufferDescriptor(\n                \"result buffer\",\n                Primitives.FLOAT_BYTES * MATRIX_SIZE * MATRIX_SIZE,\n                BufferUsage.STORAGE or BufferUsage.COPY_DST or BufferUsage.COPY_SRC,\n                false))\n\n    val bindGroupLayout =\n        device.createBindGroupLayout(\n            BindGroupLayoutDescriptor(\n                BindGroupLayoutEntry(0, ShaderVisibility.COMPUTE, BindingType.STORAGE_BUFFER),\n                BindGroupLayoutEntry(1, ShaderVisibility.COMPUTE, BindingType.STORAGE_BUFFER),\n                BindGroupLayoutEntry(2, ShaderVisibility.COMPUTE, BindingType.STORAGE_BUFFER)))\n\n    val bindGroup =\n        device.createBindGroup(\n            BindGroupDescriptor(\n                bindGroupLayout,\n                BindGroupEntry(0, bufferA),\n                BindGroupEntry(1, bufferB),\n                BindGroupEntry(2, resultBuffer)))\n\n    val pipelineLayout = device.createPipelineLayout(PipelineLayoutDescriptor(bindGroupLayout))\n    val shader =\n        device.createShaderModule(KShader.compile(\"shader\", SHADER_SOURCE, KShaderType.COMPUTE))\n    val computePipeline =\n        device.createComputePipeline(\n            ComputePipelineDescriptor(pipelineLayout, ProgrammableStageDescriptor(shader, \"main\")))\n    val cmdEncoder = device.createCommandEncoder()\n    val computePass = cmdEncoder.beginComputePass()\n\n    computePass.setPipeline(computePipeline)\n    computePass.setBindGroup(0, bindGroup)\n    computePass.dispatch(MATRIX_SIZE / LOCAL_SIZE, MATRIX_SIZE / LOCAL_SIZE)\n    computePass.endPass()\n\n    val readBuffer =\n        device.createBuffer(\n            BufferDescriptor(\n                \"read buffer\",\n                Primitives.FLOAT_BYTES * MATRIX_SIZE * MATRIX_SIZE,\n                BufferUsage.COPY_DST or BufferUsage.MAP_READ,\n                false))\n\n    setExampleStatus(\"Status\", \"Starting GPU calculation\")\n    flushExampleStatus()\n    var times: FloatArray? = null\n    val computationTime =\n        timeExecution {\n            cmdEncoder.copyBufferToBuffer(resultBuffer, readBuffer)\n            device.getDefaultQueue().submit(cmdEncoder.finish())\n\n            times = ByteUtils.toFloatArray(readBuffer.mapReadAsync(device).getBytes())\n        }\n\n    setExampleStatus(\"Status\", \"Finished GPU Calculation\")\n\n    return ComputationResult(computationTime, times!!)\n}\n\nfun generateMatrix(size: Int): FloatArray {\n    return FloatArray(size) { (Random.nextFloat() - .5f) * 10f }\n}\n","package msaa\n\nimport io.github.kgpu.*\nimport io.github.kgpu.kshader.*\n\nconst val SAMPLE_COUNT = 4\n\nsuspend fun runMsaaTriangle(window: Window) {\n    val adapter = Kgpu.requestAdapterAsync(window)\n    val device = adapter.requestDeviceAsync()\n    val vertexShader =\n        device.createShaderModule(\n            KShader.compile(\"vertex\", ShapeShaders.TRIANGLE, KShaderType.VERTEX))\n    val fragShader =\n        device.createShaderModule(KShader.compile(\"frag\", ShapeShaders.FRAG, KShaderType.FRAGMENT))\n\n    // spotless:off\n    val vertices = floatArrayOf(\n        -.5f, .5f, 0f, 1f, 0f, 0f,\n        .5f, .5f, 0f, 0f, 1f, 0f,\n        0f, -.5f, 0f, 0f, 0f, 1f\n    )\n    //spotless:on\n    val buffer = BufferUtils.createFloatBuffer(device, \"vertices\", vertices, BufferUsage.VERTEX)\n    val pipelineLayout = device.createPipelineLayout(PipelineLayoutDescriptor())\n\n    val pipelineDesc = createRenderPipeline(pipelineLayout, vertexShader, fragShader, CullMode.NONE)\n    val pipeline = device.createRenderPipeline(pipelineDesc)\n    val swapChainDescriptor = SwapChainDescriptor(device, TextureFormat.BGRA8_UNORM)\n\n    var swapChain = window.configureSwapChain(swapChainDescriptor)\n    var texture = createAttachmentTexture(device, window.windowSize)\n    var textureView = texture.createView()\n    window.onResize =\n        { size: WindowSize ->\n            texture.destroy()\n            textureView.destroy()\n            texture = createAttachmentTexture(device, size)\n            textureView = texture.createView()\n            swapChain = window.configureSwapChain(swapChainDescriptor)\n        }\n\n    Kgpu.runLoop(window) {\n        val swapChainTexture = swapChain.getCurrentTextureView()\n        val cmdEncoder = device.createCommandEncoder()\n\n        val colorAttachment =\n            RenderPassColorAttachmentDescriptor(textureView, Color.WHITE, swapChainTexture)\n        val renderPassEncoder = cmdEncoder.beginRenderPass(RenderPassDescriptor(colorAttachment))\n        renderPassEncoder.setPipeline(pipeline)\n        renderPassEncoder.setVertexBuffer(0, buffer)\n        renderPassEncoder.draw(3, 1)\n        renderPassEncoder.endPass()\n\n        val cmdBuffer = cmdEncoder.finish()\n        val queue = device.getDefaultQueue()\n        queue.submit(cmdBuffer)\n        swapChain.present()\n    }\n}\n\nprivate fun createAttachmentTexture(device: Device, windowSize: WindowSize): Texture {\n    return device.createTexture(\n        TextureDescriptor(\n            Extent3D(windowSize.width.toLong(), windowSize.height.toLong(), 1),\n            1,\n            SAMPLE_COUNT,\n            TextureDimension.D2,\n            TextureFormat.BGRA8_UNORM,\n            TextureUsage.OUTPUT_ATTACHMENT))\n}\n\nprivate fun createRenderPipeline(\n    pipelineLayout: PipelineLayout,\n    vertexModule: ShaderModule,\n    fragModule: ShaderModule,\n    cullMode: CullMode\n): RenderPipelineDescriptor {\n    return RenderPipelineDescriptor(\n        pipelineLayout,\n        ProgrammableStageDescriptor(vertexModule, \"main\"),\n        ProgrammableStageDescriptor(fragModule, \"main\"),\n        PrimitiveTopology.TRIANGLE_LIST,\n        RasterizationStateDescriptor(FrontFace.CCW, cullMode),\n        arrayOf(\n            ColorStateDescriptor(\n                TextureFormat.BGRA8_UNORM, BlendDescriptor(), BlendDescriptor(), 0xF)),\n        Kgpu.undefined,\n        VertexStateDescriptor(\n            null,\n            VertexBufferLayoutDescriptor(\n                6 * Primitives.FLOAT_BYTES,\n                InputStepMode.VERTEX,\n                VertexAttributeDescriptor(VertexFormat.FLOAT3, 0, 0),\n                VertexAttributeDescriptor(VertexFormat.FLOAT3, 3 * Primitives.FLOAT_BYTES, 1))),\n        SAMPLE_COUNT,\n        0xFFFFFFFF,\n        false)\n}\n","import com.soywiz.korim.bitmap.Bitmap\nimport com.soywiz.korim.color.ColorFormat\nimport com.soywiz.korim.format.readBitmap\nimport com.soywiz.korio.file.std.resourcesVfs\nimport io.github.kgpu.TextureFormat\n\nexpect fun setExampleStatus(id: String, msg: String)\n\nprivate val IMAGE_FORMAT = ColorFormat.Mixin(32, 0, 8, 8, 8, 16, 8, 24, 8)\n\nval TEXTURE_FORMAT = TextureFormat.RGBA8_UNORM_SRGB\n\nsuspend fun loadImage(path: String): Pair<Bitmap, ByteArray> {\n    val image = resourcesVfs[path].readBitmap()\n\n    return Pair(image, image.toBMP32().extractBytes(IMAGE_FORMAT))\n}\n\nexpect suspend fun flushExampleStatus()\n\nexpect suspend fun timeExecution(func: suspend () -> Unit): Long\n","import io.github.kgpu.*\nimport io.github.kgpu.kcgmath.Matrix4\nimport io.github.kgpu.kshader.*\n\nprivate object TextureShaderSource {\n    val vertex =\n        \"\"\"\n         #version 450\n\n        layout(location=0) in vec3 a_position;\n        layout(location=1) in vec2 a_tex_coords;\n\n        layout(location=0) out vec2 v_tex_coords;\n        \n        layout(set = 0, binding = 2) uniform Locals {\n            mat4 u_Transform;\n        };\n\n        void main() {\n            v_tex_coords = a_tex_coords;\n            gl_Position = u_Transform * vec4(a_position, 1.0);\n        }       \n    \"\"\".trimIndent()\n\n    val frag =\n        \"\"\"\n        #version 450\n\n        layout(location=0) in vec2 v_tex_coords;\n        layout(location=0) out vec4 f_color;\n\n        layout(set = 0, binding = 0) uniform texture2D t_diffuse;\n        layout(set = 0, binding = 1) uniform sampler s_diffuse;\n\n        void main() {\n            f_color = texture(sampler2D(t_diffuse, s_diffuse), v_tex_coords);\n        }\n    \"\"\".trimIndent()\n}\n\nsuspend fun runTextureExample(window: Window) {\n    fun createTransformationMatrix(): Matrix4 {\n        val width = window.windowSize.width / 2f\n        val height = window.windowSize.height / 2f\n\n        return Matrix4().ortho(-width, width, -height, height, 10f, -10f)\n    }\n\n    // spotless:off\n    val vertices = floatArrayOf(\n        -128f, -128f, 1f, 0f, 0f,\n        -128f, 128f, 1f, 0f, 1f,\n        128f, 128f, 1f, 1f, 1f,\n        128f, -128f, 1f, 1f, 0f\n    )\n    val indices = shortArrayOf(0, 1, 2, 0, 2, 3)\n    //spotless:on\n\n    val (image, imageBytes) = loadImage(\"earth2d.png\")\n\n    val adapter = Kgpu.requestAdapterAsync(window)\n    val device = adapter.requestDeviceAsync()\n\n    val vertexBuffer =\n        BufferUtils.createFloatBuffer(device, \"vertices\", vertices, BufferUsage.VERTEX)\n    val indexBuffer = BufferUtils.createShortBuffer(device, \"indices\", indices, BufferUsage.INDEX)\n    val matrixBuffer =\n        BufferUtils.createBufferFromData(\n            device,\n            \"transformation matrix\",\n            createTransformationMatrix().toBytes(),\n            BufferUsage.UNIFORM or BufferUsage.COPY_DST)\n    val vertexShader =\n        device.createShaderModule(\n            KShader.compile(\"vertex\", TextureShaderSource.vertex, KShaderType.VERTEX))\n    val fragShader =\n        device.createShaderModule(\n            KShader.compile(\"frag\", TextureShaderSource.frag, KShaderType.FRAGMENT))\n\n    val textureDesc =\n        TextureDescriptor(\n            Extent3D(image.width.toLong(), image.height.toLong(), 1),\n            1,\n            1,\n            TextureDimension.D2,\n            TEXTURE_FORMAT,\n            TextureUsage.COPY_DST or TextureUsage.SAMPLED)\n    val texture = device.createTexture(textureDesc)\n    val textureBuffer =\n        BufferUtils.createBufferFromData(device, \"texture temp\", imageBytes, BufferUsage.COPY_SRC)\n\n    var cmdEncoder = device.createCommandEncoder()\n    cmdEncoder.copyBufferToTexture(\n        BufferCopyView(textureBuffer, image.width * 4, image.height),\n        TextureCopyView(texture),\n        Extent3D(image.width.toLong(), image.height.toLong(), 1))\n    device.getDefaultQueue().submit(cmdEncoder.finish())\n    textureBuffer.destroy()\n\n    val sampler = device.createSampler(SamplerDescriptor())\n    val textureView = texture.createView()\n\n    val bindGroupLayout =\n        device.createBindGroupLayout(\n            BindGroupLayoutDescriptor(\n                BindGroupLayoutEntry(\n                    0,\n                    ShaderVisibility.FRAGMENT,\n                    BindingType.SAMPLED_TEXTURE,\n                    false,\n                    TextureViewDimension.D2,\n                    TextureComponentType.FLOAT),\n                BindGroupLayoutEntry(1, ShaderVisibility.FRAGMENT, BindingType.SAMPLER, false),\n                BindGroupLayoutEntry(2, ShaderVisibility.VERTEX, BindingType.UNIFORM_BUFFER)))\n    val bindGroup =\n        device.createBindGroup(\n            BindGroupDescriptor(\n                bindGroupLayout,\n                BindGroupEntry(0, textureView),\n                BindGroupEntry(1, sampler),\n                BindGroupEntry(2, matrixBuffer)))\n\n    val pipelineLayout = device.createPipelineLayout(PipelineLayoutDescriptor(bindGroupLayout))\n    val pipelineDesc = createRenderPipeline(pipelineLayout, vertexShader, fragShader)\n    val pipeline = device.createRenderPipeline(pipelineDesc)\n    val swapChainDescriptor = SwapChainDescriptor(device, TextureFormat.BGRA8_UNORM)\n\n    var swapChain = window.configureSwapChain(swapChainDescriptor)\n    window.onResize = { size -> swapChain = window.configureSwapChain(swapChainDescriptor) }\n\n    Kgpu.runLoop(window) {\n        val swapChainTexture = swapChain.getCurrentTextureView()\n        cmdEncoder = device.createCommandEncoder()\n\n        val colorAttachment = RenderPassColorAttachmentDescriptor(swapChainTexture, Color.WHITE)\n        val renderPassEncoder = cmdEncoder.beginRenderPass(RenderPassDescriptor(colorAttachment))\n        renderPassEncoder.setPipeline(pipeline)\n        renderPassEncoder.setBindGroup(0, bindGroup)\n        renderPassEncoder.setVertexBuffer(0, vertexBuffer)\n        renderPassEncoder.setIndexBuffer(indexBuffer, IndexFormat.UINT16)\n        renderPassEncoder.drawIndexed(indices.size, 1)\n        renderPassEncoder.endPass()\n\n        val cmdBuffer = cmdEncoder.finish()\n        val queue = device.getDefaultQueue()\n        queue.writeBuffer(matrixBuffer, createTransformationMatrix().toBytes())\n        queue.submit(cmdBuffer)\n        swapChain.present()\n    }\n}\n\nprivate fun createRenderPipeline(\n    pipelineLayout: PipelineLayout, vertexModule: ShaderModule, fragModule: ShaderModule\n): RenderPipelineDescriptor {\n    return RenderPipelineDescriptor(\n        pipelineLayout,\n        ProgrammableStageDescriptor(vertexModule, \"main\"),\n        ProgrammableStageDescriptor(fragModule, \"main\"),\n        PrimitiveTopology.TRIANGLE_LIST,\n        RasterizationStateDescriptor(FrontFace.CCW, CullMode.NONE),\n        arrayOf(\n            ColorStateDescriptor(\n                TextureFormat.BGRA8_UNORM,\n                BlendDescriptor(BlendFactor.SRC_ALPHA, BlendFactor.ONE_MINUS_SRC_ALPHA),\n                BlendDescriptor(BlendFactor.SRC_ALPHA, BlendFactor.ONE_MINUS_SRC_ALPHA),\n                0xF)),\n        Kgpu.undefined,\n        VertexStateDescriptor(\n            IndexFormat.UINT16,\n            VertexBufferLayoutDescriptor(\n                5 * Primitives.FLOAT_BYTES,\n                InputStepMode.VERTEX,\n                VertexAttributeDescriptor(VertexFormat.FLOAT3, 0, 0),\n                VertexAttributeDescriptor(VertexFormat.FLOAT2, 3 * Primitives.FLOAT_BYTES, 1))),\n        1,\n        0xFFFFFFFF,\n        false)\n}\n","import io.github.kgpu.*\n\nfun runWindowEventExample(window: Window) {\n    setExampleStatus(\"Last Event\", \"None\")\n    setExampleStatus(\"Mouse Pos\", \"(0, 0)\")\n    setExampleStatus(\"Last Typed\", \"None\")\n\n    window.onKeyDown =\n        { event: KeyEvent ->\n            setExampleStatus(\"Last Event\", \"Key Pressed ${event.key}\")\n        }\n\n    window.onKeyUp =\n        { event: KeyEvent ->\n            setExampleStatus(\"Last Event\", \"Key Released ${event.key}\")\n        }\n\n    window.onMouseClick =\n        { event: ClickEvent ->\n            setExampleStatus(\"Last Event\", \"Mouse Click ${event.button}\")\n        }\n\n    window.onMouseRelease =\n        { event: ClickEvent ->\n            setExampleStatus(\"Last Event\", \"Mouse Released ${event.button}\")\n        }\n\n    window.onMouseMove = { x: Float, y: Float -> setExampleStatus(\"Mouse Pos\", \"(${x}, ${y})\") }\n\n    window.onKeyTyped =\n        { c: Char ->\n            println(\"type\")\n            setExampleStatus(\"Last Typed\", c.toString())\n        }\n\n    Kgpu.runLoop(window) {}\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@PublishedApi\nexternal internal fun <T> Array(size: Int): Array<T>\n\n@JsName(\"newArray\")\nfun <T> newArray(size: Int, initValue: T) = fillArrayVal(Array<T>(size), initValue)\n\n@JsName(\"newArrayF\")\ninline fun <T> arrayWithFun(size: Int, init: (Int) -> T) = fillArrayFun(Array<T>(size), init)\n\n@JsName(\"fillArray\")\ninline fun <T> fillArrayFun(array: Array<T>, init: (Int) -> T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = init(i)\n    }\n    return array\n}\n\n@JsName(\"booleanArray\")\nfun booleanArray(size: Int, init: dynamic): Array<Boolean> {\n    val result: dynamic = Array<Boolean>(size)\n    result.`$type$` = \"BooleanArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, false)\n        false -> result\n        else -> fillArrayFun<Boolean>(result, init)\n    }\n}\n\n@JsName(\"booleanArrayF\")\ninline fun booleanArrayWithFun(size: Int, init: (Int) -> Boolean): Array<Boolean> = fillArrayFun(booleanArray(size, false), init)\n\n@JsName(\"charArray\")\n@Suppress(\"UNUSED_PARAMETER\")\nfun charArray(size: Int, init: dynamic): Array<Char> {\n    val result = js(\"new Uint16Array(size)\")\n    result.`$type$` = \"CharArray\"\n    return when (init) {\n        null, true, false -> result // For consistency\n        else -> fillArrayFun<Char>(result, init)\n    }\n}\n\n@JsName(\"charArrayF\")\ninline fun charArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = charArray(size, null)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"untypedCharArrayF\")\ninline fun untypedCharArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = Array<Char>(size)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"longArray\")\nfun longArray(size: Int, init: dynamic): Array<Long> {\n    val result: dynamic = Array<Long>(size)\n    result.`$type$` = \"LongArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, 0L)\n        false -> result\n        else -> fillArrayFun<Long>(result, init)\n    }\n}\n\n@JsName(\"longArrayF\")\ninline fun longArrayWithFun(size: Int, init: (Int) -> Long): Array<Long> = fillArrayFun(longArray(size, false), init)\n\nprivate fun <T> fillArrayVal(array: Array<T>, initValue: T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = initValue\n    }\n    return array\n}","import boid.runBoidExample\nimport compute.runComputeCompareExample\nimport io.github.kgpu.Window\nimport kotlin.js.Date\nimport kotlin.js.Promise\nimport kotlinx.browser.document\nimport kotlinx.browser.window\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.await\nimport kotlinx.coroutines.launch\nimport msaa.runMsaaTriangle\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.url.URL\n\nfun main() {\n    io.github.kgpu.kshader.KShader.init()\n\n    val kgpuWindow = Window()\n    kgpuWindow.setTitle(\"Kgpu - Web\")\n\n    val params = URL(window.location.href).searchParams\n\n    GlobalScope.launch {\n        when (params.get(\"example\")) {\n            \"1\" -> runCubeExample(kgpuWindow)\n            \"2\" -> runTextureExample(kgpuWindow)\n            \"3\" -> runEarthExample(kgpuWindow)\n            \"4\" -> {\n                hideCanvas()\n                runComputeExample()\n            }\n            \"5\" -> runMsaaTriangle(kgpuWindow)\n            \"6\" -> {\n                hideCanvas()\n                runComputeCompareExample()\n            }\n            \"7\" -> runWindowEventExample(kgpuWindow)\n            \"8\" -> runBoidExample(kgpuWindow)\n            else -> runTriangleExample(kgpuWindow)\n        }\n    }\n}\n\nfun hideCanvas() {\n    document.getElementById(\"kgpuCanvas\")?.setAttribute(\"hidden\", \"true\")\n}\n\nactual fun setExampleStatus(id: String, msg: String) {\n    val element = document.getElementById(id) ?: createStatusElement(id)\n\n    element.innerHTML = \"$id: $msg\"\n}\n\nfun createStatusElement(id: String): Element {\n    val element = document.createElement(\"h3\") as HTMLElement\n    element.id = id\n    element.style.fontFamily = \"monospace\"\n    document.getElementById(\"infoFields\")?.append(element)\n\n    return element\n}\n\nactual suspend fun timeExecution(func: suspend () -> Unit): Long {\n    val start = Date().getTime()\n    func()\n    return (Date().getTime() - start).toLong()\n}\n\nactual suspend fun flushExampleStatus() {\n    val promise: Promise<Unit> = Promise { resolve, reject -> window.setTimeout(resolve, 0) }\n\n    promise.await()\n}\n","package io.github.kgpu\n\nexpect object Kgpu {\n    val backendName: String\n\n    /**\n     * A cross platform version of undefined. On the JVM, this value is equal to null, and on the\n     * web, this is equal to undefined\n     */\n    val undefined: Nothing?\n\n    /**\n     * Runs a loop while the window is open. This loop will automatically update the window while\n     * the loop is running. The loop will stop when the window is requested to be closed.\n     */\n    fun runLoop(window: Window, func: () -> Unit)\n\n    /**\n     * Requests an adapter\n     *\n     * @param window the window to create the adapter for. This parameter is only needed for\n     * graphics applications\n     */\n    suspend fun requestAdapterAsync(window: Window? = null): Adapter\n}\n\nobject Primitives {\n    const val FLOAT_BYTES: Long = 4\n    const val INT_BYTES: Long = 4\n}\n\nexpect class Device {\n\n    fun createShaderModule(data: ByteArray): ShaderModule\n\n    fun createRenderPipeline(desc: RenderPipelineDescriptor): RenderPipeline\n\n    fun createPipelineLayout(desc: PipelineLayoutDescriptor): PipelineLayout\n\n    fun createTexture(desc: TextureDescriptor): Texture\n\n    fun createCommandEncoder(): CommandEncoder\n\n    fun getDefaultQueue(): Queue\n\n    fun createBuffer(desc: BufferDescriptor): Buffer\n\n    fun createBindGroupLayout(desc: BindGroupLayoutDescriptor): BindGroupLayout\n\n    @Deprecated(\n        message =\n            \"No longer part of the spec, but replacement has not been implemented in browsers!\")\n    fun createBufferWithData(desc: BufferDescriptor, data: ByteArray): Buffer\n\n    fun createBindGroup(desc: BindGroupDescriptor): BindGroup\n\n    fun createSampler(desc: SamplerDescriptor): Sampler\n\n    fun createComputePipeline(desc: ComputePipelineDescriptor): ComputePipeline\n}\n\nexpect class Adapter {\n\n    suspend fun requestDeviceAsync(): Device\n}\n\nexpect enum class PowerPreference {\n    LOW_POWER,\n    HIGH_PERFORMANCE\n}\n\nclass Color(val r: Double, val g: Double, val b: Double, val a: Double) {\n\n    companion object {\n        val BLACK = Color(0.0, 0.0, 0.0, 1.0)\n        val WHITE = Color(1.0, 1.0, 1.0, 1.0)\n        val RED = Color(1.0, 0.0, 0.0, 1.0)\n        val GREEN = Color(0.0, 1.0, 0.0, 1.0)\n        val BLUE = Color(0.0, 0.0, 1.0, 1.0)\n        val CLEAR = Color(0.0, 0.0, 0.0, 0.0)\n    }\n}\n\nexpect class CommandEncoder {\n\n    fun beginRenderPass(desc: RenderPassDescriptor): RenderPassEncoder\n\n    fun finish(): CommandBuffer\n\n    fun copyBufferToTexture(\n        source: BufferCopyView, destination: TextureCopyView, copySize: Extent3D\n    )\n\n    fun beginComputePass(): ComputePassEncoder\n\n    fun copyBufferToBuffer(\n        source: Buffer,\n        destination: Buffer,\n        size: Long = destination.size,\n        sourceOffset: Int = 0,\n        destinationOffset: Int = 0\n    )\n\n    fun copyTextureToBuffer(source: TextureCopyView, dest: BufferCopyView, size: Extent3D)\n}\n\nexpect class RenderPassEncoder {\n\n    fun setPipeline(pipeline: RenderPipeline)\n\n    fun draw(vertexCount: Int, instanceCount: Int, firstVertex: Int = 0, firstInstance: Int = 0)\n\n    fun endPass()\n\n    fun setVertexBuffer(slot: Long, buffer: Buffer, offset: Long = 0, size: Long = buffer.size)\n\n    fun drawIndexed(\n        indexCount: Int,\n        instanceCount: Int,\n        firstVertex: Int = 0,\n        baseVertex: Int = 0,\n        firstInstance: Int = 0\n    )\n\n    fun setIndexBuffer(\n        buffer: Buffer, indexFormat: IndexFormat, offset: Long = 0, size: Long = buffer.size\n    )\n\n    fun setBindGroup(index: Int, bindGroup: BindGroup)\n}\n\nexpect class ComputePassEncoder {\n\n    fun setPipeline(pipeline: ComputePipeline)\n\n    fun setBindGroup(index: Int, bindGroup: BindGroup)\n\n    fun dispatch(x: Int, y: Int = 1, z: Int = 1)\n\n    fun endPass()\n}\n\nexpect class Queue {\n\n    fun submit(vararg cmdBuffers: CommandBuffer)\n\n    fun writeBuffer(\n        buffer: Buffer,\n        data: ByteArray,\n        offset: Long = 0,\n        dataOffset: Long = 0,\n        size: Long = data.size.toLong()\n    )\n}\n\n/**\n * Represents something that is a binding resource. Examples include buffer, samplers, and texture\n * views.\n *\n * __See:__ [Binding Resource Spec](https://gpuweb.github.io/gpuweb/#typedefdef-gpubindingresource)\n */\nexpect interface IntoBindingResource\n\nexpect class ShaderModule\n\nexpect class ProgrammableStageDescriptor(module: ShaderModule, entryPoint: String)\n\nexpect class PipelineLayout\n\nexpect class BindGroupLayout\n\nexpect class PipelineLayoutDescriptor(vararg bindGroupLayouts: BindGroupLayout)\n\nexpect class RenderPipeline\n\nexpect class ComputePipeline\n\nexpect class CommandBuffer\n\nexpect class BindGroup\n\nexpect class Sampler : IntoBindingResource\n\nexpect class Extent3D(width: Long, height: Long, depth: Long)\n\nexpect class Origin3D(x: Long, y: Long, z: Long)\n\n/**\n * The usages determine what kind of memory the texture is allocated from and what actions the\n * texture can partake in.\n */\nobject TextureUsage {\n    /** Allows a texture to be the source in a copy operation */\n    const val COPY_SRC: Long = 1\n\n    /**\n     * Allows a texture to the destination of a copy operation such as\n     * [CommandEncoder.copyBufferToTexture]\n     */\n    const val COPY_DST: Long = 2\n\n    /** Allows a texture to be a sampled texture in a bind group */\n    const val SAMPLED: Long = 4\n\n    /** Allows a texture to be a storage texture in a bind group */\n    const val STORAGE: Long = 8\n\n    /** Allows a texture to be a output attachment of a render pass */\n    const val OUTPUT_ATTACHMENT: Long = 16\n}\n\nexpect class RenderPassColorAttachmentDescriptor(\n    attachment: TextureView,\n    clearColor: Color?,\n    resolveTarget: TextureView? = null,\n    storeOp: StoreOp = StoreOp.STORE)\n\nexpect class RenderPassDescriptor(vararg colorAttachments: RenderPassColorAttachmentDescriptor)\n\nexpect class SwapChain {\n\n    fun getCurrentTextureView(): TextureView\n\n    fun present()\n\n    @Deprecated(\"Old API. Instead use Window#onResize\")\n    fun isOutOfDate(): Boolean\n}\n\nexpect class BindGroupEntry(binding: Long, resource: IntoBindingResource)\n\nexpect class BindGroupDescriptor(layout: BindGroupLayout, vararg entries: BindGroupEntry)\n\nobject ShaderVisibility {\n\n    const val VERTEX: Long = 1\n    const val FRAGMENT: Long = 2\n    const val COMPUTE: Long = 4\n}\n\nexpect class BindGroupLayoutEntry(\n    binding: Long,\n    visibility: Long,\n    type: BindingType,\n    hasDynamicOffset: Boolean,\n    viewDimension: TextureViewDimension?,\n    textureComponentType: TextureComponentType?,\n    multisampled: Boolean,\n    storageTextureFormat: TextureFormat?\n) {\n    constructor(binding: Long, visibility: Long, type: BindingType)\n\n    constructor(binding: Long, visibility: Long, type: BindingType, multisampled: Boolean)\n\n    constructor(\n        binding: Long,\n        visibility: Long,\n        type: BindingType,\n        multisampled: Boolean,\n        dimension: TextureViewDimension,\n        textureComponentType: TextureComponentType)\n}\n\nexpect class ComputePipelineDescriptor(\n    layout: PipelineLayout, computeStage: ProgrammableStageDescriptor)\n\nexpect class BindGroupLayoutDescriptor(vararg entries: BindGroupLayoutEntry)\n\nexpect class SwapChainDescriptor(\n    device: Device, format: TextureFormat, usage: Long = TextureUsage.OUTPUT_ATTACHMENT)\n\nexpect class Texture {\n    fun createView(desc: TextureViewDescriptor? = null): TextureView\n\n    fun destroy()\n}\n\nexpect class TextureView : IntoBindingResource {\n\n    fun destroy()\n}\n\n/**\n * The usages determine what kind of memory the buffer is allocated from and what actions the buffer\n * can partake in.\n */\nobject BufferUsage {\n    /**\n     * Allow a buffer to be mapped for reading. Does not need to be enabled for mapped_at_creation.\n     */\n    const val MAP_READ: Long = 1\n\n    /**\n     * Allow a buffer to be mapped for writing. Does not need to be enabled for mapped_at_creation.\n     */\n    const val MAP_WRITE: Long = 2\n\n    /**\n     * Allow a buffer to be the source buffer for [CommandEncoder.copyBufferToBuffer] or\n     * [CommandEncoder.copyBufferToTexture]\n     */\n    const val COPY_SRC: Long = 4\n\n    /** Allow a buffer to be the destination buffer for [CommandEncoder.copyBufferToBuffer] */\n    const val COPY_DST: Long = 8\n\n    /** Allow a buffer to be used as index buffer for draw calls */\n    const val INDEX: Long = 16\n\n    /** Allow a buffer to be used as vertex buffer for draw calls */\n    const val VERTEX: Long = 32\n\n    /** Allow a buffer to be used as uniform buffer */\n    const val UNIFORM: Long = 64\n\n    /** Allows a buffer to be used as a storage buffer */\n    const val STORAGE: Long = 128\n\n    /** Allow a buffer to be the indirect buffer in an indirect draw call. */\n    const val INDIRECT: Long = 256\n\n    const val QUERY_RESOLVE: Long = 512\n}\n\nexpect class BufferDescriptor(label: String, size: Long, usage: Long, mappedAtCreation: Boolean)\n\nexpect class Buffer : IntoBindingResource {\n\n    val size: Long\n\n    /** JVM Only */\n    fun getMappedData(start: Long = 0, size: Long = this.size): BufferData\n\n    @Deprecated(\n        \"Eventually will be replaced with mapAsync() and getMappedData() but waiting on Wgpu-native!\")\n    suspend fun mapReadAsync(device: Device): BufferData\n\n    fun unmap()\n\n    fun destroy()\n}\n\n/**\n * A cross platform representation of mapped buffer data. On the desktop it is backed by a pointer,\n * and on the web it is backed by an ArrayBuffer.\n */\nexpect class BufferData {\n\n    fun putBytes(bytes: ByteArray, offset: Int = 0)\n\n    fun getBytes(): ByteArray\n}\n\nexpect class TextureViewDescriptor(\n    format: TextureFormat,\n    dimension: TextureViewDimension,\n    aspect: TextureAspect = TextureAspect.ALL,\n    baseMipLevel: Long = 0,\n    mipLevelCount: Long = 0,\n    baseArrayLayer: Long = 0,\n    arrayLayerCount: Long = 0)\n\nexpect class TextureDescriptor(\n    size: Extent3D,\n    mipLevelCount: Long,\n    sampleCount: Int,\n    dimension: TextureDimension,\n    format: TextureFormat,\n    usage: Long)\n\nexpect class RenderPipelineDescriptor(\n    layout: PipelineLayout,\n    vertexStage: ProgrammableStageDescriptor,\n    fragmentStage: ProgrammableStageDescriptor,\n    primitiveTopology: PrimitiveTopology,\n    rasterizationState: RasterizationStateDescriptor,\n    colorStates: Array<ColorStateDescriptor>,\n    depthStencilState: Any?,\n    vertexState: VertexStateDescriptor,\n    sampleCount: Int,\n    sampleMask: Long,\n    alphaToCoverage: Boolean)\n\nexpect enum class PrimitiveTopology {\n    POINT_LIST,\n    LINE_LIST,\n    LINE_STRIP,\n    TRIANGLE_LIST,\n    TRIANGLE_STRIP,\n}\n\nexpect enum class FrontFace {\n    CCW,\n    CW,\n}\n\nexpect enum class CullMode {\n    NONE,\n    FRONT,\n    BACK,\n}\n\nexpect class RasterizationStateDescriptor(\n    frontFace: FrontFace = FrontFace.CCW,\n    cullMode: CullMode = CullMode.NONE,\n    clampDepth: Boolean = false,\n    depthBias: Long = 0,\n    depthBiasSlopeScale: Float = 0f,\n    depthBiasClamp: Float = 0f)\n\nexpect class ColorStateDescriptor(\n    format: TextureFormat,\n    alphaBlend: BlendDescriptor,\n    colorBlend: BlendDescriptor,\n    writeMask: Long)\n\nexpect class VertexAttributeDescriptor(format: VertexFormat, offset: Long, shaderLocation: Int)\n\nexpect class VertexBufferLayoutDescriptor(\n    arrayStride: Long, stepMode: InputStepMode, vararg attributes: VertexAttributeDescriptor)\n\nexpect class VertexStateDescriptor(\n    indexFormat: IndexFormat?, vararg vertexBuffers: VertexBufferLayoutDescriptor)\n\nexpect class BlendDescriptor(\n    srcFactor: BlendFactor = BlendFactor.ONE,\n    dstFactor: BlendFactor = BlendFactor.ZERO,\n    operation: BlendOperation = BlendOperation.ADD)\n\nexpect class TextureCopyView(\n    texture: Texture, mipLevel: Long = 0, origin: Origin3D = Origin3D(0, 0, 0))\n\nexpect class BufferCopyView(\n    buffer: Buffer, bytesPerRow: Int, rowsPerImage: Int, offset: Long = 0\n) {}\n\nexpect class SamplerDescriptor(\n    compare: CompareFunction? = null,\n    addressModeU: AddressMode = AddressMode.CLAMP_TO_EDGE,\n    addressModeV: AddressMode = AddressMode.CLAMP_TO_EDGE,\n    addressModeW: AddressMode = AddressMode.CLAMP_TO_EDGE,\n    magFilter: FilterMode = FilterMode.NEAREST,\n    minFilter: FilterMode = FilterMode.NEAREST,\n    mipmapFilter: FilterMode = FilterMode.NEAREST,\n    lodMinClamp: Float = 0f,\n    lodMaxClamp: Float = 100000000f,\n    maxAnisotrophy: Short = 1)\n\nexpect enum class TextureViewDimension {\n    D1,\n    D2,\n    D2_ARRAY,\n    CUBE,\n    CUBE_ARRAY,\n    D3,\n}\n\nexpect enum class TextureAspect {\n    ALL,\n    STENCIL_ONLY,\n    DEPTH_ONLY,\n}\n\nexpect enum class TextureDimension {\n    D1,\n    D2,\n    D3\n}\n\nexpect enum class TextureFormat {\n    /** 8 Bit Red channel only. `[0, 255]` converted to/from float `[0, 1]` in shader. */\n    R8_UNORM,\n\n    /** 8 Bit Red channel only. `[-127, 127]` converted to/from float `[-1, 1]` in shader. */\n    R8_SNORM,\n\n    /** Red channel only. 8 bit integer per channel. Unsigned in shader. */\n    R8_UINT,\n\n    /** Red channel only. 8 bit integer per channel. Signed in shader. */\n    R8_SINT,\n\n    /** Red channel only. 16 bit integer per channel. Unsigned in shader. */\n    R16_UINT,\n\n    /** Red channel only. 16 bit integer per channel. Signed in shader. */\n    R16_SINT,\n\n    /** Red channel only. 16 bit float per channel. Float in shader. */\n    R16_FLOAT,\n\n    /**\n     * Red and green channels. 8 bit integer per channel. `[0, 255]` converted to/from float `[0,\n     * 1]` in shader.\n     */\n    RG8_UNORM,\n\n    /**\n     * Red and green channels. 8 bit integer per channel. `[-127, 127]` converted to/from float\n     * `[-1, 1]` in shader.\n     */\n    RG8_SNORM,\n\n    /** Red and green channels. 8 bit integer per channel. Unsigned in shader. */\n    RG8_UINT,\n\n    /** Red and green channel s. 8 bit integer per channel. Signed in shader. */\n    RG8_SINT,\n\n    /** Red channel only. 32 bit integer per channel. Unsigned in shader. */\n    R32_UINT,\n\n    /** Red channel only. 32 bit integer per channel. Signed in shader. */\n    R32_SINT,\n\n    /** Red channel only. 32 bit float per channel. Float in shader. */\n    R32_FLOAT,\n\n    /** Red and green channels. 16 bit integer per channel. Unsigned in shader. */\n    RG16_UINT,\n\n    /** Red and green channels. 16 bit integer per channel. Signed in shader. */\n    RG16_SINT,\n\n    /** Red and green channels. 16 bit float per channel. Float in shader. */\n    RG16_FLOAT,\n\n    /**\n     * Red, green, blue, and alpha channels. 8 bit integer per channel. `[0, 255]` converted to/from\n     * float `[0, 1]` in shader.\n     */\n    RGBA8_UNORM,\n\n    /**\n     * Red, green, blue, and alpha channels. 8 bit integer per channel. Srgb-color `[0, 255]`\n     * converted to/from linear-color float `[0, 1]` in shader.\n     */\n    RGBA8_UNORM_SRGB,\n\n    /**\n     * Red, green, blue, and alpha channels. 8 bit integer per channel. `[-127, 127]` converted\n     * to/from float `[-1, 1]` in shader.\n     */\n    RGBA8_SNORM,\n\n    /** Red, green, blue, and alpha channels. 8 bit integer per channel. Unsigned in shader. */\n    RGBA8_UINT,\n\n    /** Red, green, blue, and alpha channels. 8 bit integer per channel. Signed in shader. */\n    RGBA8_SINT,\n\n    /**\n     * Blue, green, red, and alpha channels. 8 bit integer per channel. `[0, 255]` converted to/from\n     * float `[0, 1]` in shader.\n     */\n    BGRA8_UNORM,\n\n    /**\n     * Blue, green, red, and alpha channels. 8 bit integer per channel. Srgb-color `[0, 255]`\n     * converted to/from linear-color float `[0, 1]` in shader.\n     */\n    BGRA8_UNORM_SRGB,\n\n    /**\n     * Red, green, blue, and alpha channels. 10 bit integer for RGB channels, 2 bit integer for\n     * alpha channel. `[0, 1023]` (`[0, 3]` for alpha) converted to/from float `[0, 1]` in shader.\n     */\n    RGB10A2_UNORM,\n\n    /**\n     * Red, green, and blue channels. 11 bit float with no sign bit for RG channels. 10 bit float\n     * with no sign bit for blue channel. Float in shader.\n     */\n    RG11B10_FLOAT,\n\n    /** Red and green channels. 32 bit integer per channel. Unsigned in shader. */\n    RG32_UINT,\n\n    /** Red and green channels. 32 bit integer per channel. Signed in shader. */\n    RG32_SINT,\n\n    /** Red and green channels. 32 bit float per channel. Float in shader. */\n    RG32_FLOAT,\n\n    /** Red, green, blue, and alpha channels. 16 bit integer per channel. Unsigned in shader. */\n    RGBA16_UINT,\n\n    /** Red, green, blue, and alpha channels. 16 bit integer per channel. Signed in shader. */\n    RGBA16_SINT,\n\n    /** Red, green, blue, and alpha channels. 16 bit float per channel. Float in shader. */\n    RGBA16_FLOAT,\n\n    /** Red, green, blue, and alpha channels. 32 bit integer per channel. Unsigned in shader. */\n    RGBA32_UINT,\n\n    /** Red, green, blue, and alpha channels. 32 bit integer per channel. Signed in shader. */\n    RGBA32_SINT,\n\n    /** Red, green, blue, and alpha channels. 32 bit float per channel. Float in shader. */\n    RGBA32_FLOAT,\n\n    /** Special depth format with 32 bit floating point depth. */\n    DEPTH32_FLOAT,\n\n    /** Special depth format with at least 24 bit integer depth. */\n    DEPTH24_PLUS,\n\n    /**\n     * Special depth/stencil format with at least 24 bit integer depth and 8 bits integer stencil.\n     */\n    DEPTH24_PLUS_STENCIL8,\n}\n\nexpect enum class BlendOperation {\n    ADD,\n    SUBTRACT,\n    REVERSE_SUBTRACT,\n    MIN,\n    MAX,\n}\n\nexpect enum class StencilOperation {\n    KEEP,\n    ZERO,\n    REPLACE,\n    INVERT,\n    INCREMENT_CLAMP,\n    DECREMENT_CLAMP,\n    INCREMENT_WRAP,\n    DECREMENT_WRAP,\n}\n\nexpect enum class BlendFactor {\n    ZERO,\n    ONE,\n    SRC_COLOR,\n    ONE_MINUS_SRC_COLOR,\n    SRC_ALPHA,\n    ONE_MINUS_SRC_ALPHA,\n    DST_COLOR,\n    ONE_MINUS_DST_COLOR,\n    DST_ALPHA,\n    ONE_MINUS_DST_ALPHA,\n    SRC_ALPHA_SATURATED,\n    BLEND_COLOR,\n    ONE_MINUS_BLEND_COLOR,\n}\n\nexpect enum class IndexFormat {\n    /// Supported on Web and Desktop\n    UINT16,\n    /// Not supported on web for KGPU.\n    UINT32,\n}\n\nexpect enum class VertexFormat {\n    /** Two unsigned bytes. uvec2 in shaders */\n    UCHAR2,\n\n    /** Four unsigned bytes. uvec4 in shaders */\n    UCHAR4,\n\n    /** Two signed bytes. ivec2 in shaders */\n    CHAR2,\n\n    /** Four signed bytes. ivec4 in shaders */\n    CHAR4,\n\n    /** Two unsigned bytes `[0, 255]` converted to floats `[0, 1]`. vec2 in shaders */\n    UCHAR2_NORM,\n\n    /** Four unsigned bytes `[0, 255]` converted to floats `[0, 1]`. vec4 in shaders */\n    UCHAR4_NORM,\n\n    /** two unsigned bytes converted to float `[-1,1]`. vec2 in shaders */\n    CHAR2_NORM,\n\n    /** two unsigned bytes converted to float `[-1,1]`. vec2 in shaders */\n    CHAR4_NORM,\n\n    /** two unsigned shorts. uvec2 in shaders */\n    USHORT2,\n\n    /** four unsigned shorts. uvec4 in shaders */\n    USHORT4,\n\n    /** two signed shorts. ivec2 in shaders */\n    SHORT2,\n\n    /** four signed shorts. ivec4 in shaders */\n    SHORT4,\n\n    /** two unsigned shorts `[0, 65525]` converted to float `[0, 1]`. vec2 in shaders */\n    USHORT2_NORM,\n\n    /** four unsigned shorts `[0, 65525]` converted to float `[0, 1]`. vec4 in shaders */\n    USHORT4_NORM,\n\n    /** two signed shorts `[-32767, 32767]` converted to float `[-1, 1]`. vec2 in shaders */\n    SHORT2_NORM,\n\n    /** two signed shorts `[-32767, 32767]` converted to float `[-1, 1]`. vec4 in shaders */\n    SHORT4_NORM,\n\n    /** two half precision floats. vec2 in shaders */\n    HALF2,\n\n    /** four half precision floats. vec4 in shaders */\n    HALF4,\n\n    /** one float. float in shaders */\n    FLOAT,\n\n    /** two floats. vec2 in shaders */\n    FLOAT2,\n\n    /** three floats. vec3 in shaders */\n    FLOAT3,\n\n    /** four floats. vec4 in shaders */\n    FLOAT4,\n\n    /** one unsigned int. uint in shaders */\n    UINT,\n\n    /** two unsigned ints. uvec2 in shaders */\n    UINT2,\n\n    /** three unsigned ints. uvec3 in shaders */\n    UINT3,\n\n    /** four unsigned ints. uvec4 in shaders */\n    UINT4,\n\n    /** one signed int. int in shaders */\n    INT,\n\n    /** two signed ints. ivec2 in shaders */\n    INT2,\n\n    /** three signed ints. ivec2 in shaders */\n    INT3,\n\n    /** four signed ints. ivec2 in shaders */\n    INT4,\n}\n\nexpect enum class InputStepMode {\n    VERTEX,\n    INSTANCE,\n}\n\nexpect enum class LoadOp {\n    CLEAR,\n    LOAD,\n}\n\nexpect enum class StoreOp {\n    CLEAR,\n    STORE,\n}\n\nexpect enum class BindingType {\n    UNIFORM_BUFFER,\n    STORAGE_BUFFER,\n    READONLY_STORAGE_BUFFER,\n    SAMPLER,\n    COMPARISON_SAMPLER,\n    SAMPLED_TEXTURE,\n    READONLY_STORAGE_TEXTURE,\n    WRITEONLY_STORAGE_TEXTURE,\n}\n\nexpect enum class AddressMode {\n    CLAMP_TO_EDGE,\n    REPEAT,\n    MIRROR_REPEAT,\n}\n\nexpect enum class FilterMode {\n    NEAREST,\n    LINEAR,\n}\n\nexpect enum class CompareFunction {\n    NEVER,\n    LESS,\n    EQUAL,\n    LESS_EQUAL,\n    GREATER,\n    NOT_EQUAL,\n    GREATER_EQUAL,\n    ALWAYS,\n}\n\nexpect enum class TextureComponentType {\n    FLOAT,\n    SINT,\n    UINT\n}\n","package io.github.kgpu\n\n/**\n * Represents a cross platform window. On the JVM, this window is managed by the GLFW windowing\n * library. On the web, this window represents a canvas.\n */\nexpect class Window() {\n    var windowSize: WindowSize\n    var onResize: (size: WindowSize) -> Unit\n    var onKeyDown: (event: KeyEvent) -> Unit\n    var onKeyUp: (event: KeyEvent) -> Unit\n    var onKeyTyped: (c: Char) -> Unit\n    var onMouseClick: (event: ClickEvent) -> Unit\n    var onMouseRelease: (event: ClickEvent) -> Unit\n    var onMouseMove: (x: Float, y: Float) -> Unit\n    var mouseX: Float\n    var mouseY: Float\n\n    fun setTitle(title: String)\n\n    /**\n     * On the desktop, this returns true when the close button has been pressed. On the web, this\n     * always returns false.\n     */\n    fun isCloseRequested(): Boolean\n\n    /**\n     * On the desktop, it will poll the events for the window. On the web, it will update the window\n     * size. This function is automatically called by Kgpu.runLoop {}\n     */\n    fun update()\n\n    fun configureSwapChain(desc: SwapChainDescriptor): SwapChain\n\n    /** Sets the size and updates the window */\n    fun resize(width: Int, height: Int)\n}\n\ndata class WindowSize(val width: Int, val height: Int) {\n    override fun toString(): String {\n        return \"WindowSize($width, $height)\"\n    }\n}\n\ndata class KeyEvent(val key: Key, val shift: Boolean, val ctrl: Boolean, val alt: Boolean) {\n    override fun toString(): String {\n        return \"KeyEvent(key = $key, shift = $shift, ctrl = $ctrl, alt = $alt)\"\n    }\n}\n\ndata class ClickEvent(\n    val button: MouseButton, val shift: Boolean, val ctrl: Boolean, val alt: Boolean)\n\nenum class MouseButton {\n    LEFT,\n    MIDDLE,\n    RIGHT,\n    UNKNOWN\n}\n\nenum class Key {\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n    Q,\n    R,\n    S,\n    T,\n    U,\n    V,\n    W,\n    X,\n    Y,\n    Z,\n    LEFT_ARROW,\n    UP_ARROW,\n    RIGHT_ARROW,\n    DOWN_ARROW,\n    DIGIT_1,\n    DIGIT_2,\n    DIGIT_3,\n    DIGIT_4,\n    DIGIT_5,\n    DIGIT_6,\n    DIGIT_7,\n    DIGIT_8,\n    DIGIT_9,\n    DIGIT_0,\n    TAB,\n    SHIFT,\n    CTRL,\n    ALT,\n    ESCAPE,\n    F1,\n    F2,\n    F3,\n    F4,\n    F5,\n    F6,\n    F7,\n    F8,\n    F9,\n    F10,\n    F11,\n    F12,\n    MINUS,\n    EQUAL,\n    LEFT_BRACKET,\n    RIGHT_BRACKET,\n    BACKSLASH,\n    SEMICOLON,\n    APOSTROPHE,\n    COMMA,\n    PERIOD,\n    SLASH,\n    ENTER,\n    BACKSPACE,\n    ACCENT_GRAVE,\n    CAPS_LOCK,\n    SPACE,\n    DELETE,\n    UNKNOWN\n}\n","package io.github.kgpu\n\nobject BufferUtils {\n\n    fun createBufferFromData(device: Device, label: String, data: ByteArray, usage: Long): Buffer {\n        return device.createBufferWithData(\n            BufferDescriptor(label, data.size.toLong(), usage, true), data)\n    }\n\n    fun createFloatBuffer(device: Device, label: String, data: FloatArray, usage: Long): Buffer {\n        return createBufferFromData(device, label, ByteUtils.toByteArray(data), usage)\n    }\n\n    fun createShortBuffer(device: Device, label: String, data: ShortArray, usage: Long): Buffer {\n        return createBufferFromData(device, label, ByteUtils.toByteArray(data), usage)\n    }\n\n    fun createIntBuffer(device: Device, label: String, data: IntArray, usage: Long): Buffer {\n        return createBufferFromData(device, label, ByteUtils.toByteArray(data), usage)\n    }\n}\n\nobject ByteUtils {\n    fun toByteArray(floatArray: FloatArray): ByteArray {\n        val bytes = ByteArray(floatArray.size * 4)\n        floatArray.forEachIndexed { index, float ->\n            run {\n                val i = index * 4\n                val bits = float.toRawBits()\n\n                bytes[i + 3] = (bits shr 24).toByte()\n                bytes[i + 2] = (bits shr 16).toByte()\n                bytes[i + 1] = (bits shr 8).toByte()\n                bytes[i + 0] = bits.toByte()\n            }\n        }\n\n        return bytes\n    }\n\n    fun toFloatArray(byteArray: ByteArray): FloatArray {\n        val floats = FloatArray(byteArray.size / 4)\n\n        for (i in floats.indices) {\n            val byteI = i * 4\n            val bits =\n                (byteArray[byteI].toInt() and 0xFF) or\n                    ((byteArray[byteI + 1].toInt() and 0xFF) shl 8) or\n                    ((byteArray[byteI + 2].toInt() and 0xFF) shl 16) or\n                    ((byteArray[byteI + 3].toInt() and 0xFF) shl 24)\n\n            floats[i] = Float.fromBits(bits)\n        }\n\n        return floats\n    }\n\n    fun toIntArray(byteArray: ByteArray): IntArray {\n        val ints = IntArray(byteArray.size / 4)\n\n        for (i in ints.indices) {\n            val byteI = i * 4\n            ints[i] =\n                byteArray[byteI].toInt() or\n                    (byteArray[byteI + 1].toInt() shl 8) or\n                    (byteArray[byteI + 2].toInt() shl 16) or\n                    (byteArray[byteI + 3].toInt() shl 24)\n        }\n\n        return ints\n    }\n\n    fun toByteArray(intArray: IntArray): ByteArray {\n        val bytes = ByteArray(intArray.size * 4)\n        intArray.forEachIndexed { index, bits ->\n            run {\n                val i = index * 4\n\n                bytes[i + 3] = (bits shr 24).toByte()\n                bytes[i + 2] = (bits shr 16).toByte()\n                bytes[i + 1] = (bits shr 8).toByte()\n                bytes[i + 0] = bits.toByte()\n            }\n        }\n\n        return bytes\n    }\n\n    fun toByteArray(shortArray: ShortArray): ByteArray {\n        val bytes = ByteArray(shortArray.size * 2)\n        shortArray.forEachIndexed { index, value ->\n            run {\n                val i = index * 2\n\n                bytes[i + 1] = (value.toInt() shr 8).toByte()\n                bytes[i + 0] = value.toByte()\n            }\n        }\n\n        return bytes\n    }\n}\n","package io.github.kgpu\n\nimport io.github.kgpu.internal.ArrayBufferUtils\nimport kotlin.js.Promise\nimport kotlinx.browser.window as jsWindow\nimport kotlinx.coroutines.await\nimport org.khronos.webgl.*\n\nactual object Kgpu {\n    actual val backendName: String = \"Web\"\n    actual val undefined = kotlin.js.undefined\n\n    actual fun runLoop(window: Window, func: () -> Unit) {\n        window.update()\n        func()\n\n        jsWindow.requestAnimationFrame { runLoop(window, func) }\n    }\n\n    actual suspend fun requestAdapterAsync(window: Window?): Adapter {\n        return Adapter((js(\"navigator.gpu.requestAdapter()\") as Promise<GPUAdapter>).await())\n    }\n}\n\nopen external class GPUObjectBase {\n    val label: String\n}\n\nopen external class GPUObjectDescriptorBase {\n    val label: String\n}\n\nactual class Adapter(val jsType: GPUAdapter) {\n\n    actual suspend fun requestDeviceAsync(): Device {\n        return Device(jsType.requestDevice().await())\n    }\n\n    override fun toString(): String {\n        return \"Adapter($jsType)\"\n    }\n}\n\nopen external class GPUAdapter {\n    val name: String\n    val extensions: List<GPUExtensionName>\n\n    fun requestDevice(): Promise<GPUDevice>\n}\n\n/** Eventually will be external once implemented in browsers */\nenum class GPUExtensionName {\n    TextureCompressionBC,\n    PipelineStatisticsQuery,\n    TimestampQuery,\n    DepthClamping\n}\n\nactual enum class PowerPreference(jsType: GPUPowerPreference?) {\n    LOW_POWER(GPUPowerPreference.LOW_POWER),\n    HIGH_PERFORMANCE(GPUPowerPreference.HIGH_PERFORMANCE)\n}\n\n/** Eventually will be external once implemented in browsers */\nenum class GPUPowerPreference {\n    LOW_POWER,\n    HIGH_PERFORMANCE\n}\n\nactual class Device(val jsType: GPUDevice) {\n\n    override fun toString(): String {\n        return \"Device($jsType)\"\n    }\n\n    actual fun createShaderModule(data: ByteArray): ShaderModule {\n        val desc = asDynamic()\n        val bytes = Int8Array(data.toTypedArray())\n        desc.code = Uint32Array(bytes.buffer, 0, data.size / 4)\n\n        return jsType.createShaderModule(desc)\n    }\n\n    actual fun createRenderPipeline(desc: RenderPipelineDescriptor): RenderPipeline {\n        return jsType.createRenderPipeline(desc)\n    }\n\n    actual fun createPipelineLayout(desc: PipelineLayoutDescriptor): PipelineLayout {\n        return jsType.createPipelineLayout(desc)\n    }\n\n    actual fun createTexture(desc: TextureDescriptor): Texture {\n        return Texture(jsType.createTexture(desc))\n    }\n\n    actual fun createCommandEncoder(): CommandEncoder {\n        return CommandEncoder(jsType.createCommandEncoder())\n    }\n\n    actual fun getDefaultQueue(): Queue {\n        val queue = jsType.asDynamic().defaultQueue as GPUQueue\n\n        return Queue(queue)\n    }\n\n    actual fun createBuffer(desc: BufferDescriptor): Buffer {\n        return Buffer(jsType.createBuffer(desc), desc.size)\n    }\n\n    actual fun createBindGroupLayout(desc: BindGroupLayoutDescriptor): BindGroupLayout {\n        return BindGroupLayout(jsType.createBindGroupLayout(desc))\n    }\n\n    actual fun createBufferWithData(desc: BufferDescriptor, data: ByteArray): Buffer {\n        if (!desc.mappedAtCreation) {\n            throw IllegalArgumentException(\"Buffer descriptor must be mapped at creation!\")\n        }\n\n        val buffer = jsType.createBuffer(desc)\n        Uint8Array(buffer.getMappedRange()).set(data.toTypedArray())\n        buffer.unmap()\n\n        return Buffer(buffer, desc.size)\n    }\n\n    actual fun createBindGroup(desc: BindGroupDescriptor): BindGroup {\n        return BindGroup(jsType.createBindGroup(desc))\n    }\n\n    actual fun createSampler(desc: SamplerDescriptor): Sampler {\n        return Sampler(jsType.createSampler(desc))\n    }\n\n    actual fun createComputePipeline(desc: ComputePipelineDescriptor): ComputePipeline {\n        return jsType.createComputePipeline(desc)\n    }\n}\n\nexternal class GPUDevice {\n    val adapter: GPUAdapter\n    val extensions: List<GPUExtensionName>\n    val limits: Any\n    val defaultQueue: Any\n\n    fun createShaderModule(desc: dynamic): GPUShaderModule\n\n    fun createPipelineLayout(desc: PipelineLayoutDescriptor): GPUPipelineLayout\n\n    fun createRenderPipeline(desc: RenderPipelineDescriptor): RenderPipeline\n\n    fun createTexture(desc: TextureDescriptor): GPUTexture\n\n    fun createCommandEncoder(): GPUCommandEncoder\n\n    fun createBuffer(desc: BufferDescriptor): GPUBuffer\n\n    fun createBindGroupLayout(desc: BindGroupLayoutDescriptor): GPUBindGroupLayout\n\n    fun createBindGroup(desc: BindGroupDescriptor): GPUBindGroup\n\n    fun createSampler(desc: SamplerDescriptor): GPUSampler\n\n    fun createComputePipeline(desc: ComputePipelineDescriptor): ComputePipeline\n}\n\nactual class CommandEncoder(val jsType: GPUCommandEncoder) {\n\n    actual fun beginRenderPass(desc: RenderPassDescriptor): RenderPassEncoder {\n        return RenderPassEncoder(jsType.beginRenderPass(desc))\n    }\n\n    actual fun finish(): CommandBuffer {\n        return CommandBuffer(jsType.finish())\n    }\n\n    actual fun copyBufferToTexture(\n        source: BufferCopyView, destination: TextureCopyView, copySize: Extent3D\n    ) {\n        jsType.copyBufferToTexture(source, destination, copySize)\n    }\n\n    actual fun beginComputePass(): ComputePassEncoder {\n        return ComputePassEncoder(jsType.beginComputePass())\n    }\n\n    actual fun copyBufferToBuffer(\n        source: Buffer, destination: Buffer, size: Long, sourceOffset: Int, destinationOffset: Int\n    ) {\n        jsType.copyBufferToBuffer(\n            source.jsType, sourceOffset, destination.jsType, destinationOffset, size)\n    }\n\n    actual fun copyTextureToBuffer(source: TextureCopyView, dest: BufferCopyView, size: Extent3D) {\n        jsType.copyTextureToBuffer(source, dest, size)\n    }\n}\n\nexternal class GPUCommandEncoder {\n\n    fun beginRenderPass(desc: RenderPassDescriptor): GPURenderPassEncoder\n\n    fun finish(): GPUCommandBuffer\n\n    fun copyBufferToTexture(\n        source: BufferCopyView, destination: TextureCopyView, copySize: Extent3D\n    )\n\n    fun beginComputePass(): GPUComputePassEncoder\n\n    fun copyBufferToBuffer(\n        source: GPUBuffer,\n        sourceOffset: Int,\n        destination: GPUBuffer,\n        destinationOffset: Int,\n        size: Long\n    )\n\n    fun copyTextureToBuffer(\n        source: TextureCopyView, destination: BufferCopyView, copySize: Extent3D\n    )\n}\n\nactual class RenderPassEncoder(val jsType: GPURenderPassEncoder) {\n    actual fun setPipeline(pipeline: RenderPipeline) {\n        jsType.setPipeline(pipeline)\n    }\n\n    actual fun draw(vertexCount: Int, instanceCount: Int, firstVertex: Int, firstInstance: Int) {\n        jsType.draw(vertexCount, instanceCount, firstVertex, firstInstance)\n    }\n\n    actual fun endPass() {\n        jsType.endPass()\n    }\n\n    actual fun setVertexBuffer(slot: Long, buffer: Buffer, offset: Long, size: Long) {\n        jsType.setVertexBuffer(slot, buffer.jsType, offset, size)\n    }\n\n    actual fun drawIndexed(\n        indexCount: Int, instanceCount: Int, firstVertex: Int, baseVertex: Int, firstInstance: Int\n    ) {\n        jsType.drawIndexed(indexCount, instanceCount, firstVertex, baseVertex, firstInstance)\n    }\n\n    actual fun setIndexBuffer(buffer: Buffer, indexFormat: IndexFormat, offset: Long, size: Long) {\n        jsType.setIndexBuffer(buffer.jsType, indexFormat.jsType, offset, size)\n    }\n\n    actual fun setBindGroup(index: Int, bindGroup: BindGroup) {\n        jsType.setBindGroup(index, bindGroup.jsType)\n    }\n}\n\nexternal class GPURenderPassEncoder {\n    fun setPipeline(pipeline: RenderPipeline)\n\n    fun draw(vertexCount: Int, instanceCount: Int, firstVertex: Int, firstInstance: Int)\n\n    fun endPass()\n\n    fun setVertexBuffer(slot: Long, buffer: GPUBuffer, offset: Long, size: Long)\n\n    fun drawIndexed(\n        indexCount: Int, instanceCount: Int, firstVertex: Int, baseVertex: Int, firstInstance: Int\n    )\n\n    fun setIndexBuffer(buffer: GPUBuffer, format: String?, offset: Long, size: Long)\n\n    fun setBindGroup(index: Int, bindGroup: GPUBindGroup)\n}\n\nactual class ComputePassEncoder(val jsType: GPUComputePassEncoder) {\n\n    actual fun setPipeline(pipeline: ComputePipeline) {\n        jsType.setPipeline(pipeline)\n    }\n\n    actual fun setBindGroup(index: Int, bindGroup: BindGroup) {\n        jsType.setBindGroup(index, bindGroup.jsType)\n    }\n\n    actual fun dispatch(x: Int, y: Int, z: Int) {\n        jsType.dispatch(x, y, z)\n    }\n\n    actual fun endPass() {\n        jsType.endPass()\n    }\n}\n\nexternal class GPUComputePassEncoder {\n    fun setPipeline(pipeline: ComputePipeline)\n\n    fun setBindGroup(index: Int, bindGroup: GPUBindGroup)\n\n    fun dispatch(x: Int, y: Int, z: Int)\n\n    fun endPass()\n}\n\nactual class Texture(val jsType: GPUTexture) {\n\n    actual fun createView(desc: TextureViewDescriptor?): TextureView {\n        return TextureView(jsType.createView(desc))\n    }\n\n    actual fun destroy() {\n        jsType.destroy()\n    }\n}\n\nexternal class GPUTexture {\n\n    fun createView(desc: TextureViewDescriptor?): GPUTextureView\n\n    fun destroy()\n}\n\nexternal class GPUShaderModule : GPUObjectBase {\n    val compilationInfo: Any\n}\n\nactual typealias ShaderModule = GPUShaderModule\n\nactual class ProgrammableStageDescriptor\n    actual constructor(val module: ShaderModule, val entryPoint: String)\n\nactual enum class PrimitiveTopology(\n    val jsType: GPUPrimitiveTopology = GPUPrimitiveTopology._NotImplemented\n) {\n    POINT_LIST,\n    LINE_LIST,\n    LINE_STRIP,\n    TRIANGLE_LIST(GPUPrimitiveTopology.triangle_list),\n    TRIANGLE_STRIP,\n}\n\nenum class GPUPrimitiveTopology {\n    point_list,\n    line_list,\n    line_strip,\n    triangle_list,\n    triangle_strip,\n    _NotImplemented\n}\n\nactual enum class FrontFace(val jsType: String) {\n    CCW(\"ccw\"),\n    CW(\"cw\"),\n}\n\nactual enum class CullMode(val jsType: String) {\n    NONE(\"none\"),\n    FRONT(\"front\"),\n    BACK(\"back\"),\n}\n\nactual class RasterizationStateDescriptor\n    actual constructor(\n        frontFace: FrontFace,\n        cullMode: CullMode,\n        val clampDepth: Boolean,\n        val depthBias: Long,\n        val depthBiasSlopeScale: Float,\n        val depthBiasClamp: Float\n    ) {\n\n    val frontFace = frontFace.jsType\n    val cullMode = cullMode.jsType\n}\n\nactual class BlendDescriptor\n    actual constructor(srcFactor: BlendFactor, dstFactor: BlendFactor, operation: BlendOperation) {\n\n    val operation = operation.jsType\n    val srcFactor = srcFactor.jsType\n    val dstFactor = dstFactor.jsType\n}\n\nactual class ColorStateDescriptor\n    actual constructor(\n        format: TextureFormat,\n        val alphaBlend: BlendDescriptor,\n        val colorBlend: BlendDescriptor,\n        val writeMask: Long\n    ) {\n\n    val format = format.jsType\n}\n\nactual class RenderPipelineDescriptor\n    actual constructor(\n        val layout: PipelineLayout,\n        val vertexStage: ProgrammableStageDescriptor,\n        val fragmentStage: ProgrammableStageDescriptor,\n        primitiveTopology: PrimitiveTopology,\n        val rasterizationState: RasterizationStateDescriptor,\n        val colorStates: Array<ColorStateDescriptor>,\n        val depthStencilState: Any?,\n        val vertexState: VertexStateDescriptor,\n        val sampleCount: Int,\n        val sampleMask: Long,\n        val alphaToCoverage: Boolean\n    ) {\n\n    val primitiveTopology = \"triangle-list\"\n}\n\nactual class VertexAttributeDescriptor\n    actual constructor(format: VertexFormat, val offset: Long, val shaderLocation: Int) {\n    val format = format.jsType\n}\n\nactual class VertexBufferLayoutDescriptor\n    actual constructor(\n        val arrayStride: Long,\n        stepMode: InputStepMode,\n        vararg val attributes: VertexAttributeDescriptor\n    ) {\n    val stepMode = stepMode.jsType\n}\n\nactual class VertexStateDescriptor\n    actual constructor(\n        indexFormat: IndexFormat?, vararg val vertexBuffers: VertexBufferLayoutDescriptor\n    ) {\n\n    // Chrome only wants the indexFormat when you call RenderPass#setIndexBuffer\n    // So for the web backend we will force the index format to undefined\n    val indexFormat = undefined\n}\n\nactual class BindGroupLayoutEntry\n    actual constructor(\n        val binding: Long,\n        val visibility: Long,\n        type: BindingType,\n        val hasDynamicOffset: Boolean,\n        viewDimension: TextureViewDimension?,\n        textureComponentType: TextureComponentType?,\n        val multisampled: Boolean,\n        storageTextureFormat: TextureFormat?\n    ) {\n    val type = type.jsType\n    val viewDimension = viewDimension?.jsType ?: undefined\n    val textureComponentType = textureComponentType?.jsType ?: undefined\n    val storageTextureFormat = storageTextureFormat?.jsType ?: undefined\n\n    actual constructor(binding: Long, visibility: Long, type: BindingType) : this(\n        binding, visibility, type, false, null, null, false, null)\n\n    actual constructor(\n        binding: Long, visibility: Long, type: BindingType, multisampled: kotlin.Boolean\n    ) : this(binding, visibility, type, false, null, null, multisampled, null)\n\n    actual constructor(\n        binding: Long,\n        visibility: Long,\n        type: BindingType,\n        multisampled: kotlin.Boolean,\n        dimension: TextureViewDimension,\n        textureComponentType: TextureComponentType\n    ) : this(binding, visibility, type, false, dimension, textureComponentType, multisampled, null)\n}\n\nactual class BindGroupLayout(val jsType: GPUBindGroupLayout) {}\n\nexternal class GPUBindGroupLayout {}\n\nactual class PipelineLayoutDescriptor actual constructor(vararg bindGroupLayouts: BindGroupLayout) {\n    val bindGroupLayouts = bindGroupLayouts.map { it.jsType }.toTypedArray()\n}\n\nexternal class GPUPipelineLayout\n\nactual typealias PipelineLayout = GPUPipelineLayout\n\nactual class RenderPipeline\n\nactual class ComputePipeline\n\nactual enum class InputStepMode(val jsType: String) {\n    VERTEX(\"vertex\"),\n    INSTANCE(\"instance\"),\n}\n\nactual class Extent3D actual constructor(val width: Long, val height: Long, val depth: Long)\n\nactual enum class TextureDimension(val jsType: String) {\n    D1(\"1d\"),\n    D2(\"2d\"),\n    D3(\"3d\")\n}\n\nactual class TextureDescriptor\n    actual constructor(\n        val size: Extent3D,\n        val mipLevelCount: Long,\n        val sampleCount: Int,\n        dimension: TextureDimension,\n        format: TextureFormat,\n        val usage: Long\n    ) {\n\n    val dimension = dimension.jsType\n    val format = format.jsType\n}\n\nactual class TextureViewDescriptor\n    actual constructor(\n        format: TextureFormat,\n        dimension: TextureViewDimension,\n        aspect: TextureAspect,\n        val baseMipLevel: Long,\n        val mipLevelCount: Long,\n        val baseArrayLayer: Long,\n        val arrayLayerCount: Long\n    ) {\n\n    val format = format.jsType\n    val dimension = dimension.jsType\n    val aspect = aspect.jsType\n}\n\nactual class TextureView(val jsType: GPUTextureView) : IntoBindingResource {\n\n    override fun intoBindingResource(): dynamic {\n        return jsType\n    }\n\n    actual fun destroy() {\n        jsType.destroy()\n    }\n}\n\nexternal class GPUTextureView {\n    fun destroy()\n}\n\nactual class SwapChain(val jsType: GPUSwapChain) {\n\n    actual fun getCurrentTextureView(): TextureView {\n        val texture = Texture(jsType.getCurrentTexture())\n\n        return texture.createView(undefined)\n    }\n\n    actual fun present() {\n        // Not needed on WebGPU\n    }\n\n    actual fun isOutOfDate(): Boolean {\n        return false\n    }\n}\n\nexternal class GPUSwapChain {\n    fun getCurrentTexture(): GPUTexture\n}\n\nactual class SwapChainDescriptor\n    actual constructor(device: Device, format: TextureFormat, val usage: Long) {\n    val device = device.jsType\n    val format = format.jsType\n}\n\nactual class RenderPassColorAttachmentDescriptor\n    actual constructor(\n        attachment: TextureView, clearColor: Color?, resolveTarget: TextureView?, storeOp: StoreOp\n    ) {\n    val attachment = attachment.jsType\n    val storeOp = storeOp.jsType\n    val loadValue = clearColor ?: LoadOp.LOAD\n    val resolveTarget = resolveTarget?.jsType ?: undefined\n}\n\nactual class RenderPassDescriptor\n    actual constructor(vararg val colorAttachments: RenderPassColorAttachmentDescriptor)\n\nactual class CommandBuffer(val jsType: GPUCommandBuffer)\n\nexternal class GPUCommandBuffer\n\nactual class Queue(val jsType: GPUQueue) {\n\n    actual fun submit(vararg cmdBuffers: CommandBuffer) {\n        jsType.submit(cmdBuffers.map { it.jsType }.toTypedArray())\n    }\n\n    actual fun writeBuffer(\n        buffer: Buffer, data: ByteArray, offset: Long, dataOffset: Long, size: Long\n    ) {\n        val arrayBuffer = ArrayBuffer(data.size)\n        Uint8Array(arrayBuffer).set(data.toTypedArray())\n\n        jsType.writeBuffer(buffer.jsType, offset, arrayBuffer, dataOffset, size)\n    }\n}\n\nexternal class GPUQueue {\n\n    fun submit(cmdBuffers: Array<GPUCommandBuffer>)\n\n    fun writeBuffer(\n        buffer: GPUBuffer, offset: Long, data: ArrayBuffer, dataOffset: Long, size: Long\n    )\n}\n\nactual class BufferDescriptor\n    actual constructor(\n        val label: String, val size: Long, val usage: Long, val mappedAtCreation: Boolean)\n\nactual class Buffer(val jsType: GPUBuffer, actual val size: Long) : IntoBindingResource {\n\n    actual fun getMappedData(start: Long, size: Long): BufferData {\n        return BufferData(Uint8Array(jsType.getMappedRange()))\n    }\n\n    actual fun unmap() {\n        jsType.unmap()\n    }\n\n    override fun intoBindingResource(): dynamic {\n        val binding = asDynamic()\n        binding.buffer = jsType\n        binding.offset = 0\n        binding.size = size\n\n        return binding\n    }\n\n    actual fun destroy() {\n        jsType.destroy()\n    }\n\n    actual suspend fun mapReadAsync(device: Device): BufferData {\n        jsType.mapAsync(GPUMapMode.READ).await()\n        val data = jsType.getMappedRange()\n\n        return BufferData(Uint8Array(data))\n    }\n}\n\nexternal object GPUMapMode {\n    val READ: Long\n    val WRITE: Long\n}\n\nexternal class GPUBuffer {\n\n    fun mapAsync(mode: Long): Promise<dynamic>\n\n    fun getMappedRange(): ArrayBuffer\n\n    fun unmap()\n\n    fun destroy()\n}\n\nactual class BufferData(val data: Uint8Array) {\n\n    actual fun putBytes(bytes: ByteArray, offset: Int) {\n        //        data.set(bytes.toTypedArray(), offset)\n\n        TODO(\"Unsupported on the Web!\")\n    }\n\n    actual fun getBytes(): ByteArray {\n        return ArrayBufferUtils.toByteArray(data.buffer)\n    }\n}\n\nactual class BindGroupLayoutDescriptor\n    actual constructor(vararg val entries: BindGroupLayoutEntry) {}\n\nactual class BindGroupEntry actual constructor(val binding: Long, resource: IntoBindingResource) {\n\n    val resource = resource.intoBindingResource()\n}\n\nactual class BindGroupDescriptor\n    actual constructor(layout: BindGroupLayout, vararg val entries: BindGroupEntry) {\n    val layout = layout.jsType\n}\n\nactual class BindGroup(val jsType: GPUBindGroup)\n\nexternal class GPUBindGroup\n\nactual interface IntoBindingResource {\n\n    fun intoBindingResource(): dynamic\n}\n\nactual class Origin3D actual constructor(val x: Long, val y: Long, val z: Long)\n\nactual class TextureCopyView\n    actual constructor(texture: Texture, val mipLevel: Long, val origin: Origin3D) {\n    val texture = texture.jsType\n}\n\nactual class BufferCopyView\n    actual constructor(\n        buffer: Buffer, val bytesPerRow: Int, val rowsPerImage: Int, val offset: Long\n    ) {\n\n    val buffer = buffer.jsType\n}\n\nactual class SamplerDescriptor\n    actual constructor(\n        compare: CompareFunction?,\n        addressModeU: AddressMode,\n        addressModeV: AddressMode,\n        addressModeW: AddressMode,\n        magFilter: FilterMode,\n        minFilter: FilterMode,\n        mipmapFilter: FilterMode,\n        val lodMinClamp: Float,\n        val lodMaxClamp: Float,\n        val maxAnisotrophy: Short\n    ) {\n\n    // compare not needed on web because its not a comparison sampler\n    val compare = compare?.jsType ?: undefined\n    val addressModeU = addressModeU.jsType\n    val addressModeV = addressModeV.jsType\n    val addressModeW = addressModeW.jsType\n    val magFilter = magFilter.jsType\n    val minFilter = minFilter.jsType\n    val mipmapFilter = mipmapFilter.jsType\n}\n\nactual class Sampler(val jsType: GPUSampler) : IntoBindingResource {\n\n    override fun intoBindingResource(): dynamic {\n        return jsType\n    }\n}\n\nexternal class GPUSampler\n\nactual class ComputePipelineDescriptor\n    actual constructor(val layout: PipelineLayout, val computeStage: ProgrammableStageDescriptor)\n\nactual enum class TextureFormat(val jsType: String) {\n    R8_UNORM(\"r8unorm\"),\n    R8_SNORM(\"r8snorm\"),\n    R8_UINT(\"r8uint\"),\n    R8_SINT(\"r8sint\"),\n    R16_UINT(\"r16uint\"),\n    R16_SINT(\"r16sint\"),\n    R16_FLOAT(\"r16float\"),\n    RG8_UNORM(\"rg8unorm\"),\n    RG8_SNORM(\"rg8snorm\"),\n    RG8_UINT(\"rg8uint\"),\n    RG8_SINT(\"rg8sint\"),\n    R32_UINT(\"r32uint\"),\n    R32_SINT(\"r32sint\"),\n    R32_FLOAT(\"r32float\"),\n    RG16_UINT(\"rg16uint\"),\n    RG16_SINT(\"rg16sint\"),\n    RG16_FLOAT(\"rg16float\"),\n    RGBA8_UNORM(\"rgba8unorm\"),\n    RGBA8_UNORM_SRGB(\"rgba8unorm-srgb\"),\n    RGBA8_SNORM(\"rgbasnorm\"),\n    RGBA8_UINT(\"rgba8uint\"),\n    RGBA8_SINT(\"rgba8sint\"),\n    BGRA8_UNORM(\"bgra8unorm\"),\n    BGRA8_UNORM_SRGB(\"bgra8unorm-srgb\"),\n    RGB10A2_UNORM(\"rgb10a2unorm\"),\n    RG11B10_FLOAT(\"rg11b10float\"),\n    RG32_UINT(\"rg32uint\"),\n    RG32_SINT(\"rg32sint\"),\n    RG32_FLOAT(\"rg32float\"),\n    RGBA16_UINT(\"rgba16uint\"),\n    RGBA16_SINT(\"rgba16sint\"),\n    RGBA16_FLOAT(\"rgba16float\"),\n    RGBA32_UINT(\"rgba32uint\"),\n    RGBA32_SINT(\"rgba32sint\"),\n    RGBA32_FLOAT(\"rgba32float\"),\n    DEPTH32_FLOAT(\"depth32float\"),\n    DEPTH24_PLUS(\"depth24plus\"),\n    DEPTH24_PLUS_STENCIL8(\"depth32plus-stencil8\"),\n}\n\nactual enum class BlendOperation(val jsType: String) {\n    ADD(\"add\"),\n    SUBTRACT(\"subtract\"),\n    REVERSE_SUBTRACT(\"reverse-subtract\"),\n    MIN(\"min\"),\n    MAX(\"max\"),\n}\n\nactual enum class StencilOperation(val jsType: String) {\n    KEEP(\"keep\"),\n    ZERO(\"zero\"),\n    REPLACE(\"replace\"),\n    INVERT(\"invert\"),\n    INCREMENT_CLAMP(\"increment-clamp\"),\n    DECREMENT_CLAMP(\"decrement-clamp\"),\n    INCREMENT_WRAP(\"increment-wrap\"),\n    DECREMENT_WRAP(\"decrement-wrap\"),\n}\n\nactual enum class BlendFactor(val jsType: String) {\n    ZERO(\"zero\"),\n    ONE(\"one\"),\n    SRC_COLOR(\"src-color\"),\n    ONE_MINUS_SRC_COLOR(\"one-minus-src-color\"),\n    SRC_ALPHA(\"src-alpha\"),\n    ONE_MINUS_SRC_ALPHA(\"one-minus-src-alpha\"),\n    DST_COLOR(\"dst-color\"),\n    ONE_MINUS_DST_COLOR(\"one-minus-dst-color\"),\n    DST_ALPHA(\"dst-alpha\"),\n    ONE_MINUS_DST_ALPHA(\"one-minus-dst-alpha\"),\n    SRC_ALPHA_SATURATED(\"src-alpha-saturated\"),\n    BLEND_COLOR(\"blend-color\"),\n    ONE_MINUS_BLEND_COLOR(\"one-minus-blend-color\"),\n}\n\nactual enum class IndexFormat(val jsType: String) {\n    UINT16(\"uint16\"),\n    UINT32(\"uint32\"),\n}\n\nactual enum class VertexFormat(val jsType: String) {\n    UCHAR2(\"uchar2\"),\n    UCHAR4(\"uchar4\"),\n    CHAR2(\"char2\"),\n    CHAR4(\"char4\"),\n    UCHAR2_NORM(\"uchar2norm\"),\n    UCHAR4_NORM(\"uchar4norm\"),\n    CHAR2_NORM(\"char2norm\"),\n    CHAR4_NORM(\"char4norm\"),\n    USHORT2(\"ushort2\"),\n    USHORT4(\"ushort4\"),\n    SHORT2(\"short2\"),\n    SHORT4(\"short4\"),\n    USHORT2_NORM(\"ushort2norm\"),\n    USHORT4_NORM(\"ushort4norm\"),\n    SHORT2_NORM(\"short2norm\"),\n    SHORT4_NORM(\"short4norm\"),\n    HALF2(\"half2\"),\n    HALF4(\"half4\"),\n    FLOAT(\"float\"),\n    FLOAT2(\"float2\"),\n    FLOAT3(\"float3\"),\n    FLOAT4(\"float4\"),\n    UINT(\"uint\"),\n    UINT2(\"uint2\"),\n    UINT3(\"uint3\"),\n    UINT4(\"uint4\"),\n    INT(\"int\"),\n    INT2(\"int2\"),\n    INT3(\"int3\"),\n    INT4(\"int4\"),\n}\n\nactual enum class TextureAspect(val jsType: String) {\n    ALL(\"all\"),\n    STENCIL_ONLY(\"stencil-only\"),\n    DEPTH_ONLY(\"depth-only\"),\n}\n\nactual enum class TextureViewDimension(val jsType: String) {\n    D1(\"1d\"),\n    D2(\"2d\"),\n    D2_ARRAY(\"2d-array\"),\n    CUBE(\"cube\"),\n    CUBE_ARRAY(\"cube-array\"),\n    D3(\"3d\"),\n}\n\nactual enum class LoadOp(val jsType: String) {\n    CLEAR(\"clear\"),\n    LOAD(\"load\"),\n}\n\nactual enum class StoreOp(val jsType: String) {\n    CLEAR(\"clear\"),\n    STORE(\"store\"),\n}\n\nactual enum class BindingType(val jsType: String) {\n    UNIFORM_BUFFER(\"uniform-buffer\"),\n    STORAGE_BUFFER(\"storage-buffer\"),\n    READONLY_STORAGE_BUFFER(\"readonly-storage-buffer\"),\n    SAMPLER(\"sampler\"),\n    COMPARISON_SAMPLER(\"comparison-sampler\"),\n    SAMPLED_TEXTURE(\"sampled-texture\"),\n    READONLY_STORAGE_TEXTURE(\"readonly-storage-texture\"),\n    WRITEONLY_STORAGE_TEXTURE(\"writeonly-storage-texture\"),\n}\n\nactual enum class AddressMode(val jsType: String) {\n    CLAMP_TO_EDGE(\"clamp-to-edge\"),\n    REPEAT(\"repeat\"),\n    MIRROR_REPEAT(\"mirror-repeat\"),\n}\n\nactual enum class FilterMode(val jsType: String) {\n    NEAREST(\"nearest\"),\n    LINEAR(\"linear\"),\n}\n\nactual enum class CompareFunction(val jsType: String) {\n    UNDEFINED(\"undefined\"),\n    NEVER(\"never\"),\n    LESS(\"less\"),\n    EQUAL(\"equal\"),\n    LESS_EQUAL(\"less-equal\"),\n    GREATER(\"greater\"),\n    NOT_EQUAL(\"not-equal\"),\n    GREATER_EQUAL(\"greater-equal\"),\n    ALWAYS(\"always\"),\n}\n\nactual enum class TextureComponentType(val jsType: String) {\n    FLOAT(\"float\"),\n    SINT(\"sint\"),\n    UINT(\"uint\")\n}\n","package io.github.kgpu\n\nimport kotlinx.browser.document as jsDocument\nimport kotlinx.browser.window as jsWindow\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.events.EventListener\nimport org.w3c.dom.events.KeyboardEvent\nimport org.w3c.dom.events.MouseEvent\n\nactual class Window actual constructor() {\n\n    private val canvas = kotlinx.browser.document.getElementById(\"kgpuCanvas\") as HTMLCanvasElement\n    private val context = canvas.getContext(\"gpupresent\")\n    private var canvasHackRan = false\n    actual var windowSize: WindowSize = WindowSize(canvas.width, canvas.height)\n        private set\n    actual var onResize: (size: WindowSize) -> Unit = {}\n    actual var onKeyDown: (event: KeyEvent) -> Unit = {}\n    actual var onKeyUp: (key: KeyEvent) -> Unit = {}\n    actual var onKeyTyped: (c: Char) -> Unit = {}\n    actual var onMouseClick: (event: ClickEvent) -> Unit = {}\n    actual var onMouseRelease: (event: ClickEvent) -> Unit = {}\n    actual var onMouseMove: (x: Float, y: Float) -> Unit = { _, _ -> }\n    actual var mouseX = 0f\n        private set\n    actual var mouseY = 0f\n        private set\n\n    init {\n        jsWindow.addEventListener(\n            \"keydown\",\n            { event ->\n                val keyEvent = event as KeyboardEvent\n\n                onKeyDown(toKeyEvent(keyEvent))\n            })\n\n        jsWindow.addEventListener(\n            \"keypress\",\n            { event ->\n                val keyEvent = event as KeyboardEvent\n\n                onKeyTyped(keyEvent.key[0])\n            })\n\n        jsWindow.addEventListener(\n            \"keyup\",\n            EventListener { event ->\n                val keyEvent = event as KeyboardEvent\n\n                onKeyUp(toKeyEvent(keyEvent))\n            })\n\n        jsWindow.addEventListener(\n            \"mousedown\",\n            EventListener { event ->\n                val mouseEvent = event as MouseEvent\n\n                if (isEventOnCanvas(mouseEvent)) {\n                    onMouseClick(toClickEvent(mouseEvent))\n                }\n            })\n\n        jsWindow.addEventListener(\n            \"mouseup\",\n            EventListener { event ->\n                val mouseEvent = event as MouseEvent\n\n                if (isEventOnCanvas(mouseEvent)) {\n                    onMouseRelease(toClickEvent(mouseEvent))\n                }\n            })\n\n        canvas.onmousemove =\n            { event: MouseEvent ->\n                val rect = canvas.getBoundingClientRect()\n\n                if (isEventOnCanvas(event)) {\n                    mouseX = (event.clientX - rect.left).toFloat()\n                    mouseY = (event.clientY - rect.top).toFloat()\n                    onMouseMove(mouseX, mouseY)\n                }\n\n                asDynamic() // On mouse move requires we return a dynamic\n            }\n    }\n\n    actual fun setTitle(title: String) {\n        jsDocument.title = title\n    }\n\n    actual fun isCloseRequested(): Boolean {\n        return false\n    }\n\n    actual fun update() {\n        if (canvas.width != windowSize.width || canvas.height != windowSize.height) {\n            windowSize = WindowSize(canvas.width, canvas.height)\n            onResize(windowSize)\n        }\n    }\n\n    actual fun configureSwapChain(desc: SwapChainDescriptor): SwapChain {\n        if (!canvasHackRan) {\n            canvas.width +=\n                1 // Hack to get around chromium not showing canvas unless clicked/resized\n            canvasHackRan = true\n            windowSize = WindowSize(canvas.width, canvas.height)\n        }\n\n        return SwapChain(context.asDynamic().configureSwapChain(desc) as GPUSwapChain)\n    }\n\n    actual fun resize(width: Int, height: Int) {\n        canvas.width = width\n        canvas.height = height\n\n        update()\n    }\n\n    private fun isEventOnCanvas(event: MouseEvent): Boolean {\n        val rect = canvas.getBoundingClientRect()\n        val x = event.pageX\n        val y = event.pageY\n\n        // Do not trigger if clicked on padding/border\n        return rect.left < x && rect.right > x && rect.top < y && rect.bottom > y\n    }\n}\n\nprivate fun toClickEvent(event: MouseEvent): ClickEvent {\n    return ClickEvent(\n        when (event.button.toInt()) {\n            0 -> MouseButton.LEFT\n            1 -> MouseButton.MIDDLE\n            2 -> MouseButton.RIGHT\n            else -> MouseButton.UNKNOWN\n        },\n        event.shiftKey,\n        event.ctrlKey,\n        event.altKey)\n}\n\nprivate fun toKeyEvent(event: KeyboardEvent): KeyEvent {\n    val key =\n        when (event.keyCode) {\n            8 -> Key.BACKSPACE\n            9 -> Key.TAB\n            13 -> Key.ENTER\n            16 -> Key.SHIFT\n            17 -> Key.CTRL\n            18 -> Key.ALT\n            20 -> Key.CAPS_LOCK\n            27 -> Key.ESCAPE\n            32 -> Key.SPACE\n            37 -> Key.LEFT_ARROW\n            38 -> Key.UP_ARROW\n            39 -> Key.RIGHT_ARROW\n            40 -> Key.DOWN_ARROW\n            46 -> Key.DELETE\n            48 -> Key.DIGIT_0\n            49 -> Key.DIGIT_1\n            50 -> Key.DIGIT_2\n            51 -> Key.DIGIT_3\n            52 -> Key.DIGIT_4\n            53 -> Key.DIGIT_5\n            54 -> Key.DIGIT_6\n            55 -> Key.DIGIT_7\n            56 -> Key.DIGIT_8\n            57 -> Key.DIGIT_9\n            65 -> Key.A\n            66 -> Key.B\n            67 -> Key.C\n            68 -> Key.D\n            69 -> Key.E\n            70 -> Key.F\n            71 -> Key.G\n            72 -> Key.H\n            73 -> Key.I\n            74 -> Key.J\n            75 -> Key.K\n            76 -> Key.L\n            77 -> Key.M\n            78 -> Key.N\n            79 -> Key.O\n            80 -> Key.P\n            81 -> Key.Q\n            82 -> Key.R\n            83 -> Key.S\n            84 -> Key.T\n            85 -> Key.U\n            86 -> Key.V\n            87 -> Key.W\n            88 -> Key.X\n            89 -> Key.Y\n            90 -> Key.Z\n            112 -> Key.F1\n            113 -> Key.F2\n            114 -> Key.F3\n            115 -> Key.F4\n            116 -> Key.F5\n            117 -> Key.F6\n            118 -> Key.F7\n            119 -> Key.F8\n            120 -> Key.F9\n            121 -> Key.F10\n            122 -> Key.F11\n            123 -> Key.F12\n            186 -> Key.SEMICOLON\n            187 -> Key.EQUAL\n            188 -> Key.COMMA\n            189 -> Key.MINUS\n            190 -> Key.PERIOD\n            191 -> Key.SLASH\n            192 -> Key.ACCENT_GRAVE\n            219 -> Key.LEFT_BRACKET\n            220 -> Key.BACKSLASH\n            221 -> Key.RIGHT_BRACKET\n            222 -> Key.APOSTROPHE\n            else -> Key.UNKNOWN\n        }\n\n    return KeyEvent(key, event.shiftKey, event.ctrlKey, event.altKey)\n}\n","package io.github.kgpu.internal\n\nimport org.khronos.webgl.ArrayBuffer\nimport org.khronos.webgl.Uint8Array\nimport org.khronos.webgl.get\n\nobject ArrayBufferUtils {\n\n    fun toByteArray(buffer: ArrayBuffer): ByteArray {\n        val bytes = Uint8Array(buffer)\n        val output = ByteArray(bytes.length)\n\n        for (i: Int in 0..bytes.length) {\n            output[i] = bytes[i]\n        }\n\n        return output\n    }\n}\n","package io.github.kgpu.kshader\n\nimport org.khronos.webgl.ArrayBuffer\nimport org.khronos.webgl.Uint8Array\nimport org.khronos.webgl.get\n\nactual object KShader {\n\n    actual fun init() {\n        GlslangLibrary.init()\n    }\n\n    actual suspend fun compile(name: String, source: String, type: KShaderType): ByteArray {\n        val glslang = GlslangLibrary.getGlslang()\n        val data = glslang.compileGLSL(source, type.jsType, false)\n\n        return toByteArray(data.buffer)\n    }\n}\n\nactual enum class KShaderType(internal val jsType: String) {\n    VERTEX(\"vertex\"),\n    FRAGMENT(\"fragment\"),\n    COMPUTE(\"compute\")\n}\n\nfun toByteArray(buffer: ArrayBuffer): ByteArray {\n    val bytes = Uint8Array(buffer)\n    val output = ByteArray(bytes.length)\n\n    for (i: Int in 0..bytes.length) {\n        output[i] = bytes[i]\n    }\n\n    return output\n}\n","package io.github.kgpu.kshader\n\nimport kotlin.js.Promise\nimport kotlinx.browser.document\nimport kotlinx.coroutines.await\nimport org.khronos.webgl.Uint32Array\n\nprivate const val glslangGlobalVariable = \"window.kshader_glslang\"\n\nprivate const val glslangUrl =\n    \"https://cdn.jsdelivr.net/npm/@webgpu/glslang@0.0.15/dist/web-devel/glslang.js\"\n\nprivate const val scriptSrc =\n    \"\"\"\n    $glslangGlobalVariable = import('$glslangUrl').then((module) => {\n        return module.default();\n    });\n\"\"\"\n\ninternal object GlslangLibrary {\n\n    fun init() {\n        val script = document.createElement(\"script\")\n        script.id = \"kshader_internal_glslang\"\n        script.setAttribute(\"type\", \"module\")\n        script.innerHTML = scriptSrc\n\n        document.body?.append(script)\n    }\n\n    suspend fun getGlslang(): Glslang {\n        if (js(glslangGlobalVariable) == undefined)\n            throw RuntimeException(\"Failed to call KShader.init()!\")\n\n        return (js(glslangGlobalVariable) as Promise<Glslang>).await()\n    }\n}\n\ninternal external class Glslang {\n\n    fun compileGLSL(glsl: String, shaderType: String, debug: Boolean): Uint32Array\n}\n","package io.github.kgpu.kcgmath\n\n/** Miscellaneous utility functions */\nobject MathUtils {\n    /** A Float Version of PI to prevent unneccessary casts */\n    const val PIf = kotlin.math.PI.toFloat()\n\n    /** Converts degreees to radians */\n    fun toRadians(deg: Float): Float {\n        return deg / 180f * PIf\n    }\n\n    /** Converts radians to degrees */\n    fun toDegrees(rad: Float): Float {\n        return rad / PIf * 180f\n    }\n}\n","package io.github.kgpu.kcgmath;\n\nimport kotlin.math.*;\n\n/**\n * A column major 4x4 matrix backed by floats.\n *\n * ```\n * M00 M01 M02 M03\n * M10 M11 M12 M13\n * M20 M21 M22 M23\n * M30 M31 M32 M33\n * ```\n *\n * To make a matrix from values, use:\n * [Matrix4.fromRows]\n * or\n * [Matrix4.fromCols]\n */\nclass Matrix4 internal constructor(private val values: FloatArray){\n\n    /**\n     * Creates a 4x4 Identity Matrix\n     */\n    constructor() : this (IDENTITY.copyInto(FloatArray(16)))\n\n    init {\n        assertValid(values)\n    }\n\n    companion object {\n        const val M00 = 0\n        const val M10 = 1\n        const val M20 = 2\n        const val M30 = 3\n\n        const val M01 = 4\n        const val M11 = 5\n        const val M21 = 6\n        const val M31 = 7\n\n        const val M02 = 8\n        const val M12 = 9\n        const val M22 = 10\n        const val M32 = 11\n\n        const val M03 = 12\n        const val M13 = 13\n        const val M23 = 14\n        const val M33 = 15\n\n        /**\n        * A 4x4 Identity Matrix\n        */\n        val IDENTITY = floatArrayOf(\n            1f, 0f, 0f, 0f, // column-0\n            0f, 1f, 0f, 0f, // column-1\n            0f, 0f, 1f, 0f, // column-2\n            0f, 0f, 0f, 1f  // column-3\n        )\n\n\n        /**\n         * Generates a matrix from row major order. \n         * \n         * \n         * ```kotlin\n         * fromRows(\n         *   A, B, C, D,\n         *   E, F, G, H,\n         *   I, J, K, L,\n         *   M, N, O, P\n         * )\n         * ```\n         * Produces: \n         * ```\n         * A, B, C, D,\n         * E, F, G, H,\n         * I, J, K, L,\n         * M, N, O, P\n         * ```\n         */\n        fun fromRows(\n            M00: Float, M01: Float, M02: Float, M03: Float,\n            M10: Float, M11: Float, M12: Float, M13: Float,\n            M20: Float, M21: Float, M22: Float, M23: Float,\n            M30: Float, M31: Float, M32: Float, M33: Float\n        ) : Matrix4 {\n            return Matrix4(floatArrayOf(\n                M00, M10, M20, M30,\n                M01, M11, M21, M31,\n                M02, M12, M22, M32, \n                M03, M13, M23, M33\n            ))\n        }\n\n        /**\n         * Generates a matrix from column major order. \n         * \n         * \n         * ```kotlin\n         * fromCols(\n         *   A, B, C, D,\n         *   E, F, G, H,\n         *   I, J, K, L,\n         *   M, N, O, P\n         * )\n         * ```\n         * Produces: \n         * ```\n         * A, E, I, M,\n         * B, F, J, N\n         * C, G, K, O\n         * D, H, L, P\n         * ```\n         */\n        fun fromCols(\n            M00: Float, M10: Float, M20: Float, M30: Float,\n            M01: Float, M11: Float, M21: Float, M31: Float,\n            M02: Float, M12: Float, M22: Float, M32: Float,\n            M03: Float, M13: Float, M23: Float, M33: Float\n        ) : Matrix4 {\n            return Matrix4(floatArrayOf(\n                M00, M10, M20, M30,\n                M01, M11, M21, M31,\n                M02, M12, M22, M32, \n                M03, M13, M23, M33\n            ))\n        }\n\n        private fun assertValid(floats: FloatArray){\n            if(floats.size != 16){\n                throw UnsupportedOperationException(\"Invalid matrix! Size = \" + floats.size);\n            }\n        }\n    }\n\n    fun add(other: Matrix4) : Matrix4{\n        assertValid(other.values)\n\n        for(i in 0..15){\n            values[i] += other.values[i]\n        }\n\n        return this\n    }\n\n    fun sub(other: Matrix4) : Matrix4{\n        assertValid(other.values)\n\n        for(i in 0..15){\n            values[i] -= other.values[i]\n        }\n\n        return this\n    }\n\n    fun scale(scalar: Float) : Matrix4 {\n        for(i in 0..15){\n            values[i] *= scalar\n        }\n\n        return this\n    }\n\n    fun mul(other: Matrix4) : Matrix4{\n        val outputs = FloatArray(16);\n\n        for(row in 0..3){   \n            for(column in 0..3){\n                val columnStart = column * 4\n                var sum = (values[row] * other.values[columnStart] + \n                    values[row + 4] * other.values[columnStart + 1] + \n                    values[row + 8] * other.values[columnStart + 2] + \n                    values[row + 12] * other.values[columnStart + 3])\n            \n                outputs[row + 4 * column] = sum\n            }\n        }\n\n        return set(outputs);\n    }\n\n    /**\n     * Copies the given array into this matrix\n     * \n     * @throws UnsupportedOperationException if the passed array does not have a size of 16\n     */\n    fun set(values: FloatArray) : Matrix4{\n        assertValid(values)\n        values.copyInto(this.values)\n\n        return this\n    }\n\n    fun ortho(left: Float, right: Float, top: Float, bottom: Float, zNear: Float, zFar: Float) : Matrix4{\n        set(IDENTITY)\n\n        values[M00] = 2 / (right - left)\n        values[M11] = 2 / (top - bottom)\n        values[M22] = 1 / (zNear - zFar)\n        values[M03] = (right + left) / (left - right)\n        values[M13] = (top + bottom) / (bottom - top)\n        values[M23] = zNear / (zNear - zFar)\n        \n        return this\n    }\n\n    fun perspective(fov: Float, aspect: Float, zNear: Float, zFar: Float) : Matrix4 {\n        values.fill(0f)\n        val h = tan(fov * 0.5f)\n        values[M00] = 1.0f / (h * aspect)\n        values[M11] = 1.0f / h\n        values[M22] = zFar / (zNear - zFar)\n        values[M23] = zFar * zNear / (zNear - zFar)\n        values[M32] = -1f\n    \n        return this;\n    }\n\n    fun lookAt(eye: Vec3, center: Vec3, up: Vec3) : Matrix4{\n        set(IDENTITY)\n\n        val direction = eye.copy().sub(center).normalize();\n        val left = Vec3(\n            up.y * direction.z - up.z * direction.y,\n            up.z * direction.x - up.x * direction.z,\n            up.x * direction.y - up.y * direction.x\n        ).normalize()\n\n        val newUp = Vec3(\n            direction.y * left.z - direction.z * left.y,\n            direction.z * left.x - direction.x * left.z,\n            direction.x * left.y - direction.y * left.x,\n        )\n\n        values[M00] = left.x\n        values[M10] = newUp.x\n        values[M20] = direction.x\n        values[M30] = 0f\n        values[M01] = left.y\n        values[M11] = newUp.y \n        values[M21] = direction.y\n        values[M31] = 0f\n        values[M02] = left.z\n        values[M12] = newUp.z\n        values[M22] = direction.z \n        values[M32] = 0f\n        values[M03] = -left.dot(eye)\n        values[M13] = -newUp.dot(eye)\n        values[M23] = -direction.dot(eye)\n        values[M33] = 1f\n\n        return this\n    }\n\n    fun rotate(angleX: Float, angleY: Float, angleZ: Float) : Matrix4{\n        val sinX = sin(angleX)\n        val sinY = sin(angleY)\n        val sinZ = sin(angleZ)\n        val cosX = cos(angleX)\n        val cosY = cos(angleY)\n        val cosZ = cos(angleZ)\n\n        val nm01 = values[M01] * cosX + values[M02] * sinX\n        val nm11 = values[M11] * cosX + values[M12] * sinX \n        val nm21 = values[M21] * cosX + values[M22] * sinX \n        val nm31 = values[M31] * cosX + values[M32] * sinX \n        val nm02 = values[M01] * -sinX + values[M02] * cosX\n        val nm12 = values[M11] * -sinX + values[M12] * cosX\n        val nm22 = values[M21] * -sinX + values[M22] * cosX\n        val nm32 = values[M31] * -sinX + values[M32] * cosX\n        val nm00 = values[M00] * cosY + nm02 * -sinY \n        val nm10 = values[M10] * cosY + nm12 * -sinY \n        val nm20 = values[M20] * cosY + nm22 * -sinY \n        val nm30 = values[M30] * cosY + nm32 * -sinY \n\n        values[M02] = values[M00] * sinY + nm02 * cosY\n        values[M12] = values[M10] * sinY + nm12 * cosY\n        values[M22] = values[M20] * sinY + nm22 * cosY\n        values[M32] = values[M30] * sinY + nm32 * cosY\n\n        values[M00] = nm00 * cosZ + nm01 * sinZ\n        values[M10] = nm10 * cosZ + nm11 * sinZ\n        values[M20] = nm20 * cosZ + nm21 * sinZ\n        values[M30] = nm30 * cosZ + nm31 * sinZ\n        \n        values[M01] = nm00 * -sinZ + nm01 * cosZ\n        values[M11] = nm10 * -sinZ + nm11 * cosZ\n        values[M21] = nm20 * -sinZ + nm21 * cosZ\n        values[M31] = nm30 * -sinZ + nm31 * cosZ\n\n        return this \n    }\n\n    fun transpose() : Matrix4{\n        fun swap(indexA: Int, indexB: Int){\n            val temp = values[indexA]\n            values[indexA] = values[indexB]\n            values[indexB] = temp\n        }\n\n        swap(M10, M01)\n        swap(M20, M02)\n        swap(M30, M03)\n        swap(M21, M12)\n        swap(M31, M13)\n        swap(M32, M23)\n\n        return this;\n    }\n\n    fun invert() : Matrix4{\n        val a = values[M00] * values[M11] - values[M10] * values[M01]\n        val b = values[M00] * values[M21] - values[M20] * values[M01]\n        val c = values[M00] * values[M31] - values[M30] * values[M01]\n        val d = values[M10] * values[M21] - values[M20] * values[M11]\n        val e = values[M10] * values[M31] - values[M30] * values[M11]\n        val f = values[M20] * values[M31] - values[M30] * values[M21]\n        val g = values[M02] * values[M13] - values[M12] * values[M03]\n        val h = values[M02] * values[M23] - values[M22] * values[M03]\n        val i = values[M02] * values[M33] - values[M32] * values[M03]\n        val j = values[M12] * values[M23] - values[M22] * values[M13]\n        val k = values[M12] * values[M33] - values[M32] * values[M13]\n        val l = values[M22] * values[M33] - values[M32] * values[M23]\n        val det = 1 / (a * l - b * k + c * j + d * i - e * h + f * g)\n\n        val nm00 = multAdd(values[M11], l, multAdd(-values[M21], k, values[M31] * j)) * det\n        val nm10 = multAdd(-values[M10], l, multAdd(values[M20], k, -values[M30] * j)) * det\n        val nm20 = multAdd(values[M13], f, multAdd(-values[M23], e, values[M33] * d)) * det\n        val nm30 = multAdd(-values[M12], f, multAdd(values[M22], e, -values[M32] * d)) * det\n        val nm01 = multAdd(-values[M01], l, multAdd(values[M21], i, -values[M31] * h)) * det\n        val nm11 = multAdd( values[M00], l, multAdd(-values[M20], i,  values[M30] * h)) * det;\n        val nm21 = multAdd(-values[M03], f, multAdd( values[M23], c, -values[M33] * b)) * det;\n        val nm31 = multAdd( values[M02], f, multAdd(-values[M22], c,  values[M32] * b)) * det;\n        val nm02 = multAdd( values[M01], k, multAdd(-values[M11], i,  values[M31] * g)) * det;\n        val nm12 = multAdd(-values[M00], k, multAdd( values[M10], i, -values[M30] * g)) * det;\n        val nm22 = multAdd( values[M03], e, multAdd(-values[M13], c,  values[M33] * a)) * det;\n        val nm32 = multAdd(-values[M02], e, multAdd( values[M12], c, -values[M32] * a)) * det;\n        val nm03 = multAdd(-values[M01], j, multAdd( values[M11], h, -values[M21] * g)) * det;\n        val nm13 = multAdd( values[M00], j, multAdd(-values[M10], h,  values[M20] * g)) * det;\n        val nm23 = multAdd(-values[M03], d, multAdd( values[M13], b, -values[M23] * a)) * det;\n        val nm33 = multAdd( values[M02], d, multAdd(-values[M12], b,  values[M22] * a)) * det;\n        \n        values[M00] = nm00\n        values[M10] = nm10\n        values[M20] = nm20\n        values[M30] = nm30\n        values[M01] = nm01\n        values[M11] = nm11\n        values[M21] = nm21\n        values[M31] = nm31\n        values[M02] = nm02\n        values[M12] = nm12\n        values[M22] = nm22\n        values[M32] = nm32\n        values[M03] = nm03\n        values[M13] = nm13\n        values[M23] = nm23\n        values[M33] = nm33 \n\n        return this\n    }\n\n    private fun multAdd(a: Float, b: Float, c: Float) : Float {\n        return a * b + c\n    }\n\n    /**\n     * Creates a copy of this matrix. Changing the copy will not affect\n     * this array.\n     */\n    fun clone() : Matrix4{\n        return Matrix4(values.copyOf())\n    }\n\n    override fun equals(other: Any?): Boolean{\n        if (this === other) return true\n        if (other !is Matrix4) return false\n\n        values.forEachIndexed{ index, value -> \n            if(other.values[index] != value) return false\n        }\n\n        return true\n    }\n\n    override fun hashCode(): Int{\n        return values.hashCode()\n    }\n\n    override fun toString() : String {\n        val builder = StringBuilder()\n        builder.append(\"{\")\n\n        for(i in 0..15){\n            builder.append(values[i])\n\n            if(i != 15) builder.append(\", \")\n        }\n\n        builder.append(\"}\")\n        return builder.toString()\n    }\n\n    /**\n     * Returns the array backing this matrix in column major order. Warning: changing the returned \n     * array will change this matrix.\n     */\n    fun toFloats() : FloatArray{\n        return values\n    }\n\n    /**\n     * Returns a byte array of the values stored in this matrix. \n     * The values will be in column major order\n     */\n    fun toBytes() : ByteArray {\n        val bytes = ByteArray(64)\n\n        values.forEachIndexed { index, float ->\n            run {\n                val i = index * 4\n                val bits = float.toRawBits()\n\n                bytes[i + 3] = (bits shr 24).toByte()\n                bytes[i + 2] = (bits shr 16).toByte()\n                bytes[i + 1] = (bits shr 8).toByte()\n                bytes[i + 0] = bits.toByte()\n            }\n        }\n\n        return bytes\n    }\n}","package io.github.kgpu.kcgmath\n\nimport kotlin.math.*\n\ndata class Vec3(var x: Float, var y: Float, var z: Float) {\n\n    constructor() : this(0f, 0f, 0f)\n    constructor(x: Float, y: Float) : this(x, y, 0f)\n\n    companion object {\n        val UNIT_X = Vec3(1f, 0f, 0f)\n        val UNIT_Y = Vec3(0f, 1f, 0f)\n        val UNIT_Z = Vec3(0f, 0f, 1f)\n        val ZERO = Vec3(0f, 0f, 0f)\n        val ONE = Vec3(1f, 1f, 1f)\n    }\n\n    fun mul(scalar: Float): Vec3 {\n        x *= scalar\n        y *= scalar\n        z *= scalar\n\n        return this\n    }\n\n    fun mul(other: Vec3): Vec3 {\n        x *= other.x\n        y *= other.y\n        z *= other.z\n\n        return this\n    }\n\n    fun normalize(): Vec3 {\n        var length = length()\n\n        if (length > 0) {\n            length = 1 / length\n        }\n\n        x *= length\n        y *= length\n        z *= length\n\n        return this\n    }\n\n    fun angle(other: Vec3): Float {\n        val mag = this.length() * other.length()\n        return if (mag != 0f) {\n            val cosTheta = dot(other) / mag\n\n            acos(cosTheta.coerceIn(-1f, 1f))\n        } else {\n            0f\n        }\n    }\n\n    fun dot(other: Vec3): Float {\n        return this.x * other.x + this.y * other.y + this.z * other.z\n    }\n\n    fun add(other: Vec3): Vec3 {\n        x += other.x\n        y += other.y\n        z += other.z\n\n        return this\n    }\n\n    fun add(x: Float, y: Float, z: Float): Vec3 {\n        this.x += x\n        this.y += y\n        this.z += z\n\n        return this\n    }\n\n    fun sub(other: Vec3): Vec3 {\n        x -= other.x\n        y -= other.y\n        z -= other.z\n\n        return this\n    }\n\n    fun sub(x: Float, y: Float, z: Float): Vec3 {\n        this.x -= x\n        this.y -= y\n        this.z -= z\n\n        return this\n    }\n\n    fun length(): Float {\n        return sqrt(lengthSquared())\n    }\n\n    fun lengthSquared(): Float {\n        return x.pow(2) + y.pow(2) + z.pow(2)\n    }\n\n    fun distance(other: Vec3): Float {\n        return sqrt(distanceSquared(other))\n    }\n\n    fun distanceSquared(other: Vec3): Float {\n        val x = other.x - x\n        val y = other.y - y\n        val z = other.z - z\n\n        return x.pow(2) + y.pow(2) + z.pow(2)\n    }\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.khronos.webgl\n\nimport kotlin.js.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external interface WebGLContextAttributes {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var depth: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var stencil: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var antialias: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultipliedAlpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var preserveDrawingBuffer: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var preferLowPowerToHighPerformance: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var failIfMajorPerformanceCaveat: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WebGLContextAttributes(alpha: Boolean? = true, depth: Boolean? = true, stencil: Boolean? = false, antialias: Boolean? = true, premultipliedAlpha: Boolean? = true, preserveDrawingBuffer: Boolean? = false, preferLowPowerToHighPerformance: Boolean? = false, failIfMajorPerformanceCaveat: Boolean? = false): WebGLContextAttributes {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    o[\"depth\"] = depth\n    o[\"stencil\"] = stencil\n    o[\"antialias\"] = antialias\n    o[\"premultipliedAlpha\"] = premultipliedAlpha\n    o[\"preserveDrawingBuffer\"] = preserveDrawingBuffer\n    o[\"preferLowPowerToHighPerformance\"] = preferLowPowerToHighPerformance\n    o[\"failIfMajorPerformanceCaveat\"] = failIfMajorPerformanceCaveat\n    return o\n}\n\npublic external abstract class WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLBuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLBuffer) to Kotlin\n */\npublic external abstract class WebGLBuffer : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLFramebuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLFramebuffer) to Kotlin\n */\npublic external abstract class WebGLFramebuffer : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLProgram](https://developer.mozilla.org/en/docs/Web/API/WebGLProgram) to Kotlin\n */\npublic external abstract class WebGLProgram : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLRenderbuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLRenderbuffer) to Kotlin\n */\npublic external abstract class WebGLRenderbuffer : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLShader](https://developer.mozilla.org/en/docs/Web/API/WebGLShader) to Kotlin\n */\npublic external abstract class WebGLShader : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLTexture](https://developer.mozilla.org/en/docs/Web/API/WebGLTexture) to Kotlin\n */\npublic external abstract class WebGLTexture : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLUniformLocation](https://developer.mozilla.org/en/docs/Web/API/WebGLUniformLocation) to Kotlin\n */\npublic external abstract class WebGLUniformLocation\n\n/**\n * Exposes the JavaScript [WebGLActiveInfo](https://developer.mozilla.org/en/docs/Web/API/WebGLActiveInfo) to Kotlin\n */\npublic external abstract class WebGLActiveInfo {\n    open val size: Int\n    open val type: Int\n    open val name: String\n}\n\n/**\n * Exposes the JavaScript [WebGLShaderPrecisionFormat](https://developer.mozilla.org/en/docs/Web/API/WebGLShaderPrecisionFormat) to Kotlin\n */\npublic external abstract class WebGLShaderPrecisionFormat {\n    open val rangeMin: Int\n    open val rangeMax: Int\n    open val precision: Int\n}\n\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface WebGLRenderingContextBase {\n    val canvas: HTMLCanvasElement\n    val drawingBufferWidth: Int\n    val drawingBufferHeight: Int\n    fun getContextAttributes(): WebGLContextAttributes?\n    fun isContextLost(): Boolean\n    fun getSupportedExtensions(): Array<String>?\n    fun getExtension(name: String): dynamic\n    fun activeTexture(texture: Int)\n    fun attachShader(program: WebGLProgram?, shader: WebGLShader?)\n    fun bindAttribLocation(program: WebGLProgram?, index: Int, name: String)\n    fun bindBuffer(target: Int, buffer: WebGLBuffer?)\n    fun bindFramebuffer(target: Int, framebuffer: WebGLFramebuffer?)\n    fun bindRenderbuffer(target: Int, renderbuffer: WebGLRenderbuffer?)\n    fun bindTexture(target: Int, texture: WebGLTexture?)\n    fun blendColor(red: Float, green: Float, blue: Float, alpha: Float)\n    fun blendEquation(mode: Int)\n    fun blendEquationSeparate(modeRGB: Int, modeAlpha: Int)\n    fun blendFunc(sfactor: Int, dfactor: Int)\n    fun blendFuncSeparate(srcRGB: Int, dstRGB: Int, srcAlpha: Int, dstAlpha: Int)\n    fun bufferData(target: Int, size: Int, usage: Int)\n    fun bufferData(target: Int, data: BufferDataSource?, usage: Int)\n    fun bufferSubData(target: Int, offset: Int, data: BufferDataSource?)\n    fun checkFramebufferStatus(target: Int): Int\n    fun clear(mask: Int)\n    fun clearColor(red: Float, green: Float, blue: Float, alpha: Float)\n    fun clearDepth(depth: Float)\n    fun clearStencil(s: Int)\n    fun colorMask(red: Boolean, green: Boolean, blue: Boolean, alpha: Boolean)\n    fun compileShader(shader: WebGLShader?)\n    fun compressedTexImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, data: ArrayBufferView)\n    fun compressedTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, data: ArrayBufferView)\n    fun copyTexImage2D(target: Int, level: Int, internalformat: Int, x: Int, y: Int, width: Int, height: Int, border: Int)\n    fun copyTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, x: Int, y: Int, width: Int, height: Int)\n    fun createBuffer(): WebGLBuffer?\n    fun createFramebuffer(): WebGLFramebuffer?\n    fun createProgram(): WebGLProgram?\n    fun createRenderbuffer(): WebGLRenderbuffer?\n    fun createShader(type: Int): WebGLShader?\n    fun createTexture(): WebGLTexture?\n    fun cullFace(mode: Int)\n    fun deleteBuffer(buffer: WebGLBuffer?)\n    fun deleteFramebuffer(framebuffer: WebGLFramebuffer?)\n    fun deleteProgram(program: WebGLProgram?)\n    fun deleteRenderbuffer(renderbuffer: WebGLRenderbuffer?)\n    fun deleteShader(shader: WebGLShader?)\n    fun deleteTexture(texture: WebGLTexture?)\n    fun depthFunc(func: Int)\n    fun depthMask(flag: Boolean)\n    fun depthRange(zNear: Float, zFar: Float)\n    fun detachShader(program: WebGLProgram?, shader: WebGLShader?)\n    fun disable(cap: Int)\n    fun disableVertexAttribArray(index: Int)\n    fun drawArrays(mode: Int, first: Int, count: Int)\n    fun drawElements(mode: Int, count: Int, type: Int, offset: Int)\n    fun enable(cap: Int)\n    fun enableVertexAttribArray(index: Int)\n    fun finish()\n    fun flush()\n    fun framebufferRenderbuffer(target: Int, attachment: Int, renderbuffertarget: Int, renderbuffer: WebGLRenderbuffer?)\n    fun framebufferTexture2D(target: Int, attachment: Int, textarget: Int, texture: WebGLTexture?, level: Int)\n    fun frontFace(mode: Int)\n    fun generateMipmap(target: Int)\n    fun getActiveAttrib(program: WebGLProgram?, index: Int): WebGLActiveInfo?\n    fun getActiveUniform(program: WebGLProgram?, index: Int): WebGLActiveInfo?\n    fun getAttachedShaders(program: WebGLProgram?): Array<WebGLShader>?\n    fun getAttribLocation(program: WebGLProgram?, name: String): Int\n    fun getBufferParameter(target: Int, pname: Int): Any?\n    fun getParameter(pname: Int): Any?\n    fun getError(): Int\n    fun getFramebufferAttachmentParameter(target: Int, attachment: Int, pname: Int): Any?\n    fun getProgramParameter(program: WebGLProgram?, pname: Int): Any?\n    fun getProgramInfoLog(program: WebGLProgram?): String?\n    fun getRenderbufferParameter(target: Int, pname: Int): Any?\n    fun getShaderParameter(shader: WebGLShader?, pname: Int): Any?\n    fun getShaderPrecisionFormat(shadertype: Int, precisiontype: Int): WebGLShaderPrecisionFormat?\n    fun getShaderInfoLog(shader: WebGLShader?): String?\n    fun getShaderSource(shader: WebGLShader?): String?\n    fun getTexParameter(target: Int, pname: Int): Any?\n    fun getUniform(program: WebGLProgram?, location: WebGLUniformLocation?): Any?\n    fun getUniformLocation(program: WebGLProgram?, name: String): WebGLUniformLocation?\n    fun getVertexAttrib(index: Int, pname: Int): Any?\n    fun getVertexAttribOffset(index: Int, pname: Int): Int\n    fun hint(target: Int, mode: Int)\n    fun isBuffer(buffer: WebGLBuffer?): Boolean\n    fun isEnabled(cap: Int): Boolean\n    fun isFramebuffer(framebuffer: WebGLFramebuffer?): Boolean\n    fun isProgram(program: WebGLProgram?): Boolean\n    fun isRenderbuffer(renderbuffer: WebGLRenderbuffer?): Boolean\n    fun isShader(shader: WebGLShader?): Boolean\n    fun isTexture(texture: WebGLTexture?): Boolean\n    fun lineWidth(width: Float)\n    fun linkProgram(program: WebGLProgram?)\n    fun pixelStorei(pname: Int, param: Int)\n    fun polygonOffset(factor: Float, units: Float)\n    fun readPixels(x: Int, y: Int, width: Int, height: Int, format: Int, type: Int, pixels: ArrayBufferView?)\n    fun renderbufferStorage(target: Int, internalformat: Int, width: Int, height: Int)\n    fun sampleCoverage(value: Float, invert: Boolean)\n    fun scissor(x: Int, y: Int, width: Int, height: Int)\n    fun shaderSource(shader: WebGLShader?, source: String)\n    fun stencilFunc(func: Int, ref: Int, mask: Int)\n    fun stencilFuncSeparate(face: Int, func: Int, ref: Int, mask: Int)\n    fun stencilMask(mask: Int)\n    fun stencilMaskSeparate(face: Int, mask: Int)\n    fun stencilOp(fail: Int, zfail: Int, zpass: Int)\n    fun stencilOpSeparate(face: Int, fail: Int, zfail: Int, zpass: Int)\n    fun texImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, format: Int, type: Int, pixels: ArrayBufferView?)\n    fun texImage2D(target: Int, level: Int, internalformat: Int, format: Int, type: Int, source: TexImageSource?)\n    fun texParameterf(target: Int, pname: Int, param: Float)\n    fun texParameteri(target: Int, pname: Int, param: Int)\n    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, type: Int, pixels: ArrayBufferView?)\n    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, format: Int, type: Int, source: TexImageSource?)\n    fun uniform1f(location: WebGLUniformLocation?, x: Float)\n    fun uniform1fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform1fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform1i(location: WebGLUniformLocation?, x: Int)\n    fun uniform1iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform1iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniform2f(location: WebGLUniformLocation?, x: Float, y: Float)\n    fun uniform2fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform2fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform2i(location: WebGLUniformLocation?, x: Int, y: Int)\n    fun uniform2iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform2iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniform3f(location: WebGLUniformLocation?, x: Float, y: Float, z: Float)\n    fun uniform3fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform3fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform3i(location: WebGLUniformLocation?, x: Int, y: Int, z: Int)\n    fun uniform3iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform3iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniform4f(location: WebGLUniformLocation?, x: Float, y: Float, z: Float, w: Float)\n    fun uniform4fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform4fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform4i(location: WebGLUniformLocation?, x: Int, y: Int, z: Int, w: Int)\n    fun uniform4iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform4iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniformMatrix2fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array)\n    fun uniformMatrix2fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>)\n    fun uniformMatrix3fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array)\n    fun uniformMatrix3fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>)\n    fun uniformMatrix4fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array)\n    fun uniformMatrix4fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>)\n    fun useProgram(program: WebGLProgram?)\n    fun validateProgram(program: WebGLProgram?)\n    fun vertexAttrib1f(index: Int, x: Float)\n    fun vertexAttrib1fv(index: Int, values: dynamic)\n    fun vertexAttrib2f(index: Int, x: Float, y: Float)\n    fun vertexAttrib2fv(index: Int, values: dynamic)\n    fun vertexAttrib3f(index: Int, x: Float, y: Float, z: Float)\n    fun vertexAttrib3fv(index: Int, values: dynamic)\n    fun vertexAttrib4f(index: Int, x: Float, y: Float, z: Float, w: Float)\n    fun vertexAttrib4fv(index: Int, values: dynamic)\n    fun vertexAttribPointer(index: Int, size: Int, type: Int, normalized: Boolean, stride: Int, offset: Int)\n    fun viewport(x: Int, y: Int, width: Int, height: Int)\n\n    companion object {\n        val DEPTH_BUFFER_BIT: Int\n        val STENCIL_BUFFER_BIT: Int\n        val COLOR_BUFFER_BIT: Int\n        val POINTS: Int\n        val LINES: Int\n        val LINE_LOOP: Int\n        val LINE_STRIP: Int\n        val TRIANGLES: Int\n        val TRIANGLE_STRIP: Int\n        val TRIANGLE_FAN: Int\n        val ZERO: Int\n        val ONE: Int\n        val SRC_COLOR: Int\n        val ONE_MINUS_SRC_COLOR: Int\n        val SRC_ALPHA: Int\n        val ONE_MINUS_SRC_ALPHA: Int\n        val DST_ALPHA: Int\n        val ONE_MINUS_DST_ALPHA: Int\n        val DST_COLOR: Int\n        val ONE_MINUS_DST_COLOR: Int\n        val SRC_ALPHA_SATURATE: Int\n        val FUNC_ADD: Int\n        val BLEND_EQUATION: Int\n        val BLEND_EQUATION_RGB: Int\n        val BLEND_EQUATION_ALPHA: Int\n        val FUNC_SUBTRACT: Int\n        val FUNC_REVERSE_SUBTRACT: Int\n        val BLEND_DST_RGB: Int\n        val BLEND_SRC_RGB: Int\n        val BLEND_DST_ALPHA: Int\n        val BLEND_SRC_ALPHA: Int\n        val CONSTANT_COLOR: Int\n        val ONE_MINUS_CONSTANT_COLOR: Int\n        val CONSTANT_ALPHA: Int\n        val ONE_MINUS_CONSTANT_ALPHA: Int\n        val BLEND_COLOR: Int\n        val ARRAY_BUFFER: Int\n        val ELEMENT_ARRAY_BUFFER: Int\n        val ARRAY_BUFFER_BINDING: Int\n        val ELEMENT_ARRAY_BUFFER_BINDING: Int\n        val STREAM_DRAW: Int\n        val STATIC_DRAW: Int\n        val DYNAMIC_DRAW: Int\n        val BUFFER_SIZE: Int\n        val BUFFER_USAGE: Int\n        val CURRENT_VERTEX_ATTRIB: Int\n        val FRONT: Int\n        val BACK: Int\n        val FRONT_AND_BACK: Int\n        val CULL_FACE: Int\n        val BLEND: Int\n        val DITHER: Int\n        val STENCIL_TEST: Int\n        val DEPTH_TEST: Int\n        val SCISSOR_TEST: Int\n        val POLYGON_OFFSET_FILL: Int\n        val SAMPLE_ALPHA_TO_COVERAGE: Int\n        val SAMPLE_COVERAGE: Int\n        val NO_ERROR: Int\n        val INVALID_ENUM: Int\n        val INVALID_VALUE: Int\n        val INVALID_OPERATION: Int\n        val OUT_OF_MEMORY: Int\n        val CW: Int\n        val CCW: Int\n        val LINE_WIDTH: Int\n        val ALIASED_POINT_SIZE_RANGE: Int\n        val ALIASED_LINE_WIDTH_RANGE: Int\n        val CULL_FACE_MODE: Int\n        val FRONT_FACE: Int\n        val DEPTH_RANGE: Int\n        val DEPTH_WRITEMASK: Int\n        val DEPTH_CLEAR_VALUE: Int\n        val DEPTH_FUNC: Int\n        val STENCIL_CLEAR_VALUE: Int\n        val STENCIL_FUNC: Int\n        val STENCIL_FAIL: Int\n        val STENCIL_PASS_DEPTH_FAIL: Int\n        val STENCIL_PASS_DEPTH_PASS: Int\n        val STENCIL_REF: Int\n        val STENCIL_VALUE_MASK: Int\n        val STENCIL_WRITEMASK: Int\n        val STENCIL_BACK_FUNC: Int\n        val STENCIL_BACK_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_PASS: Int\n        val STENCIL_BACK_REF: Int\n        val STENCIL_BACK_VALUE_MASK: Int\n        val STENCIL_BACK_WRITEMASK: Int\n        val VIEWPORT: Int\n        val SCISSOR_BOX: Int\n        val COLOR_CLEAR_VALUE: Int\n        val COLOR_WRITEMASK: Int\n        val UNPACK_ALIGNMENT: Int\n        val PACK_ALIGNMENT: Int\n        val MAX_TEXTURE_SIZE: Int\n        val MAX_VIEWPORT_DIMS: Int\n        val SUBPIXEL_BITS: Int\n        val RED_BITS: Int\n        val GREEN_BITS: Int\n        val BLUE_BITS: Int\n        val ALPHA_BITS: Int\n        val DEPTH_BITS: Int\n        val STENCIL_BITS: Int\n        val POLYGON_OFFSET_UNITS: Int\n        val POLYGON_OFFSET_FACTOR: Int\n        val TEXTURE_BINDING_2D: Int\n        val SAMPLE_BUFFERS: Int\n        val SAMPLES: Int\n        val SAMPLE_COVERAGE_VALUE: Int\n        val SAMPLE_COVERAGE_INVERT: Int\n        val COMPRESSED_TEXTURE_FORMATS: Int\n        val DONT_CARE: Int\n        val FASTEST: Int\n        val NICEST: Int\n        val GENERATE_MIPMAP_HINT: Int\n        val BYTE: Int\n        val UNSIGNED_BYTE: Int\n        val SHORT: Int\n        val UNSIGNED_SHORT: Int\n        val INT: Int\n        val UNSIGNED_INT: Int\n        val FLOAT: Int\n        val DEPTH_COMPONENT: Int\n        val ALPHA: Int\n        val RGB: Int\n        val RGBA: Int\n        val LUMINANCE: Int\n        val LUMINANCE_ALPHA: Int\n        val UNSIGNED_SHORT_4_4_4_4: Int\n        val UNSIGNED_SHORT_5_5_5_1: Int\n        val UNSIGNED_SHORT_5_6_5: Int\n        val FRAGMENT_SHADER: Int\n        val VERTEX_SHADER: Int\n        val MAX_VERTEX_ATTRIBS: Int\n        val MAX_VERTEX_UNIFORM_VECTORS: Int\n        val MAX_VARYING_VECTORS: Int\n        val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int\n        val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_FRAGMENT_UNIFORM_VECTORS: Int\n        val SHADER_TYPE: Int\n        val DELETE_STATUS: Int\n        val LINK_STATUS: Int\n        val VALIDATE_STATUS: Int\n        val ATTACHED_SHADERS: Int\n        val ACTIVE_UNIFORMS: Int\n        val ACTIVE_ATTRIBUTES: Int\n        val SHADING_LANGUAGE_VERSION: Int\n        val CURRENT_PROGRAM: Int\n        val NEVER: Int\n        val LESS: Int\n        val EQUAL: Int\n        val LEQUAL: Int\n        val GREATER: Int\n        val NOTEQUAL: Int\n        val GEQUAL: Int\n        val ALWAYS: Int\n        val KEEP: Int\n        val REPLACE: Int\n        val INCR: Int\n        val DECR: Int\n        val INVERT: Int\n        val INCR_WRAP: Int\n        val DECR_WRAP: Int\n        val VENDOR: Int\n        val RENDERER: Int\n        val VERSION: Int\n        val NEAREST: Int\n        val LINEAR: Int\n        val NEAREST_MIPMAP_NEAREST: Int\n        val LINEAR_MIPMAP_NEAREST: Int\n        val NEAREST_MIPMAP_LINEAR: Int\n        val LINEAR_MIPMAP_LINEAR: Int\n        val TEXTURE_MAG_FILTER: Int\n        val TEXTURE_MIN_FILTER: Int\n        val TEXTURE_WRAP_S: Int\n        val TEXTURE_WRAP_T: Int\n        val TEXTURE_2D: Int\n        val TEXTURE: Int\n        val TEXTURE_CUBE_MAP: Int\n        val TEXTURE_BINDING_CUBE_MAP: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_X: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_X: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Y: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Z: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int\n        val MAX_CUBE_MAP_TEXTURE_SIZE: Int\n        val TEXTURE0: Int\n        val TEXTURE1: Int\n        val TEXTURE2: Int\n        val TEXTURE3: Int\n        val TEXTURE4: Int\n        val TEXTURE5: Int\n        val TEXTURE6: Int\n        val TEXTURE7: Int\n        val TEXTURE8: Int\n        val TEXTURE9: Int\n        val TEXTURE10: Int\n        val TEXTURE11: Int\n        val TEXTURE12: Int\n        val TEXTURE13: Int\n        val TEXTURE14: Int\n        val TEXTURE15: Int\n        val TEXTURE16: Int\n        val TEXTURE17: Int\n        val TEXTURE18: Int\n        val TEXTURE19: Int\n        val TEXTURE20: Int\n        val TEXTURE21: Int\n        val TEXTURE22: Int\n        val TEXTURE23: Int\n        val TEXTURE24: Int\n        val TEXTURE25: Int\n        val TEXTURE26: Int\n        val TEXTURE27: Int\n        val TEXTURE28: Int\n        val TEXTURE29: Int\n        val TEXTURE30: Int\n        val TEXTURE31: Int\n        val ACTIVE_TEXTURE: Int\n        val REPEAT: Int\n        val CLAMP_TO_EDGE: Int\n        val MIRRORED_REPEAT: Int\n        val FLOAT_VEC2: Int\n        val FLOAT_VEC3: Int\n        val FLOAT_VEC4: Int\n        val INT_VEC2: Int\n        val INT_VEC3: Int\n        val INT_VEC4: Int\n        val BOOL: Int\n        val BOOL_VEC2: Int\n        val BOOL_VEC3: Int\n        val BOOL_VEC4: Int\n        val FLOAT_MAT2: Int\n        val FLOAT_MAT3: Int\n        val FLOAT_MAT4: Int\n        val SAMPLER_2D: Int\n        val SAMPLER_CUBE: Int\n        val VERTEX_ATTRIB_ARRAY_ENABLED: Int\n        val VERTEX_ATTRIB_ARRAY_SIZE: Int\n        val VERTEX_ATTRIB_ARRAY_STRIDE: Int\n        val VERTEX_ATTRIB_ARRAY_TYPE: Int\n        val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int\n        val VERTEX_ATTRIB_ARRAY_POINTER: Int\n        val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int\n        val IMPLEMENTATION_COLOR_READ_TYPE: Int\n        val IMPLEMENTATION_COLOR_READ_FORMAT: Int\n        val COMPILE_STATUS: Int\n        val LOW_FLOAT: Int\n        val MEDIUM_FLOAT: Int\n        val HIGH_FLOAT: Int\n        val LOW_INT: Int\n        val MEDIUM_INT: Int\n        val HIGH_INT: Int\n        val FRAMEBUFFER: Int\n        val RENDERBUFFER: Int\n        val RGBA4: Int\n        val RGB5_A1: Int\n        val RGB565: Int\n        val DEPTH_COMPONENT16: Int\n        val STENCIL_INDEX: Int\n        val STENCIL_INDEX8: Int\n        val DEPTH_STENCIL: Int\n        val RENDERBUFFER_WIDTH: Int\n        val RENDERBUFFER_HEIGHT: Int\n        val RENDERBUFFER_INTERNAL_FORMAT: Int\n        val RENDERBUFFER_RED_SIZE: Int\n        val RENDERBUFFER_GREEN_SIZE: Int\n        val RENDERBUFFER_BLUE_SIZE: Int\n        val RENDERBUFFER_ALPHA_SIZE: Int\n        val RENDERBUFFER_DEPTH_SIZE: Int\n        val RENDERBUFFER_STENCIL_SIZE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int\n        val COLOR_ATTACHMENT0: Int\n        val DEPTH_ATTACHMENT: Int\n        val STENCIL_ATTACHMENT: Int\n        val DEPTH_STENCIL_ATTACHMENT: Int\n        val NONE: Int\n        val FRAMEBUFFER_COMPLETE: Int\n        val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int\n        val FRAMEBUFFER_UNSUPPORTED: Int\n        val FRAMEBUFFER_BINDING: Int\n        val RENDERBUFFER_BINDING: Int\n        val MAX_RENDERBUFFER_SIZE: Int\n        val INVALID_FRAMEBUFFER_OPERATION: Int\n        val UNPACK_FLIP_Y_WEBGL: Int\n        val UNPACK_PREMULTIPLY_ALPHA_WEBGL: Int\n        val CONTEXT_LOST_WEBGL: Int\n        val UNPACK_COLORSPACE_CONVERSION_WEBGL: Int\n        val BROWSER_DEFAULT_WEBGL: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [WebGLRenderingContext](https://developer.mozilla.org/en/docs/Web/API/WebGLRenderingContext) to Kotlin\n */\npublic external abstract class WebGLRenderingContext : WebGLRenderingContextBase, RenderingContext {\n    companion object {\n        val DEPTH_BUFFER_BIT: Int\n        val STENCIL_BUFFER_BIT: Int\n        val COLOR_BUFFER_BIT: Int\n        val POINTS: Int\n        val LINES: Int\n        val LINE_LOOP: Int\n        val LINE_STRIP: Int\n        val TRIANGLES: Int\n        val TRIANGLE_STRIP: Int\n        val TRIANGLE_FAN: Int\n        val ZERO: Int\n        val ONE: Int\n        val SRC_COLOR: Int\n        val ONE_MINUS_SRC_COLOR: Int\n        val SRC_ALPHA: Int\n        val ONE_MINUS_SRC_ALPHA: Int\n        val DST_ALPHA: Int\n        val ONE_MINUS_DST_ALPHA: Int\n        val DST_COLOR: Int\n        val ONE_MINUS_DST_COLOR: Int\n        val SRC_ALPHA_SATURATE: Int\n        val FUNC_ADD: Int\n        val BLEND_EQUATION: Int\n        val BLEND_EQUATION_RGB: Int\n        val BLEND_EQUATION_ALPHA: Int\n        val FUNC_SUBTRACT: Int\n        val FUNC_REVERSE_SUBTRACT: Int\n        val BLEND_DST_RGB: Int\n        val BLEND_SRC_RGB: Int\n        val BLEND_DST_ALPHA: Int\n        val BLEND_SRC_ALPHA: Int\n        val CONSTANT_COLOR: Int\n        val ONE_MINUS_CONSTANT_COLOR: Int\n        val CONSTANT_ALPHA: Int\n        val ONE_MINUS_CONSTANT_ALPHA: Int\n        val BLEND_COLOR: Int\n        val ARRAY_BUFFER: Int\n        val ELEMENT_ARRAY_BUFFER: Int\n        val ARRAY_BUFFER_BINDING: Int\n        val ELEMENT_ARRAY_BUFFER_BINDING: Int\n        val STREAM_DRAW: Int\n        val STATIC_DRAW: Int\n        val DYNAMIC_DRAW: Int\n        val BUFFER_SIZE: Int\n        val BUFFER_USAGE: Int\n        val CURRENT_VERTEX_ATTRIB: Int\n        val FRONT: Int\n        val BACK: Int\n        val FRONT_AND_BACK: Int\n        val CULL_FACE: Int\n        val BLEND: Int\n        val DITHER: Int\n        val STENCIL_TEST: Int\n        val DEPTH_TEST: Int\n        val SCISSOR_TEST: Int\n        val POLYGON_OFFSET_FILL: Int\n        val SAMPLE_ALPHA_TO_COVERAGE: Int\n        val SAMPLE_COVERAGE: Int\n        val NO_ERROR: Int\n        val INVALID_ENUM: Int\n        val INVALID_VALUE: Int\n        val INVALID_OPERATION: Int\n        val OUT_OF_MEMORY: Int\n        val CW: Int\n        val CCW: Int\n        val LINE_WIDTH: Int\n        val ALIASED_POINT_SIZE_RANGE: Int\n        val ALIASED_LINE_WIDTH_RANGE: Int\n        val CULL_FACE_MODE: Int\n        val FRONT_FACE: Int\n        val DEPTH_RANGE: Int\n        val DEPTH_WRITEMASK: Int\n        val DEPTH_CLEAR_VALUE: Int\n        val DEPTH_FUNC: Int\n        val STENCIL_CLEAR_VALUE: Int\n        val STENCIL_FUNC: Int\n        val STENCIL_FAIL: Int\n        val STENCIL_PASS_DEPTH_FAIL: Int\n        val STENCIL_PASS_DEPTH_PASS: Int\n        val STENCIL_REF: Int\n        val STENCIL_VALUE_MASK: Int\n        val STENCIL_WRITEMASK: Int\n        val STENCIL_BACK_FUNC: Int\n        val STENCIL_BACK_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_PASS: Int\n        val STENCIL_BACK_REF: Int\n        val STENCIL_BACK_VALUE_MASK: Int\n        val STENCIL_BACK_WRITEMASK: Int\n        val VIEWPORT: Int\n        val SCISSOR_BOX: Int\n        val COLOR_CLEAR_VALUE: Int\n        val COLOR_WRITEMASK: Int\n        val UNPACK_ALIGNMENT: Int\n        val PACK_ALIGNMENT: Int\n        val MAX_TEXTURE_SIZE: Int\n        val MAX_VIEWPORT_DIMS: Int\n        val SUBPIXEL_BITS: Int\n        val RED_BITS: Int\n        val GREEN_BITS: Int\n        val BLUE_BITS: Int\n        val ALPHA_BITS: Int\n        val DEPTH_BITS: Int\n        val STENCIL_BITS: Int\n        val POLYGON_OFFSET_UNITS: Int\n        val POLYGON_OFFSET_FACTOR: Int\n        val TEXTURE_BINDING_2D: Int\n        val SAMPLE_BUFFERS: Int\n        val SAMPLES: Int\n        val SAMPLE_COVERAGE_VALUE: Int\n        val SAMPLE_COVERAGE_INVERT: Int\n        val COMPRESSED_TEXTURE_FORMATS: Int\n        val DONT_CARE: Int\n        val FASTEST: Int\n        val NICEST: Int\n        val GENERATE_MIPMAP_HINT: Int\n        val BYTE: Int\n        val UNSIGNED_BYTE: Int\n        val SHORT: Int\n        val UNSIGNED_SHORT: Int\n        val INT: Int\n        val UNSIGNED_INT: Int\n        val FLOAT: Int\n        val DEPTH_COMPONENT: Int\n        val ALPHA: Int\n        val RGB: Int\n        val RGBA: Int\n        val LUMINANCE: Int\n        val LUMINANCE_ALPHA: Int\n        val UNSIGNED_SHORT_4_4_4_4: Int\n        val UNSIGNED_SHORT_5_5_5_1: Int\n        val UNSIGNED_SHORT_5_6_5: Int\n        val FRAGMENT_SHADER: Int\n        val VERTEX_SHADER: Int\n        val MAX_VERTEX_ATTRIBS: Int\n        val MAX_VERTEX_UNIFORM_VECTORS: Int\n        val MAX_VARYING_VECTORS: Int\n        val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int\n        val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_FRAGMENT_UNIFORM_VECTORS: Int\n        val SHADER_TYPE: Int\n        val DELETE_STATUS: Int\n        val LINK_STATUS: Int\n        val VALIDATE_STATUS: Int\n        val ATTACHED_SHADERS: Int\n        val ACTIVE_UNIFORMS: Int\n        val ACTIVE_ATTRIBUTES: Int\n        val SHADING_LANGUAGE_VERSION: Int\n        val CURRENT_PROGRAM: Int\n        val NEVER: Int\n        val LESS: Int\n        val EQUAL: Int\n        val LEQUAL: Int\n        val GREATER: Int\n        val NOTEQUAL: Int\n        val GEQUAL: Int\n        val ALWAYS: Int\n        val KEEP: Int\n        val REPLACE: Int\n        val INCR: Int\n        val DECR: Int\n        val INVERT: Int\n        val INCR_WRAP: Int\n        val DECR_WRAP: Int\n        val VENDOR: Int\n        val RENDERER: Int\n        val VERSION: Int\n        val NEAREST: Int\n        val LINEAR: Int\n        val NEAREST_MIPMAP_NEAREST: Int\n        val LINEAR_MIPMAP_NEAREST: Int\n        val NEAREST_MIPMAP_LINEAR: Int\n        val LINEAR_MIPMAP_LINEAR: Int\n        val TEXTURE_MAG_FILTER: Int\n        val TEXTURE_MIN_FILTER: Int\n        val TEXTURE_WRAP_S: Int\n        val TEXTURE_WRAP_T: Int\n        val TEXTURE_2D: Int\n        val TEXTURE: Int\n        val TEXTURE_CUBE_MAP: Int\n        val TEXTURE_BINDING_CUBE_MAP: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_X: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_X: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Y: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Z: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int\n        val MAX_CUBE_MAP_TEXTURE_SIZE: Int\n        val TEXTURE0: Int\n        val TEXTURE1: Int\n        val TEXTURE2: Int\n        val TEXTURE3: Int\n        val TEXTURE4: Int\n        val TEXTURE5: Int\n        val TEXTURE6: Int\n        val TEXTURE7: Int\n        val TEXTURE8: Int\n        val TEXTURE9: Int\n        val TEXTURE10: Int\n        val TEXTURE11: Int\n        val TEXTURE12: Int\n        val TEXTURE13: Int\n        val TEXTURE14: Int\n        val TEXTURE15: Int\n        val TEXTURE16: Int\n        val TEXTURE17: Int\n        val TEXTURE18: Int\n        val TEXTURE19: Int\n        val TEXTURE20: Int\n        val TEXTURE21: Int\n        val TEXTURE22: Int\n        val TEXTURE23: Int\n        val TEXTURE24: Int\n        val TEXTURE25: Int\n        val TEXTURE26: Int\n        val TEXTURE27: Int\n        val TEXTURE28: Int\n        val TEXTURE29: Int\n        val TEXTURE30: Int\n        val TEXTURE31: Int\n        val ACTIVE_TEXTURE: Int\n        val REPEAT: Int\n        val CLAMP_TO_EDGE: Int\n        val MIRRORED_REPEAT: Int\n        val FLOAT_VEC2: Int\n        val FLOAT_VEC3: Int\n        val FLOAT_VEC4: Int\n        val INT_VEC2: Int\n        val INT_VEC3: Int\n        val INT_VEC4: Int\n        val BOOL: Int\n        val BOOL_VEC2: Int\n        val BOOL_VEC3: Int\n        val BOOL_VEC4: Int\n        val FLOAT_MAT2: Int\n        val FLOAT_MAT3: Int\n        val FLOAT_MAT4: Int\n        val SAMPLER_2D: Int\n        val SAMPLER_CUBE: Int\n        val VERTEX_ATTRIB_ARRAY_ENABLED: Int\n        val VERTEX_ATTRIB_ARRAY_SIZE: Int\n        val VERTEX_ATTRIB_ARRAY_STRIDE: Int\n        val VERTEX_ATTRIB_ARRAY_TYPE: Int\n        val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int\n        val VERTEX_ATTRIB_ARRAY_POINTER: Int\n        val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int\n        val IMPLEMENTATION_COLOR_READ_TYPE: Int\n        val IMPLEMENTATION_COLOR_READ_FORMAT: Int\n        val COMPILE_STATUS: Int\n        val LOW_FLOAT: Int\n        val MEDIUM_FLOAT: Int\n        val HIGH_FLOAT: Int\n        val LOW_INT: Int\n        val MEDIUM_INT: Int\n        val HIGH_INT: Int\n        val FRAMEBUFFER: Int\n        val RENDERBUFFER: Int\n        val RGBA4: Int\n        val RGB5_A1: Int\n        val RGB565: Int\n        val DEPTH_COMPONENT16: Int\n        val STENCIL_INDEX: Int\n        val STENCIL_INDEX8: Int\n        val DEPTH_STENCIL: Int\n        val RENDERBUFFER_WIDTH: Int\n        val RENDERBUFFER_HEIGHT: Int\n        val RENDERBUFFER_INTERNAL_FORMAT: Int\n        val RENDERBUFFER_RED_SIZE: Int\n        val RENDERBUFFER_GREEN_SIZE: Int\n        val RENDERBUFFER_BLUE_SIZE: Int\n        val RENDERBUFFER_ALPHA_SIZE: Int\n        val RENDERBUFFER_DEPTH_SIZE: Int\n        val RENDERBUFFER_STENCIL_SIZE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int\n        val COLOR_ATTACHMENT0: Int\n        val DEPTH_ATTACHMENT: Int\n        val STENCIL_ATTACHMENT: Int\n        val DEPTH_STENCIL_ATTACHMENT: Int\n        val NONE: Int\n        val FRAMEBUFFER_COMPLETE: Int\n        val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int\n        val FRAMEBUFFER_UNSUPPORTED: Int\n        val FRAMEBUFFER_BINDING: Int\n        val RENDERBUFFER_BINDING: Int\n        val MAX_RENDERBUFFER_SIZE: Int\n        val INVALID_FRAMEBUFFER_OPERATION: Int\n        val UNPACK_FLIP_Y_WEBGL: Int\n        val UNPACK_PREMULTIPLY_ALPHA_WEBGL: Int\n        val CONTEXT_LOST_WEBGL: Int\n        val UNPACK_COLORSPACE_CONVERSION_WEBGL: Int\n        val BROWSER_DEFAULT_WEBGL: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [WebGLContextEvent](https://developer.mozilla.org/en/docs/Web/API/WebGLContextEvent) to Kotlin\n */\npublic external open class WebGLContextEvent(type: String, eventInit: WebGLContextEventInit = definedExternally) : Event {\n    open val statusMessage: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface WebGLContextEventInit : EventInit {\n    var statusMessage: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WebGLContextEventInit(statusMessage: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): WebGLContextEventInit {\n    val o = js(\"({})\")\n    o[\"statusMessage\"] = statusMessage\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [ArrayBuffer](https://developer.mozilla.org/en/docs/Web/API/ArrayBuffer) to Kotlin\n */\npublic external open class ArrayBuffer(length: Int) : BufferDataSource {\n    open val byteLength: Int\n    fun slice(begin: Int, end: Int = definedExternally): ArrayBuffer\n\n    companion object {\n        fun isView(value: Any?): Boolean\n    }\n}\n\n/**\n * Exposes the JavaScript [ArrayBufferView](https://developer.mozilla.org/en/docs/Web/API/ArrayBufferView) to Kotlin\n */\npublic external interface ArrayBufferView : BufferDataSource {\n    val buffer: ArrayBuffer\n    val byteOffset: Int\n    val byteLength: Int\n}\n\n/**\n * Exposes the JavaScript [Int8Array](https://developer.mozilla.org/en/docs/Web/API/Int8Array) to Kotlin\n */\npublic external open class Int8Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int8Array)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int8Array, offset: Int = definedExternally)\n    fun set(array: Array<Byte>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Int8Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int8Array.get(index: Int): Byte = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int8Array.set(index: Int, value: Byte) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint8Array](https://developer.mozilla.org/en/docs/Web/API/Uint8Array) to Kotlin\n */\npublic external open class Uint8Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint8Array)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint8Array, offset: Int = definedExternally)\n    fun set(array: Array<Byte>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint8Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8Array.get(index: Int): Byte = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8Array.set(index: Int, value: Byte) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint8ClampedArray](https://developer.mozilla.org/en/docs/Web/API/Uint8ClampedArray) to Kotlin\n */\npublic external open class Uint8ClampedArray : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint8ClampedArray)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint8ClampedArray, offset: Int = definedExternally)\n    fun set(array: Array<Byte>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint8ClampedArray\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8ClampedArray.get(index: Int): Byte = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8ClampedArray.set(index: Int, value: Byte) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Int16Array](https://developer.mozilla.org/en/docs/Web/API/Int16Array) to Kotlin\n */\npublic external open class Int16Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int16Array)\n    constructor(array: Array<Short>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int16Array, offset: Int = definedExternally)\n    fun set(array: Array<Short>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Int16Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int16Array.get(index: Int): Short = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int16Array.set(index: Int, value: Short) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint16Array](https://developer.mozilla.org/en/docs/Web/API/Uint16Array) to Kotlin\n */\npublic external open class Uint16Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint16Array)\n    constructor(array: Array<Short>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint16Array, offset: Int = definedExternally)\n    fun set(array: Array<Short>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint16Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint16Array.get(index: Int): Short = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint16Array.set(index: Int, value: Short) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Int32Array](https://developer.mozilla.org/en/docs/Web/API/Int32Array) to Kotlin\n */\npublic external open class Int32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int32Array)\n    constructor(array: Array<Int>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int32Array, offset: Int = definedExternally)\n    fun set(array: Array<Int>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Int32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int32Array.get(index: Int): Int = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int32Array.set(index: Int, value: Int) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint32Array](https://developer.mozilla.org/en/docs/Web/API/Uint32Array) to Kotlin\n */\npublic external open class Uint32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint32Array)\n    constructor(array: Array<Int>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint32Array, offset: Int = definedExternally)\n    fun set(array: Array<Int>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint32Array.get(index: Int): Int = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint32Array.set(index: Int, value: Int) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Float32Array](https://developer.mozilla.org/en/docs/Web/API/Float32Array) to Kotlin\n */\npublic external open class Float32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Float32Array)\n    constructor(array: Array<Float>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Float32Array, offset: Int = definedExternally)\n    fun set(array: Array<Float>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Float32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float32Array.get(index: Int): Float = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float32Array.set(index: Int, value: Float) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Float64Array](https://developer.mozilla.org/en/docs/Web/API/Float64Array) to Kotlin\n */\npublic external open class Float64Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Float64Array)\n    constructor(array: Array<Double>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Float64Array, offset: Int = definedExternally)\n    fun set(array: Array<Double>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Float64Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float64Array.get(index: Int): Double = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float64Array.set(index: Int, value: Double) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [DataView](https://developer.mozilla.org/en/docs/Web/API/DataView) to Kotlin\n */\npublic external open class DataView(buffer: ArrayBuffer, byteOffset: Int = definedExternally, byteLength: Int = definedExternally) : ArrayBufferView {\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun getInt8(byteOffset: Int): Byte\n    fun getUint8(byteOffset: Int): Byte\n    fun getInt16(byteOffset: Int, littleEndian: Boolean = definedExternally): Short\n    fun getUint16(byteOffset: Int, littleEndian: Boolean = definedExternally): Short\n    fun getInt32(byteOffset: Int, littleEndian: Boolean = definedExternally): Int\n    fun getUint32(byteOffset: Int, littleEndian: Boolean = definedExternally): Int\n    fun getFloat32(byteOffset: Int, littleEndian: Boolean = definedExternally): Float\n    fun getFloat64(byteOffset: Int, littleEndian: Boolean = definedExternally): Double\n    fun setInt8(byteOffset: Int, value: Byte)\n    fun setUint8(byteOffset: Int, value: Byte)\n    fun setInt16(byteOffset: Int, value: Short, littleEndian: Boolean = definedExternally)\n    fun setUint16(byteOffset: Int, value: Short, littleEndian: Boolean = definedExternally)\n    fun setInt32(byteOffset: Int, value: Int, littleEndian: Boolean = definedExternally)\n    fun setUint32(byteOffset: Int, value: Int, littleEndian: Boolean = definedExternally)\n    fun setFloat32(byteOffset: Int, value: Float, littleEndian: Boolean = definedExternally)\n    fun setFloat64(byteOffset: Int, value: Double, littleEndian: Boolean = definedExternally)\n}\n\npublic external interface BufferDataSource\n\npublic external interface TexImageSource",null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.files\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [Blob](https://developer.mozilla.org/en/docs/Web/API/Blob) to Kotlin\n */\npublic external open class Blob(blobParts: Array<dynamic> = definedExternally, options: BlobPropertyBag = definedExternally) : MediaProvider, ImageBitmapSource {\n    open val size: Number\n    open val type: String\n    open val isClosed: Boolean\n    fun slice(start: Int = definedExternally, end: Int = definedExternally, contentType: String = definedExternally): Blob\n    fun close()\n}\n\npublic external interface BlobPropertyBag {\n    var type: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BlobPropertyBag(type: String? = \"\"): BlobPropertyBag {\n    val o = js(\"({})\")\n    o[\"type\"] = type\n    return o\n}\n\n/**\n * Exposes the JavaScript [File](https://developer.mozilla.org/en/docs/Web/API/File) to Kotlin\n */\npublic external open class File(fileBits: Array<dynamic>, fileName: String, options: FilePropertyBag = definedExternally) : Blob {\n    open val name: String\n    open val lastModified: Int\n}\n\npublic external interface FilePropertyBag : BlobPropertyBag {\n    var lastModified: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun FilePropertyBag(lastModified: Int? = undefined, type: String? = \"\"): FilePropertyBag {\n    val o = js(\"({})\")\n    o[\"lastModified\"] = lastModified\n    o[\"type\"] = type\n    return o\n}\n\n/**\n * Exposes the JavaScript [FileList](https://developer.mozilla.org/en/docs/Web/API/FileList) to Kotlin\n */\npublic external abstract class FileList : ItemArrayLike<File> {\n    override fun item(index: Int): File?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun FileList.get(index: Int): File? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [FileReader](https://developer.mozilla.org/en/docs/Web/API/FileReader) to Kotlin\n */\npublic external open class FileReader : EventTarget {\n    open val readyState: Short\n    open val result: dynamic\n    open val error: dynamic\n    var onloadstart: ((ProgressEvent) -> dynamic)?\n    var onprogress: ((ProgressEvent) -> dynamic)?\n    var onload: ((Event) -> dynamic)?\n    var onabort: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onloadend: ((Event) -> dynamic)?\n    fun readAsArrayBuffer(blob: Blob)\n    fun readAsBinaryString(blob: Blob)\n    fun readAsText(blob: Blob, label: String = definedExternally)\n    fun readAsDataURL(blob: Blob)\n    fun abort()\n\n    companion object {\n        val EMPTY: Short\n        val LOADING: Short\n        val DONE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [FileReaderSync](https://developer.mozilla.org/en/docs/Web/API/FileReaderSync) to Kotlin\n */\npublic external open class FileReaderSync {\n    fun readAsArrayBuffer(blob: Blob): ArrayBuffer\n    fun readAsBinaryString(blob: Blob): String\n    fun readAsText(blob: Blob, label: String = definedExternally): String\n    fun readAsDataURL(blob: Blob): String\n}",null,"/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sourceRoot":""}