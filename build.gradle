plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.72'
    id 'java'
    id 'org.jetbrains.dokka' version '0.10.1'
}
repositories {
    jcenter()
    mavenCentral()
    jcenter()
}

group "io.github.kgpu"
version '0.1.0'

import org.gradle.internal.os.OperatingSystem

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        project.ext.natives = "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.natives = "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        project.ext.natives = "natives-windows"
        break
}

kotlin {
    jvm()
    js(){
        browser()
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                api 'org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.3.7'
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                api 'org.jetbrains.kotlinx:kotlinx-coroutines-core-js:1.3.7'
            }
        }
        jvmMain {
            dependencies {
                api(project(":native"))
                implementation kotlin('stdlib-jdk8')
                api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7'

                def lwjglVersion = "3.2.3"

                implementation "org.lwjgl:lwjgl:$lwjglVersion"
                implementation "org.lwjgl:lwjgl-glfw:$lwjglVersion"
                runtimeOnly "org.lwjgl:lwjgl:$lwjglVersion:$natives"
                runtimeOnly "org.lwjgl:lwjgl-glfw:$lwjglVersion:$natives"
            }
        }
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$rootDir/docs/book"

    multiplatform {
        global {

        }
        js {}
        jvm {
            subProjects = ["native"]
        }
    }
}

task startDocServer(){
    def port = 8000;
    def path = "/docs/book"

    doLast{
        def server = new SimpleHttpFileServerFactory().start(new File(rootDir, path), port)

        println "Server started in directory " + server.getContentRoot()
        println "Link: http://localhost:" + server.getPort() + "/index.html\n\n"
    }
}

task copyExamples(type: Copy, dependsOn: project(":examples").getTasksByName("assemble", false).first()) {
    from("$rootDir/examples/build/website") {
        include("**.**")
    }
    into("$rootDir/docs/book/examples")
}

task generateBook(type: Exec){
    workingDir "${rootDir}/docs"
    commandLine 'mdbook', 'build'
}

task generateDocumentation{
    dependsOn generateBook
}

generateDocumentation.finalizedBy copyExamples
generateDocumentation.finalizedBy dokka