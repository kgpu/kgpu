package io.github.kgpu.wgpuj.jni;

import io.github.kgpu.wgpuj.util.WgpuJavaStruct;
import io.github.kgpu.wgpuj.util.CStrPointer;
import io.github.kgpu.wgpuj.util.RustCString;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WgpuPipelineLayoutDescriptor extends WgpuJavaStruct {

    private final @CStrPointer Struct.Pointer label = new Struct.Pointer();
    private final Struct.Pointer bindGroupLayouts = new Struct.Pointer();
    private final Struct.Unsigned64 bindGroupLayoutsLength = new Struct.Unsigned64();

    protected WgpuPipelineLayoutDescriptor(boolean direct){
         if(direct){
             useDirectMemory();
        }
    }

    @Deprecated
    public WgpuPipelineLayoutDescriptor(Runtime runtime){
        super(runtime);
    }

    /**
    * Creates this struct on the java heap.
    * In general, this should <b>not</b> be used because these structs
    * cannot be directly passed into native code. 
    */
    public static WgpuPipelineLayoutDescriptor createHeap(){
        return new WgpuPipelineLayoutDescriptor(false);
    }

    /**
    * Creates this struct in direct memory.
    * This is how most structs should be created (unless, they
    * are members of a nothing struct)
    * 
    * @see WgpuJavaStruct#useDirectMemory
    */
    public static WgpuPipelineLayoutDescriptor createDirect(){
        return new WgpuPipelineLayoutDescriptor(true);
    }


    public java.lang.String getLabel(){
        return RustCString.fromPointer(label.get());
    }

    public void setLabel(java.lang.String x){
        this.label.set(RustCString.toPointer(x));
    }

    public jnr.ffi.Pointer getBindGroupLayouts(){
        return bindGroupLayouts.get();
    }

    public void setBindGroupLayouts(jnr.ffi.Pointer x){
        this.bindGroupLayouts.set(x);
    }

    public long getBindGroupLayoutsLength(){
        return bindGroupLayoutsLength.get();
    }

    public void setBindGroupLayoutsLength(long x){
        this.bindGroupLayoutsLength.set(x);
    }

}