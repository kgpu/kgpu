package io.github.kgpu.wgpuj.jni;

import io.github.kgpu.wgpuj.util.WgpuJavaStruct;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WgpuBindGroupEntry extends WgpuJavaStruct {

    private final Struct.Unsigned32 binding = new Struct.Unsigned32();
    private final Struct.Unsigned32 _NO_USE_padding = new Struct.Unsigned32();
    private final Struct.Unsigned64 buffer = new Struct.Unsigned64();
    private final Struct.Unsigned64 offset = new Struct.Unsigned64();
    private final Struct.Unsigned64 size = new Struct.Unsigned64();
    private final Struct.Unsigned64 sampler = new Struct.Unsigned64();
    private final Struct.Unsigned64 textureView = new Struct.Unsigned64();

    protected WgpuBindGroupEntry(boolean direct){
         if(direct){
             useDirectMemory();
        }
    }

    @Deprecated
    public WgpuBindGroupEntry(Runtime runtime){
        super(runtime);
    }

    /**
    * Creates this struct on the java heap.
    * In general, this should <b>not</b> be used because these structs
    * cannot be directly passed into native code. 
    */
    public static WgpuBindGroupEntry createHeap(){
        return new WgpuBindGroupEntry(false);
    }

    /**
    * Creates this struct in direct memory.
    * This is how most structs should be created (unless, they
    * are members of a nothing struct)
    * 
    * @see WgpuJavaStruct#useDirectMemory
    */
    public static WgpuBindGroupEntry createDirect(){
        return new WgpuBindGroupEntry(true);
    }


    public long getBinding(){
        return binding.get();
    }

    public void setBinding(long x){
        this.binding.set(x);
    }

    public long getBuffer(){
        return buffer.get();
    }

    public void setBuffer(long x){
        this.buffer.set(x);
    }

    public long getOffset(){
        return offset.get();
    }

    public void setOffset(long x){
        this.offset.set(x);
    }

    public long getSize(){
        return size.get();
    }

    public void setSize(long x){
        this.size.set(x);
    }

    public long getSampler(){
        return sampler.get();
    }

    public void setSampler(long x){
        this.sampler.set(x);
    }

    public long getTextureView(){
        return textureView.get();
    }

    public void setTextureView(long x){
        this.textureView.set(x);
    }

}